
-- *** STRUCTURE: `tbl_fields_author` ***
DROP TABLE IF EXISTS `tbl_fields_author`;
CREATE TABLE `tbl_fields_author` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `field_id` int(11) unsigned NOT NULL,
  `allow_author_change` enum('yes','no') collate utf8_unicode_ci NOT NULL,
  `allow_multiple_selection` enum('yes','no') collate utf8_unicode_ci NOT NULL default 'no',
  PRIMARY KEY  (`id`),
  UNIQUE KEY `field_id` (`field_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_fields_author` ***

-- *** STRUCTURE: `tbl_fields_checkbox` ***
DROP TABLE IF EXISTS `tbl_fields_checkbox`;
CREATE TABLE `tbl_fields_checkbox` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `field_id` int(11) unsigned NOT NULL,
  `default_state` enum('on','off') collate utf8_unicode_ci NOT NULL default 'on',
  `description` varchar(255) collate utf8_unicode_ci default NULL,
  PRIMARY KEY  (`id`),
  KEY `field_id` (`field_id`)
) ENGINE=MyISAM AUTO_INCREMENT=14 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_fields_checkbox` ***
INSERT INTO `tbl_fields_checkbox` (`id`, `field_id`, `default_state`, `description`) VALUES (9, 25, 'off', NULL);
INSERT INTO `tbl_fields_checkbox` (`id`, `field_id`, `default_state`, `description`) VALUES (13, 34, 'off', NULL);

-- *** STRUCTURE: `tbl_fields_date` ***
DROP TABLE IF EXISTS `tbl_fields_date`;
CREATE TABLE `tbl_fields_date` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `field_id` int(11) unsigned NOT NULL,
  `pre_populate` enum('yes','no') collate utf8_unicode_ci NOT NULL default 'no',
  `calendar` enum('yes','no') collate utf8_unicode_ci NOT NULL default 'no',
  PRIMARY KEY  (`id`),
  KEY `field_id` (`field_id`)
) ENGINE=MyISAM AUTO_INCREMENT=15 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_fields_date` ***
INSERT INTO `tbl_fields_date` (`id`, `field_id`, `pre_populate`, `calendar`) VALUES (10, 24, 'yes', 'no');
INSERT INTO `tbl_fields_date` (`id`, `field_id`, `pre_populate`, `calendar`) VALUES (14, 32, 'yes', 'no');

-- *** STRUCTURE: `tbl_fields_input` ***
DROP TABLE IF EXISTS `tbl_fields_input`;
CREATE TABLE `tbl_fields_input` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `field_id` int(11) unsigned NOT NULL,
  `validator` varchar(100) collate utf8_unicode_ci default NULL,
  PRIMARY KEY  (`id`),
  KEY `field_id` (`field_id`)
) ENGINE=MyISAM AUTO_INCREMENT=46 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_fields_input` ***
INSERT INTO `tbl_fields_input` (`id`, `field_id`, `validator`) VALUES (41, 9, NULL);
INSERT INTO `tbl_fields_input` (`id`, `field_id`, `validator`) VALUES (19, 7, NULL);
INSERT INTO `tbl_fields_input` (`id`, `field_id`, `validator`) VALUES (33, 15, NULL);
INSERT INTO `tbl_fields_input` (`id`, `field_id`, `validator`) VALUES (36, 19, NULL);
INSERT INTO `tbl_fields_input` (`id`, `field_id`, `validator`) VALUES (44, 26, NULL);
INSERT INTO `tbl_fields_input` (`id`, `field_id`, `validator`) VALUES (45, 37, NULL);

-- *** STRUCTURE: `tbl_fields_member` ***
DROP TABLE IF EXISTS `tbl_fields_member`;
CREATE TABLE `tbl_fields_member` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `field_id` int(11) unsigned NOT NULL,
  PRIMARY KEY  (`id`),
  UNIQUE KEY `field_id` (`field_id`)
) ENGINE=MyISAM AUTO_INCREMENT=12 DEFAULT CHARSET=utf8;

-- *** DATA: `tbl_fields_member` ***

-- *** STRUCTURE: `tbl_fields_memberlink` ***
DROP TABLE IF EXISTS `tbl_fields_memberlink`;
CREATE TABLE `tbl_fields_memberlink` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `field_id` int(11) unsigned NOT NULL,
  PRIMARY KEY  (`id`),
  UNIQUE KEY `field_id` (`field_id`)
) ENGINE=MyISAM AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;

-- *** DATA: `tbl_fields_memberlink` ***

-- *** STRUCTURE: `tbl_fields_memberrole` ***
DROP TABLE IF EXISTS `tbl_fields_memberrole`;
CREATE TABLE `tbl_fields_memberrole` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `field_id` int(11) unsigned NOT NULL,
  PRIMARY KEY  (`id`),
  UNIQUE KEY `field_id` (`field_id`)
) ENGINE=MyISAM AUTO_INCREMENT=12 DEFAULT CHARSET=utf8;

-- *** DATA: `tbl_fields_memberrole` ***

-- *** STRUCTURE: `tbl_fields_order_entries` ***
DROP TABLE IF EXISTS `tbl_fields_order_entries`;
CREATE TABLE `tbl_fields_order_entries` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `field_id` int(11) unsigned NOT NULL,
  PRIMARY KEY  (`id`),
  UNIQUE KEY `field_id` (`field_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_fields_order_entries` ***

-- *** STRUCTURE: `tbl_fields_select` ***
DROP TABLE IF EXISTS `tbl_fields_select`;
CREATE TABLE `tbl_fields_select` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `field_id` int(11) unsigned NOT NULL,
  `allow_multiple_selection` enum('yes','no') collate utf8_unicode_ci NOT NULL default 'no',
  `static_options` text collate utf8_unicode_ci,
  `dynamic_options` int(11) unsigned default NULL,
  PRIMARY KEY  (`id`),
  KEY `field_id` (`field_id`)
) ENGINE=MyISAM AUTO_INCREMENT=8 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_fields_select` ***
INSERT INTO `tbl_fields_select` (`id`, `field_id`, `allow_multiple_selection`, `static_options`, `dynamic_options`) VALUES (7, 13, 'no', 'Content, Main', NULL);

-- *** STRUCTURE: `tbl_fields_selectbox_link` ***
DROP TABLE IF EXISTS `tbl_fields_selectbox_link`;
CREATE TABLE `tbl_fields_selectbox_link` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `field_id` int(11) unsigned NOT NULL,
  `allow_multiple_selection` enum('yes','no') collate utf8_unicode_ci NOT NULL default 'no',
  `related_field_id` varchar(255) collate utf8_unicode_ci NOT NULL,
  `limit` int(4) unsigned NOT NULL default '20',
  PRIMARY KEY  (`id`),
  KEY `field_id` (`field_id`)
) ENGINE=MyISAM AUTO_INCREMENT=50 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_fields_selectbox_link` ***
INSERT INTO `tbl_fields_selectbox_link` (`id`, `field_id`, `allow_multiple_selection`, `related_field_id`, `limit`) VALUES (43, 12, 'no', 9, 20);
INSERT INTO `tbl_fields_selectbox_link` (`id`, `field_id`, `allow_multiple_selection`, `related_field_id`, `limit`) VALUES (30, 18, 'yes', 9, 20);
INSERT INTO `tbl_fields_selectbox_link` (`id`, `field_id`, `allow_multiple_selection`, `related_field_id`, `limit`) VALUES (35, 22, 'no', 9, 20);
INSERT INTO `tbl_fields_selectbox_link` (`id`, `field_id`, `allow_multiple_selection`, `related_field_id`, `limit`) VALUES (36, 23, 'no', 15, 20);
INSERT INTO `tbl_fields_selectbox_link` (`id`, `field_id`, `allow_multiple_selection`, `related_field_id`, `limit`) VALUES (47, 27, 'no', 7, 20);
INSERT INTO `tbl_fields_selectbox_link` (`id`, `field_id`, `allow_multiple_selection`, `related_field_id`, `limit`) VALUES (48, 28, 'no', 19, 20);
INSERT INTO `tbl_fields_selectbox_link` (`id`, `field_id`, `allow_multiple_selection`, `related_field_id`, `limit`) VALUES (49, 33, 'no', 15, 20);

-- *** STRUCTURE: `tbl_fields_taglist` ***
DROP TABLE IF EXISTS `tbl_fields_taglist`;
CREATE TABLE `tbl_fields_taglist` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `field_id` int(11) unsigned NOT NULL,
  `validator` varchar(100) collate utf8_unicode_ci default NULL,
  `pre_populate_source` varchar(15) collate utf8_unicode_ci default NULL,
  PRIMARY KEY  (`id`),
  KEY `field_id` (`field_id`),
  KEY `pre_populate_source` (`pre_populate_source`)
) ENGINE=MyISAM AUTO_INCREMENT=10 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_fields_taglist` ***
INSERT INTO `tbl_fields_taglist` (`id`, `field_id`, `validator`, `pre_populate_source`) VALUES (9, 31, NULL, 'existing');
INSERT INTO `tbl_fields_taglist` (`id`, `field_id`, `validator`, `pre_populate_source`) VALUES (5, 38, NULL, 'existing');

-- *** STRUCTURE: `tbl_fields_textarea` ***
DROP TABLE IF EXISTS `tbl_fields_textarea`;
CREATE TABLE `tbl_fields_textarea` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `field_id` int(11) unsigned NOT NULL,
  `formatter` varchar(100) collate utf8_unicode_ci default NULL,
  `size` int(3) unsigned NOT NULL,
  PRIMARY KEY  (`id`),
  KEY `field_id` (`field_id`)
) ENGINE=MyISAM AUTO_INCREMENT=62 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_fields_textarea` ***
INSERT INTO `tbl_fields_textarea` (`id`, `field_id`, `formatter`, `size`) VALUES (19, 8, 'pb_markdownextrasmartypants', 15);
INSERT INTO `tbl_fields_textarea` (`id`, `field_id`, `formatter`, `size`) VALUES (56, 10, 'pb_markdownextrasmartypants', 6);
INSERT INTO `tbl_fields_textarea` (`id`, `field_id`, `formatter`, `size`) VALUES (57, 11, 'pb_markdownextrasmartypants', 15);
INSERT INTO `tbl_fields_textarea` (`id`, `field_id`, `formatter`, `size`) VALUES (44, 16, 'pb_markdownextrasmartypants', 6);
INSERT INTO `tbl_fields_textarea` (`id`, `field_id`, `formatter`, `size`) VALUES (45, 17, 'pb_markdownextrasmartypants', 15);
INSERT INTO `tbl_fields_textarea` (`id`, `field_id`, `formatter`, `size`) VALUES (50, 20, 'pb_markdownextrasmartypants', 6);
INSERT INTO `tbl_fields_textarea` (`id`, `field_id`, `formatter`, `size`) VALUES (51, 21, 'pb_markdownextrasmartypants', 15);
INSERT INTO `tbl_fields_textarea` (`id`, `field_id`, `formatter`, `size`) VALUES (60, 29, 'pb_markdownextrasmartypants', 6);
INSERT INTO `tbl_fields_textarea` (`id`, `field_id`, `formatter`, `size`) VALUES (61, 30, 'pb_markdownextrasmartypants', 15);

-- *** STRUCTURE: `tbl_fields_upload` ***
DROP TABLE IF EXISTS `tbl_fields_upload`;
CREATE TABLE `tbl_fields_upload` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `field_id` int(11) unsigned NOT NULL,
  `destination` varchar(255) collate utf8_unicode_ci NOT NULL,
  `validator` varchar(50) collate utf8_unicode_ci default NULL,
  PRIMARY KEY  (`id`),
  KEY `field_id` (`field_id`)
) ENGINE=MyISAM AUTO_INCREMENT=13 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_fields_upload` ***
INSERT INTO `tbl_fields_upload` (`id`, `field_id`, `destination`, `validator`) VALUES (11, 35, '/workspace/images', NULL);
INSERT INTO `tbl_fields_upload` (`id`, `field_id`, `destination`, `validator`) VALUES (12, 36, '/workspace', NULL);

-- *** STRUCTURE: `tbl_entries_data_10` ***
DROP TABLE IF EXISTS `tbl_entries_data_10`;
CREATE TABLE `tbl_entries_data_10` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `entry_id` int(11) unsigned NOT NULL,
  `value` text collate utf8_unicode_ci,
  `value_formatted` text collate utf8_unicode_ci,
  PRIMARY KEY  (`id`),
  KEY `entry_id` (`entry_id`),
  FULLTEXT KEY `value` (`value`)
) ENGINE=MyISAM AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_entries_data_10` ***
INSERT INTO `tbl_entries_data_10` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (1, 4, 'Why did we ever start calling this home?', '<p>Why did we ever start calling this home?</p>\n');
INSERT INTO `tbl_entries_data_10` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (2, 16, NULL, NULL);
INSERT INTO `tbl_entries_data_10` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (3, 17, NULL, NULL);
INSERT INTO `tbl_entries_data_10` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (4, 18, NULL, NULL);
INSERT INTO `tbl_entries_data_10` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (5, 37, 'This section will contain pages that show examples of the tutorials created in my Journal.', '<p>This section will contain pages that show examples of the tutorials created in my Journal.</p>\n');

-- *** STRUCTURE: `tbl_entries_data_11` ***
DROP TABLE IF EXISTS `tbl_entries_data_11`;
CREATE TABLE `tbl_entries_data_11` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `entry_id` int(11) unsigned NOT NULL,
  `value` text collate utf8_unicode_ci,
  `value_formatted` text collate utf8_unicode_ci,
  PRIMARY KEY  (`id`),
  KEY `entry_id` (`entry_id`),
  FULLTEXT KEY `value` (`value`)
) ENGINE=MyISAM AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_entries_data_11` ***
INSERT INTO `tbl_entries_data_11` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (1, 4, 'Do I actually live here?', '<p>Do I actually live here?</p>\n');
INSERT INTO `tbl_entries_data_11` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (2, 16, NULL, NULL);
INSERT INTO `tbl_entries_data_11` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (3, 17, NULL, NULL);
INSERT INTO `tbl_entries_data_11` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (4, 18, NULL, NULL);
INSERT INTO `tbl_entries_data_11` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (5, 37, 'I just needed some way of displaying pages that did not contain the additional elements used in the fully-developed templates for the main pages.', '<p>I just needed some way of displaying pages that did not contain the additional elements used in the fully-developed templates for the main pages.</p>\n');

-- *** STRUCTURE: `tbl_entries_data_12` ***
DROP TABLE IF EXISTS `tbl_entries_data_12`;
CREATE TABLE `tbl_entries_data_12` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `entry_id` int(11) unsigned NOT NULL,
  `relation_id` int(11) unsigned NOT NULL,
  PRIMARY KEY  (`id`),
  KEY `entry_id` (`entry_id`),
  KEY `relation_id` (`relation_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_entries_data_12` ***

-- *** STRUCTURE: `tbl_entries_data_13` ***
DROP TABLE IF EXISTS `tbl_entries_data_13`;
CREATE TABLE `tbl_entries_data_13` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `entry_id` int(11) unsigned NOT NULL,
  `handle` varchar(255) collate utf8_unicode_ci default NULL,
  `value` varchar(255) collate utf8_unicode_ci default NULL,
  PRIMARY KEY  (`id`),
  KEY `entry_id` (`entry_id`),
  KEY `handle` (`handle`),
  KEY `value` (`value`)
) ENGINE=MyISAM AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_entries_data_13` ***
INSERT INTO `tbl_entries_data_13` (`id`, `entry_id`, `handle`, `value`) VALUES (1, 4, 'content', 'Content');
INSERT INTO `tbl_entries_data_13` (`id`, `entry_id`, `handle`, `value`) VALUES (2, 16, 'content', 'Content');
INSERT INTO `tbl_entries_data_13` (`id`, `entry_id`, `handle`, `value`) VALUES (3, 17, 'content', 'Content');
INSERT INTO `tbl_entries_data_13` (`id`, `entry_id`, `handle`, `value`) VALUES (4, 18, 'content', 'Content');
INSERT INTO `tbl_entries_data_13` (`id`, `entry_id`, `handle`, `value`) VALUES (5, 37, 'content', 'Content');

-- *** STRUCTURE: `tbl_entries_data_14` ***
DROP TABLE IF EXISTS `tbl_entries_data_14`;
CREATE TABLE `tbl_entries_data_14` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `entry_id` int(11) unsigned NOT NULL,
  `value` double default NULL,
  PRIMARY KEY  (`id`),
  KEY `entry_id` (`entry_id`),
  KEY `value` (`value`)
) ENGINE=MyISAM AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_entries_data_14` ***
INSERT INTO `tbl_entries_data_14` (`id`, `entry_id`, `value`) VALUES (1, 4, 1);
INSERT INTO `tbl_entries_data_14` (`id`, `entry_id`, `value`) VALUES (2, 16, 2);
INSERT INTO `tbl_entries_data_14` (`id`, `entry_id`, `value`) VALUES (3, 17, 3);
INSERT INTO `tbl_entries_data_14` (`id`, `entry_id`, `value`) VALUES (4, 18, 4);
INSERT INTO `tbl_entries_data_14` (`id`, `entry_id`, `value`) VALUES (5, 37, 5);

-- *** STRUCTURE: `tbl_entries_data_15` ***
DROP TABLE IF EXISTS `tbl_entries_data_15`;
CREATE TABLE `tbl_entries_data_15` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `entry_id` int(11) unsigned NOT NULL,
  `handle` varchar(255) collate utf8_unicode_ci default NULL,
  `value` varchar(255) collate utf8_unicode_ci default NULL,
  PRIMARY KEY  (`id`),
  KEY `entry_id` (`entry_id`),
  KEY `handle` (`handle`),
  KEY `value` (`value`)
) ENGINE=MyISAM AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_entries_data_15` ***
INSERT INTO `tbl_entries_data_15` (`id`, `entry_id`, `handle`, `value`) VALUES (1, 11, 'applications', 'Applications');
INSERT INTO `tbl_entries_data_15` (`id`, `entry_id`, `handle`, `value`) VALUES (2, 12, 'design', 'Design');
INSERT INTO `tbl_entries_data_15` (`id`, `entry_id`, `handle`, `value`) VALUES (3, 13, 'history', 'History');
INSERT INTO `tbl_entries_data_15` (`id`, `entry_id`, `handle`, `value`) VALUES (4, 14, 'ideas', 'Ideas');
INSERT INTO `tbl_entries_data_15` (`id`, `entry_id`, `handle`, `value`) VALUES (5, 15, 'technology', 'Technology');

-- *** STRUCTURE: `tbl_entries_data_16` ***
DROP TABLE IF EXISTS `tbl_entries_data_16`;
CREATE TABLE `tbl_entries_data_16` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `entry_id` int(11) unsigned NOT NULL,
  `value` text collate utf8_unicode_ci,
  `value_formatted` text collate utf8_unicode_ci,
  PRIMARY KEY  (`id`),
  KEY `entry_id` (`entry_id`),
  FULLTEXT KEY `value` (`value`)
) ENGINE=MyISAM AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_entries_data_16` ***
INSERT INTO `tbl_entries_data_16` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (1, 11, NULL, NULL);
INSERT INTO `tbl_entries_data_16` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (2, 12, NULL, NULL);
INSERT INTO `tbl_entries_data_16` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (3, 13, NULL, NULL);
INSERT INTO `tbl_entries_data_16` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (4, 14, NULL, NULL);
INSERT INTO `tbl_entries_data_16` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (5, 15, NULL, NULL);

-- *** STRUCTURE: `tbl_entries_data_17` ***
DROP TABLE IF EXISTS `tbl_entries_data_17`;
CREATE TABLE `tbl_entries_data_17` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `entry_id` int(11) unsigned NOT NULL,
  `value` text collate utf8_unicode_ci,
  `value_formatted` text collate utf8_unicode_ci,
  PRIMARY KEY  (`id`),
  KEY `entry_id` (`entry_id`),
  FULLTEXT KEY `value` (`value`)
) ENGINE=MyISAM AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_entries_data_17` ***
INSERT INTO `tbl_entries_data_17` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (1, 11, NULL, NULL);
INSERT INTO `tbl_entries_data_17` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (2, 12, NULL, NULL);
INSERT INTO `tbl_entries_data_17` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (3, 13, NULL, NULL);
INSERT INTO `tbl_entries_data_17` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (4, 14, NULL, NULL);
INSERT INTO `tbl_entries_data_17` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (5, 15, NULL, NULL);

-- *** STRUCTURE: `tbl_entries_data_18` ***
DROP TABLE IF EXISTS `tbl_entries_data_18`;
CREATE TABLE `tbl_entries_data_18` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `entry_id` int(11) unsigned NOT NULL,
  `relation_id` int(11) unsigned NOT NULL,
  PRIMARY KEY  (`id`),
  KEY `entry_id` (`entry_id`),
  KEY `relation_id` (`relation_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_entries_data_18` ***

-- *** STRUCTURE: `tbl_entries_data_19` ***
DROP TABLE IF EXISTS `tbl_entries_data_19`;
CREATE TABLE `tbl_entries_data_19` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `entry_id` int(11) unsigned NOT NULL,
  `handle` varchar(255) collate utf8_unicode_ci default NULL,
  `value` varchar(255) collate utf8_unicode_ci default NULL,
  PRIMARY KEY  (`id`),
  KEY `entry_id` (`entry_id`),
  KEY `handle` (`handle`),
  KEY `value` (`value`)
) ENGINE=MyISAM AUTO_INCREMENT=329 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_entries_data_19` ***
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (42, 5, 'building-a-blog-with-symphony', 'Building a Blog with Symphony');
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (61, 19, 'rapid-interactive-prototyping', 'Rapid Interactive Prototyping');
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (44, 20, 'under-construction', 'Under Construction');
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (45, 21, 'spreading-myself-too-thin', 'Spreading Myself Too Thin');
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (100, 22, 'creating-a-data-structure-in-symphony', 'Creating a Data Structure in Symphony');
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (273, 23, 'symphony-extensions', 'Symphony Extensions');
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (98, 24, 'what-is-this', 'What is this?');
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (99, 25, 'this-looks-broken', 'This Looks Broken');
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (115, 26, 'design-project-x', 'Design Project X');
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (104, 27, 'maintaining-a-simple-backup-system-in-symphony', 'Maintaining a Simple Backup System in Symphony');
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (112, 28, 'the-title-of-my-entry', 'The Title of My Entry');
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (159, 29, 'hello-world-a-basic-xsl-stylesheet', 'Hello World: A Basic XSL Stylesheet');
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (78, 30, 'symphony-cms-site-and-documentation', 'Symphony CMS Site and Documentation');
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (101, 31, 'fluid-960-grid-system', 'Fluid 960 Grid System');
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (91, 32, 'lets-get-started-again', 'Let\'s Get Started ... Again');
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (218, 33, 'symphony-utilities', 'Symphony Utilities');
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (113, 34, 'viewing-entries-as-xml', 'Viewing Entries as XML');
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (117, 35, 'xslt-glossary', 'XSLT Glossary');
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (194, 36, 'beyond-hello-an-xslt-page-template', 'Beyond Hello: An XSLT Page Template');
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (156, 38, 'symphony-sections', 'Symphony Sections');
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (155, 39, 'symphony-data-sources', 'Symphony Data Sources');
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (164, 40, 'xml-output-and-the-debug-page', 'XML Output and the Debug Page');
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (207, 41, 'nested-conditionals-in-xslt', 'Nested Conditionals in XSLT');
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (209, 42, 'symphony-url-parameters-managing-page-views', 'Symphony URL Parameters: Managing Page Views');
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (216, 43, 'entries-navigation-menu', 'Entries Navigation Menu');
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (213, 44, 'a-master-xslt-template', 'A Master XSLT Template');
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (265, 45, 'xml-syntax-highlighting', 'XML Syntax Highlighting');
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (257, 46, 'importing-xml-in-symphony', 'Importing XML in Symphony');
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (266, 47, 'symphony-events', 'Symphony Events');
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (301, 48, 'essential-actionscript-30', 'Essential ActionScript 3.0');
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (269, 49, 'importing-entries-from-wordpress', 'Importing Entries from WordPress');
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (276, 50, 'ninja-domains-a-multi-domain-setup-using-the-symp', 'Ninja Domains: A Multi-Domain Setup using the Symphony XSLT Content Management System');
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (278, 51, 'previous-and-next-links-in-symphony', 'Previous and Next Links in Symphony');
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (300, 52, 'master-detail-views-in-symphony', 'Master/Detail Views in Symphony');
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (314, 53, 'using-github-to-build-a-symphony-ensemble', 'Using GitHub to Build a Symphony Ensemble');
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (313, 54, 'symphony-maintenance-mode', 'Symphony Maintenance Mode');
INSERT INTO `tbl_entries_data_19` (`id`, `entry_id`, `handle`, `value`) VALUES (328, 55, 'symphony-extensions-and-git-submodules', 'Symphony Extensions and Git Submodules');

-- *** STRUCTURE: `tbl_entries_data_20` ***
DROP TABLE IF EXISTS `tbl_entries_data_20`;
CREATE TABLE `tbl_entries_data_20` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `entry_id` int(11) unsigned NOT NULL,
  `value` text collate utf8_unicode_ci,
  `value_formatted` text collate utf8_unicode_ci,
  PRIMARY KEY  (`id`),
  KEY `entry_id` (`entry_id`),
  FULLTEXT KEY `value` (`value`)
) ENGINE=MyISAM AUTO_INCREMENT=329 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_entries_data_20` ***
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (42, 5, 'A step-by-step tutorial to build a blog with XML and XSLT, using Symphony CMS', '<p>A step-by-step tutorial to build a blog with XML and XSLT, using Symphony CMS</p>\n');
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (61, 19, 'I credit Andy Clarke with the idea of improving the approach of working with wireframes by using the Grey Box Method. I highly recommend his book, Trancending CSS, for both the fantastic content and beautiful design.', '<p>I credit Andy Clarke with the idea of improving the approach of working with wireframes by using the Grey Box Method. I highly recommend his book, Trancending CSS, for both the fantastic content and beautiful design.</p>\n');
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (44, 20, 'Continuing with my live build of a Symphony site', '<p>Continuing with my live build of a Symphony site</p>\n');
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (45, 21, 'So, I\'ve got failed, half-finished, barely started web development / social media experiments scattered all over the web. Let\'s see if I can remember:\r\n', '<p>So, I&#8217;ve got failed, half-finished, barely started web development / social media experiments scattered all over the web. Let&#8217;s see if I can remember:</p>\n');
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (100, 22, 'Symphony CMS allows the developer the freedom to create a data structure that suits the content of the site. I won\'t be straying far from the usual, to demonstrate the basics. We can always extend these data structures at any time, although, it\'s better to have a clear idea in mind at the outset.\r\n', '<p>Symphony CMS allows the developer the freedom to create a data structure that suits the content of the site. I won&#8217;t be straying far from the usual, to demonstrate the basics. We can always extend these data structures at any time, although, it&#8217;s better to have a clear idea in mind at the outset.</p>\n');
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (273, 23, 'To get the most out of Symphony, we\'re going to need to extend the core system using extensions. Out of the box, Symphony provides some very powerful features. But it assumes nothing about the type of site that we create. To extend the system, let\'s explore the available extensions.', '<p>To get the most out of Symphony, we&#8217;re going to need to extend the core system using extensions. Out of the box, Symphony provides some very powerful features. But it assumes nothing about the type of site that we create. To extend the system, let&#8217;s explore the available extensions.</p>\n');
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (98, 24, '#### It is a live build of Symphony\r\n\r\nIt started out as a [live build of a Symphony site](http://designprojectx.com/about/) during [An Event Apart](http://aneventapart.com/2009/seattle/), while listening to Jeffrey Zeldman and Eric Meyer, and many other fascinating people.\r\n', '<h4>It is a live build of Symphony</h4>\n\n<p>It started out as a <a href=\"http://designprojectx.com/about/\">live build of a Symphony site</a> during <a href=\"http://aneventapart.com/2009/seattle/\">An Event Apart</a>, while listening to Jeffrey Zeldman and Eric Meyer, and many other fascinating people.</p>\n');
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (99, 25, '#### Expect things to be broken here.\r\n\r\nI would be surprised if they are not. ', '<h4>Expect things to be broken here.</h4>\n\n<p>I would be surprised if they are not.</p>\n');
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (104, 27, 'I want to be able to have easy access to all my site content. I also want to be able to write the content in a text editor so that I can use the features that help the writing process go a lot smoother, such as multiple undos.', '<p>I want to be able to have easy access to all my site content. I also want to be able to write the content in a text editor so that I can use the features that help the writing process go a lot smoother, such as multiple undos.</p>\n');
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (112, 28, 'A brief description of my entry.', '<p>A brief description of my entry.</p>\n');
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (159, 29, 'Developing a site with Symphony CMS starts with a basic XSL stylesheet. This is the traditional \"Hello, world\" example.\r\n', '<p>Developing a site with Symphony CMS starts with a basic XSL stylesheet. This is the traditional &#8220;Hello, world&#8221; example.</p>\n');
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (78, 30, 'Thanks primarily to the work of Mark Lewis, the Symphony CMS finally has some documentation. And thanks to the Symphony Development Team, Symphony has a shiny new home to show off the ability of the application to manage content, member registration and profiles, forum discussions, download files and a gallery showcase.', '<p>Thanks primarily to the work of Mark Lewis, the Symphony CMS finally has some documentation. And thanks to the Symphony Development Team, Symphony has a shiny new home to show off the ability of the application to manage content, member registration and profiles, forum discussions, download files and a gallery showcase.</p>\n');
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (101, 31, 'Nathan Smith created the [960 Grid System](http://960.gs/) as a CSS framework that provides classes to easily create web pages that can be designed with a 12-column or 16-column grid. I decided to extend his grids as the [Fluid 960 Grid System](http://www.designinfluences.com/fluid960gs/) for fluid layouts.', '<p>Nathan Smith created the <a href=\"http://960.gs/\">960 Grid System</a> as a CSS framework that provides classes to easily create web pages that can be designed with a 12-column or 16-column grid. I decided to extend his grids as the <a href=\"http://www.designinfluences.com/fluid960gs/\">Fluid 960 Grid System</a> for fluid layouts.</p>\n');
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (91, 32, '#### Then, let\'s see if I can finish\r\n\r\nThe thing is, when is something really finished on the web? The web is fluid. It is constantly evolving. There\'s always more to learn. So, I think \"finished\" will always be an elusive goal.\r\n', '<h4>Then, let&#8217;s see if I can finish</h4>\n\n<p>The thing is, when is something really finished on the web? The web is fluid. It is constantly evolving. There&#8217;s always more to learn. So, I think &#8220;finished&#8221; will always be an elusive goal.</p>\n');
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (115, 26, '#### A site about learning by doing\r\n\r\nThis is my playground, my sandbox for projects that I am toying with. I learn by doing. So this is where I do some of my stuff. ', '<h4>A site about learning by doing</h4>\n\n<p>This is my playground, my sandbox for projects that I am toying with. I learn by doing. So this is where I do some of my stuff.</p>\n');
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (113, 34, 'To make the process of saving XML files of each entry a little easier, I thought I could create an XSL stylesheet that would output the XML of a single entry. I ended up using Marc Liyanage\'s XML Pretty Printer template to create nicely indented XML files.', '<p>To make the process of saving XML files of each entry a little easier, I thought I could create an XSL stylesheet that would output the XML of a single entry. I ended up using Marc Liyanage&#8217;s XML Pretty Printer template to create nicely indented XML files.</p>\n');
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (117, 35, '[Jesse Sutherland](http://symphony-cms.com/members/TheJester12/) raised some questions about [learning symphony](http://symphony-cms.com/forum/discussions/21437/) on the Symphony forum. It seems to be a good time to further develop the documentation and add some tutorials to help beginners get acquainted with the system. A glossary of terms might be a good place to start.', '<p><a href=\"http://symphony-cms.com/members/TheJester12/\">Jesse Sutherland</a> raised some questions about <a href=\"http://symphony-cms.com/forum/discussions/21437/\">learning symphony</a> on the Symphony forum. It seems to be a good time to further develop the documentation and add some tutorials to help beginners get acquainted with the system. A glossary of terms might be a good place to start.</p>\n');
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (156, 38, 'In Symphony, creating Sections is a way of dynamically creating the database structure for your site and the navigation system of the Symphony admin area. This tutorial assumes that you have installed the integration branch of Symphony 2.0.2 from Github (although, this is not essential).', '<p>In Symphony, creating Sections is a way of dynamically creating the database structure for your site and the navigation system of the Symphony admin area. This tutorial assumes that you have installed the integration branch of Symphony 2.0.2 from Github (although, this is not essential).</p>\n');
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (155, 39, 'Once the sections have been set up in Symphony, data sources can be configured to output XML that can be used by the XSLT page templates to output HTML pages. These are the data sources that have been used to create this site.', '<p>Once the sections have been set up in Symphony, data sources can be configured to output XML that can be used by the XSLT page templates to output HTML pages. These are the data sources that have been used to create this site.</p>\n');
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (194, 36, 'I started with the basic [Hello World](http://www.designprojectx.com/tutorials/hello-world-a-basic-xsl-stylesheet/) example. This tutorial assumes that [sections](http://www.designprojectx.com/tutorials/symphony-sections/) have been created in Symphony and [data sources](http://www.designprojectx.com/tutorials/symphony-data-sources/) attached to a page. This example shows how I developed the page template that displays the entries that you are currently reading.\r\n', '<p>I started with the basic <a href=\"http://www.designprojectx.com/tutorials/hello-world-a-basic-xsl-stylesheet/\">Hello World</a> example. This tutorial assumes that <a href=\"http://www.designprojectx.com/tutorials/symphony-sections/\">sections</a> have been created in Symphony and <a href=\"http://www.designprojectx.com/tutorials/symphony-data-sources/\">data sources</a> attached to a page. This example shows how I developed the page template that displays the entries that you are currently reading.</p>\n');
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (164, 40, 'Once the sections have been set up and the data sources have been configured in Symphony, XML output can be attached to a page to be processed using the XSLT page template specified in the Body field of the page configuration. The result document can be XML, HTML or text.', '<p>Once the sections have been set up and the data sources have been configured in Symphony, XML output can be attached to a page to be processed using the XSLT page template specified in the Body field of the page configuration. The result document can be XML, HTML or text.</p>\n');
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (207, 41, 'Symphony URLs are actually URL parameters that can be used to manage page views by configuring data sources to limit entries displayed on a page and by using XSLT conditionals to output different results based on the value of each URL parameter. This tutorial is in answer to a [question](http://symphony-cms.com/forum/discussions/21702/#position-4) posted on the Symphony forum.', '<p>Symphony URLs are actually URL parameters that can be used to manage page views by configuring data sources to limit entries displayed on a page and by using XSLT conditionals to output different results based on the value of each URL parameter. This tutorial is in answer to a <a href=\"http://symphony-cms.com/forum/discussions/21702/#position-4\">question</a> posted on the Symphony forum.</p>\n');
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (218, 33, 'The term \"utilities\" is a Symphony-specific term that refers to XSLT templates that are imported by a page template using an `xsl:import` instruction. Utilities are often used as master templates that can be used to manage common elements of a page template, such as the html, head and body elements, and for site-wide control of common layout elements, such as the header and footer of the page. They can also be used to build navigation and pagination elements, or to format dates, layout calendars, or perform math or string functions.', '<p>The term &#8220;utilities&#8221; is a Symphony-specific term that refers to XSLT templates that are imported by a page template using an <code>xsl:import</code> instruction. Utilities are often used as master templates that can be used to manage common elements of a page template, such as the html, head and body elements, and for site-wide control of common layout elements, such as the header and footer of the page. They can also be used to build navigation and pagination elements, or to format dates, layout calendars, or perform math or string functions.</p>\n');
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (209, 42, 'Symphony URL Parameters allow a single page template to manage several different views of the XML data. Using XSLT and some flexible URL parameters, it is possible to filter entries by different sets of categories or other forms of metadata to create nested lists. This tutorial is in answer to a question about [filtering content](http://symphony-cms.com/forum/discussions/21790/) on the Symphony forum.\r\n', '<p>Symphony URL Parameters allow a single page template to manage several different views of the XML data. Using XSLT and some flexible URL parameters, it is possible to filter entries by different sets of categories or other forms of metadata to create nested lists. This tutorial is in answer to a question about <a href=\"http://symphony-cms.com/forum/discussions/21790/\">filtering content</a> on the Symphony forum.</p>\n');
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (216, 43, 'Using XSLT and Symphony, it is a fairly simple matter to develop a list of entries that can indicate the currently selected entry using a URL parameter and an `xsl:if` conditional instruction. We will be relying heavily on attribute value templates to build the links for the pages.', '<p>Using XSLT and Symphony, it is a fairly simple matter to develop a list of entries that can indicate the currently selected entry using a URL parameter and an <code>xsl:if</code> conditional instruction. We will be relying heavily on attribute value templates to build the links for the pages.</p>\n');
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (213, 44, 'A master template helps to simplify the management of common elements of the HTML and layout structure. This tutorial outlines how the master XSLT template has been built for this site.', '<p>A master template helps to simplify the management of common elements of the HTML and layout structure. This tutorial outlines how the master XSLT template has been built for this site.</p>\n');
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (265, 45, 'I noticed that both the new [Symphony CMS site]() and [Nick Dunn’s personal site](http://nick-dunn.co.uk/) both use similar syntax highlighting for XML code examples and snippets and I wanted to see what it might take to implement the same thing on this site. As it turns out, it wasn’t very difficult at all.\r\n', '<p>I noticed that both the new <a href=\"\">Symphony CMS site</a> and <a href=\"http://nick-dunn.co.uk/\">Nick Dunn’s personal site</a> both use similar syntax highlighting for XML code examples and snippets and I wanted to see what it might take to implement the same thing on this site. As it turns out, it wasn’t very difficult at all.</p>\n');
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (257, 46, 'Probably the major impediment for the widespread adoption of Symphony as a content management system, besides the fear factor of XSLT, is probably the changes to the core database management code and structure. This has prevented a smooth transition from version 1.6 to 1.7 and from 1.7 to 2.0. However, Symphony 2.0 can import XML, it just takes a little bit of set up.', '<p>Probably the major impediment for the widespread adoption of Symphony as a content management system, besides the fear factor of XSLT, is probably the changes to the core database management code and structure. This has prevented a smooth transition from version 1.6 to 1.7 and from 1.7 to 2.0. However, Symphony 2.0 can import XML, it just takes a little bit of set up.</p>\n');
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (266, 47, 'Events are PHP classes or functions that can be attached to a page template to perform specific functions that are out of the realm of what XSLT alone can accomplish. Extensions can sometimes include events that can be attached to a page. Built into Symphony is a way of creating events that can be used to save data to the database from front-end forms as a single entry or even multiple entries at one time, with the option of sending an email message on successfully saving an entry or entries.\r\n', '<p>Events are PHP classes or functions that can be attached to a page template to perform specific functions that are out of the realm of what XSLT alone can accomplish. Extensions can sometimes include events that can be attached to a page. Built into Symphony is a way of creating events that can be used to save data to the database from front-end forms as a single entry or even multiple entries at one time, with the option of sending an email message on successfully saving an entry or entries.</p>\n');
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (301, 48, '[Colin Moock](http://moock.org/ \"Colin Moock\'s website\") has written a book called _[Essential ActionScript 3.0](http://moock.org/eas3/examples/ \"ActionScript 3.0 Code Examples\")_ and I am making it one of my goals to learn how to use as many open source languages as possible to expand on the knowledge I have gained building applications in Symphony, using XML, XSLT and CSS. I’m keenly interested in knowing how the open source [Flex SDK 3](http://www.adobe.com/support/documentation/en/flex/3/releasenotes_flex3_sdk.html \"Flex 3 SDK Release Notes\") can be used to create Rich Internet Applications that integrate with applications like Symphony, built on open source standards such as XML and XSLT.\r\n', '<p><a href=\"http://moock.org/\" title=\"Colin Moock\'s website\">Colin Moock</a> has written a book called <em><a href=\"http://moock.org/eas3/examples/\" title=\"ActionScript 3.0 Code Examples\">Essential ActionScript 3.0</a></em> and I am making it one of my goals to learn how to use as many open source languages as possible to expand on the knowledge I have gained building applications in Symphony, using XML, XSLT and CSS. I’m keenly interested in knowing how the open source <a href=\"http://www.adobe.com/support/documentation/en/flex/3/releasenotes_flex3_sdk.html\" title=\"Flex 3 SDK Release Notes\">Flex SDK 3</a> can be used to create Rich Internet Applications that integrate with applications like Symphony, built on open source standards such as XML and XSLT.</p>\n');
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (269, 49, 'This is a proof of concept for importing XML into Symphony using an event and a front-end form that is populated with data from a WordPress Export File. It is a continuation of the tutorials on [Importing XML in Symphony](http://designprojectx.com/tutorials/importing-xml-in-symphony/) and [Symphony Events](http://designprojectx.com/tutorials/symphony-events/).', '<p>This is a proof of concept for importing XML into Symphony using an event and a front-end form that is populated with data from a WordPress Export File. It is a continuation of the tutorials on <a href=\"http://designprojectx.com/tutorials/importing-xml-in-symphony/\">Importing XML in Symphony</a> and <a href=\"http://designprojectx.com/tutorials/symphony-events/\">Symphony Events</a>.</p>\n');
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (276, 50, 'My first contributing author, [Michael Eichelsdörfer](http://www.michael-eichelsdoerfer.de/), has been using Symphony CMS in some very interesting ways. This particular technique, using a single Symphony install to run multiple domains, intrigued me. Michael has been kind enough to satisfy my curiosity by putting together a tutorial. \r\n\r\nThis tutorial covers an advanced multi-domain setup. Several websites may be powered by a single Symphony installation, using a single backend. This may be useful in case of websites having the same owner, intended to share content and/or technical solutions.', '<p>My first contributing author, <a href=\"http://www.michael-eichelsdoerfer.de/\">Michael Eichelsdörfer</a>, has been using Symphony CMS in some very interesting ways. This particular technique, using a single Symphony install to run multiple domains, intrigued me. Michael has been kind enough to satisfy my curiosity by putting together a tutorial.</p>\n\n<p>This tutorial covers an advanced multi-domain setup. Several websites may be powered by a single Symphony installation, using a single backend. This may be useful in case of websites having the same owner, intended to share content and/or technical solutions.</p>\n');
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (278, 51, 'A question was posed on the Symphony CMS forum about [how to create Previous/Next buttons](http://symphony-cms.com/forum/discussions/21702/#position-14) when displaying a detail view of an entry. Since we have already produced a [list of entries as a navigation menu](http://designprojectx.com/journal/entries-navigation-menu/), we can now supplement this list with links to easily navigate from one entry to another in the same order as listed with previous and next links.', '<p>A question was posed on the Symphony CMS forum about <a href=\"http://symphony-cms.com/forum/discussions/21702/#position-14\">how to create Previous/Next buttons</a> when displaying a detail view of an entry. Since we have already produced a <a href=\"http://designprojectx.com/journal/entries-navigation-menu/\">list of entries as a navigation menu</a>, we can now supplement this list with links to easily navigate from one entry to another in the same order as listed with previous and next links.</p>\n');
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (300, 52, 'A common question on the Symphony CMS forum is about [how to display a single entry](http://symphony-cms.com/forum/discussions/22439/) in Symphony. The answer to this question involves Symphony data sources and URL parameters, and XSL conditional statements. This tutorial will go through the process of using Symphony to create a section, two data sources, a utility and a couple pages to describe step-by-step the process of building a page template that will output a list view or detail view of a page depending on the currently selected URL.\r\n', '<p>A common question on the Symphony CMS forum is about <a href=\"http://symphony-cms.com/forum/discussions/22439/\">how to display a single entry</a> in Symphony. The answer to this question involves Symphony data sources and URL parameters, and XSL conditional statements. This tutorial will go through the process of using Symphony to create a section, two data sources, a utility and a couple pages to describe step-by-step the process of building a page template that will output a list view or detail view of a page depending on the currently selected URL.</p>\n');
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (314, 53, 'This may be less a tutorial than a record of the steps I took to build a Symphony ensemble while using GitHub as a version control system. One challenge I have yet to come to terms with is how to deal with changes to the database as I make changes to the application.', '<p>This may be less a tutorial than a record of the steps I took to build a Symphony ensemble while using GitHub as a version control system. One challenge I have yet to come to terms with is how to deal with changes to the database as I make changes to the application.</p>\n');
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (313, 54, 'With the Symphony CMS Maintenance Mode extension, the application can be set to redirect all pages to a page that has been given a type of \"maintenance\". If all you need is to replace the home page with a temporary page, just change the .htaccess file.', '<p>With the Symphony CMS Maintenance Mode extension, the application can be set to redirect all pages to a page that has been given a type of &#8220;maintenance&#8221;. If all you need is to replace the home page with a temporary page, just change the .htaccess file.</p>\n');
INSERT INTO `tbl_entries_data_20` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (328, 55, 'I am in the process of evaluating some of the available Symphony CMS extensions and have been experimenting with including extensions as submodules in Symphony ensemble repositories. This is a list of the commands used to set up additional submodules for a clean Symphony install.', '<p>I am in the process of evaluating some of the available Symphony CMS extensions and have been experimenting with including extensions as submodules in Symphony ensemble repositories. This is a list of the commands used to set up additional submodules for a clean Symphony install.</p>\n');

-- *** STRUCTURE: `tbl_entries_data_21` ***
DROP TABLE IF EXISTS `tbl_entries_data_21`;
CREATE TABLE `tbl_entries_data_21` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `entry_id` int(11) unsigned NOT NULL,
  `value` text collate utf8_unicode_ci,
  `value_formatted` text collate utf8_unicode_ci,
  PRIMARY KEY  (`id`),
  KEY `entry_id` (`entry_id`),
  FULLTEXT KEY `value` (`value`)
) ENGINE=MyISAM AUTO_INCREMENT=329 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_entries_data_21` ***
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (42, 5, '#### Sections and Custom Fields\r\n\r\nThe core of Symphony has been built around the concept of developing data structures that fit the type of content that you want to publish, without limitations or preconceptions. This is what makes Symphony extremely flexible, but in some ways a little more complex. Creating relationships between data is what Symphony does very well. The system is built around the ability to create Sections of entries that are made up of similar types of information. Using XSLT, this information can be displayed on Pages in different ways, depending on the parameters that are used to filter the views. The core is intentionally kept very lean to avoid forcing developers and authors to use features that they don\'t need.  \r\n\r\n#### Extensions\r\n\r\nExtensions enable features beyond those available in the Symphony core. Out of the box, Symphony requires content in textarea fields to be valid XHTML. To simplify the entry of information, text formatters such as Markdown or Textile can be added to Symphony as Extensions. For each textarea field added to a Section, a different text formatter can be enabled. I generally prefer Markdown. \r\n\r\nOther extensions add interface enhancements. For example, another Extension uses a script called Markitup that adds a row of formatting buttons that will help users format text with Markdown.\r\n\r\nIt makes sense to add the extensions necessary to make possible the sorts of data structures and functionality that you will need to develop your site.', '<h4>Sections and Custom Fields</h4>\n\n<p>The core of Symphony has been built around the concept of developing data structures that fit the type of content that you want to publish, without limitations or preconceptions. This is what makes Symphony extremely flexible, but in some ways a little more complex. Creating relationships between data is what Symphony does very well. The system is built around the ability to create Sections of entries that are made up of similar types of information. Using XSLT, this information can be displayed on Pages in different ways, depending on the parameters that are used to filter the views. The core is intentionally kept very lean to avoid forcing developers and authors to use features that they don&#8217;t need.</p>\n\n<h4>Extensions</h4>\n\n<p>Extensions enable features beyond those available in the Symphony core. Out of the box, Symphony requires content in textarea fields to be valid XHTML. To simplify the entry of information, text formatters such as Markdown or Textile can be added to Symphony as Extensions. For each textarea field added to a Section, a different text formatter can be enabled. I generally prefer Markdown.</p>\n\n<p>Other extensions add interface enhancements. For example, another Extension uses a script called Markitup that adds a row of formatting buttons that will help users format text with Markdown.</p>\n\n<p>It makes sense to add the extensions necessary to make possible the sorts of data structures and functionality that you will need to develop your site.</p>\n');
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (61, 19, 'I love the idea of changing the process of developing web sites to be content-driven rather than design-driven. And I\'m saying that as a designer. Of course, design has a huge part to play, but content is the critical piece of the site. Without it, the design is pointless.\r\n\r\n', '<p>I love the idea of changing the process of developing web sites to be content-driven rather than design-driven. And I&#8217;m saying that as a designer. Of course, design has a huge part to play, but content is the critical piece of the site. Without it, the design is pointless.</p>\n');
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (44, 20, '#### An XML Importer for Symphony\r\n\r\nSo, I visited the forum to find some discussion about importing data into Symphony. I have experimented with [the technique the Nils suggested](http://symphony-cms.com/forum/discussions/21401/1/#position-6) in the Forum. In fact, when Symphony 2 was in beta, I created a [Destinations ensemble](http://symphony-cms.com/forum/discussions/333/) that demonstrated the technique of importing XML data into a front end form that will save multiple entries at once. The set up for the import took a little bit more effort than I would have liked. It wasn\'t terribly user friendly, but it worked great.\r\n\r\n#### Symphony\r\n\r\nSo, here\'s the idea. Start with [Symphony](http://symphony-cms.com/), now that it has matured as a flexible, powerful, open source and feature stable version 2.0.2.\r\n\r\nI have dabbled with TextPattern and produced a few sites with it, a few years back. However, I became disatisfied with the pace of development, and the requirement of a plugin for every basic feature that I wanted to incorporate.\r\n\r\nSince discovering Symphony, I haven\'t turned back. Admittedly, there have been some growing pains, as the community dreamed up new features to include. We were excited as each of these features found their way into the core, leading to a feature stable version 1.7, and I was happy to contribute to the community with my shiny new site, and with the beginnings of a [step-by-step Symphony tutorial](http://bauhouse.ca/journal/creating-a-theme-for-symphony/). But with the announcement of the development of Symphony 2, I decided to hold off on development of further tutorials, to avoid having to rewrite the tutorials for the new version. The Symphony 2 Beta started off strong and I created a number of ensembles to test out the features and performance of the new version. Working on a site that was not going to be easily updated from version 1.7 to version 2.0 did not interest me. So I turned to other projects to wait for the final release.\r\n\r\nWith concerns of performance issues and new ideas about features, the development took a left turn after Symphony 2 Beta Revision 5. News flowed slowly from the developers as they worked furiously to rebuild Symphony 2 from the ground up with an updated feature set.\r\n\r\nHowever, with several production sites being deployed using the beta version, with many useful extensions being released, it was decided that the community should have ownership over the open source code and have the ability to contribute bug fixes and improvements. Symphony 2.0 was officially released as open source in December of 2008, marking the beginning of renewed interest and activity on the forum and on the Symphony Github project. With the preliminary release of much needed documentation for Symphony 2, the application had the opportunity to extend its reach beyond a relatively small core of dedicated users. Now with the redesign of the Symphony CMS site, the application is well-positioned to grow its user base.\r\n\r\nIt appears that a lack of in-depth documentation and tutorials is still an impediment to wide-spread adoption of the application. So, this is a project designed to alleviate this problem.', '<h4>An XML Importer for Symphony</h4>\n\n<p>So, I visited the forum to find some discussion about importing data into Symphony. I have experimented with <a href=\"http://symphony-cms.com/forum/discussions/21401/1/#position-6\">the technique the Nils suggested</a> in the Forum. In fact, when Symphony 2 was in beta, I created a <a href=\"http://symphony-cms.com/forum/discussions/333/\">Destinations ensemble</a> that demonstrated the technique of importing XML data into a front end form that will save multiple entries at once. The set up for the import took a little bit more effort than I would have liked. It wasn&#8217;t terribly user friendly, but it worked great.</p>\n\n<h4>Symphony</h4>\n\n<p>So, here&#8217;s the idea. Start with <a href=\"http://symphony-cms.com/\">Symphony</a>, now that it has matured as a flexible, powerful, open source and feature stable version 2.0.2.</p>\n\n<p>I have dabbled with TextPattern and produced a few sites with it, a few years back. However, I became disatisfied with the pace of development, and the requirement of a plugin for every basic feature that I wanted to incorporate.</p>\n\n<p>Since discovering Symphony, I haven&#8217;t turned back. Admittedly, there have been some growing pains, as the community dreamed up new features to include. We were excited as each of these features found their way into the core, leading to a feature stable version 1.7, and I was happy to contribute to the community with my shiny new site, and with the beginnings of a <a href=\"http://bauhouse.ca/journal/creating-a-theme-for-symphony/\">step-by-step Symphony tutorial</a>. But with the announcement of the development of Symphony 2, I decided to hold off on development of further tutorials, to avoid having to rewrite the tutorials for the new version. The Symphony 2 Beta started off strong and I created a number of ensembles to test out the features and performance of the new version. Working on a site that was not going to be easily updated from version 1.7 to version 2.0 did not interest me. So I turned to other projects to wait for the final release.</p>\n\n<p>With concerns of performance issues and new ideas about features, the development took a left turn after Symphony 2 Beta Revision 5. News flowed slowly from the developers as they worked furiously to rebuild Symphony 2 from the ground up with an updated feature set.</p>\n\n<p>However, with several production sites being deployed using the beta version, with many useful extensions being released, it was decided that the community should have ownership over the open source code and have the ability to contribute bug fixes and improvements. Symphony 2.0 was officially released as open source in December of 2008, marking the beginning of renewed interest and activity on the forum and on the Symphony Github project. With the preliminary release of much needed documentation for Symphony 2, the application had the opportunity to extend its reach beyond a relatively small core of dedicated users. Now with the redesign of the Symphony CMS site, the application is well-positioned to grow its user base.</p>\n\n<p>It appears that a lack of in-depth documentation and tutorials is still an impediment to wide-spread adoption of the application. So, this is a project designed to alleviate this problem.</p>\n');
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (45, 21, '##### Blogs\r\n\r\n* [Live Journal](http://bauhouse.livejournal.com/)\r\n* [WordPress](http://bauhouse.wordpress.com/)\r\n\r\n##### Social Media\r\n\r\n* [Basecamp](https://bauhouse.projectpath.com/login)\r\n* [Delicious](http://delicious.com/bauhouse)\r\n* [Dopplr](http://www.dopplr.com/traveller/bauhouse)\r\n* [Facebook](http://www.facebook.com/people/Stephen-Bau/1680386651)\r\n* [Flickr](http://www.flickr.com/photos/bauhouse/)\r\n* [Joyent Connector](http://bauhouse.joyent.net/)\r\n* [NetVibes](http://www.netvibes.com/bauhouse)\r\n* [Newsvine](http://bau.newsvine.com/)\r\n* [Twitter](http://twitter.com/bauhouse)\r\n* [Virb](http://virb.com/bauhouse)\r\n\r\n##### Sites\r\n\r\n* [TextPattern - BuildersCollective](http://www.builderscollective.com/)\r\n* [Symphony - Bauhouse](http://www.bauhousedesign.com/)\r\n* [Symphony - Imaginaxiom](http://www.imaginaxiom.com/)\r\n* [Symphony - DesignInfluences](http://www.designinfluences.com/)\r\n* [Symphony - DesignAdmin](http://www.designadmin.com/)\r\n* [Symphony - DesignProjectX](http://www.designprojectx.com/)\r\n\r\nI suppose it is time to take inventory of the mess that is my http footprint and try to develop a more consistent and cohesive online brand, as it were. (Or stop fiddling around with the computer and go outside and play.)\r\n', '<h5>Blogs</h5>\n\n<ul>\n<li><a href=\"http://bauhouse.livejournal.com/\">Live Journal</a></li>\n<li><a href=\"http://bauhouse.wordpress.com/\">WordPress</a></li>\n</ul>\n\n<h5>Social Media</h5>\n\n<ul>\n<li><a href=\"https://bauhouse.projectpath.com/login\">Basecamp</a></li>\n<li><a href=\"http://delicious.com/bauhouse\">Delicious</a></li>\n<li><a href=\"http://www.dopplr.com/traveller/bauhouse\">Dopplr</a></li>\n<li><a href=\"http://www.facebook.com/people/Stephen-Bau/1680386651\">Facebook</a></li>\n<li><a href=\"http://www.flickr.com/photos/bauhouse/\">Flickr</a></li>\n<li><a href=\"http://bauhouse.joyent.net/\">Joyent Connector</a></li>\n<li><a href=\"http://www.netvibes.com/bauhouse\">NetVibes</a></li>\n<li><a href=\"http://bau.newsvine.com/\">Newsvine</a></li>\n<li><a href=\"http://twitter.com/bauhouse\">Twitter</a></li>\n<li><a href=\"http://virb.com/bauhouse\">Virb</a></li>\n</ul>\n\n<h5>Sites</h5>\n\n<ul>\n<li><a href=\"http://www.builderscollective.com/\">TextPattern - BuildersCollective</a></li>\n<li><a href=\"http://www.bauhousedesign.com/\">Symphony - Bauhouse</a></li>\n<li><a href=\"http://www.imaginaxiom.com/\">Symphony - Imaginaxiom</a></li>\n<li><a href=\"http://www.designinfluences.com/\">Symphony - DesignInfluences</a></li>\n<li><a href=\"http://www.designadmin.com/\">Symphony - DesignAdmin</a></li>\n<li><a href=\"http://www.designprojectx.com/\">Symphony - DesignProjectX</a></li>\n</ul>\n\n<p>I suppose it is time to take inventory of the mess that is my http footprint and try to develop a more consistent and cohesive online brand, as it were. (Or stop fiddling around with the computer and go outside and play.)</p>\n');
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (100, 22, '#### Types\r\n\r\nI want to be able to blog and have a number of different types of content\r\n\r\n* Bookmarks\r\n* Books\r\n* Files\r\n* Photos\r\n* Sites\r\n\r\n\r\n#### Sections\r\n\r\nI want to organize my site content into sections\r\n\r\n* Resources\r\n* Calendar\r\n* Journal\r\n* Contact\r\n* About\r\n* Home\r\n\r\n#### Categories\r\n\r\nI also want to organize my site content in categories\r\n\r\n* Applications\r\n* Design\r\n* History\r\n* Ideas\r\n* Technology\r\n* Typography\r\n\r\n#### Entries\r\n\r\nBasic content entries don\'t need much more than:\r\n\r\n* Title\r\n* Description\r\n* Body\r\n* Section\r\n* Category\r\n* Date\r\n* Publish\r\n\r\n#### Items\r\n\r\nCould be a lot of different items that get attached to entries or exist just on their own. Here\'s where types of content come into play.\r\n\r\n* Title\r\n* URL\r\n* Type\r\n* Category\r\n* Date\r\n* Entry\r\n* Description\r\n* Body\r\n* Tags\r\n* Image\r\n* File\r\n* Publish\r\n', '<h4>Types</h4>\n\n<p>I want to be able to blog and have a number of different types of content</p>\n\n<ul>\n<li>Bookmarks</li>\n<li>Books</li>\n<li>Files</li>\n<li>Photos</li>\n<li>Sites</li>\n</ul>\n\n<h4>Sections</h4>\n\n<p>I want to organize my site content into sections</p>\n\n<ul>\n<li>Resources</li>\n<li>Calendar</li>\n<li>Journal</li>\n<li>Contact</li>\n<li>About</li>\n<li>Home</li>\n</ul>\n\n<h4>Categories</h4>\n\n<p>I also want to organize my site content in categories</p>\n\n<ul>\n<li>Applications</li>\n<li>Design</li>\n<li>History</li>\n<li>Ideas</li>\n<li>Technology</li>\n<li>Typography</li>\n</ul>\n\n<h4>Entries</h4>\n\n<p>Basic content entries don&#8217;t need much more than:</p>\n\n<ul>\n<li>Title</li>\n<li>Description</li>\n<li>Body</li>\n<li>Section</li>\n<li>Category</li>\n<li>Date</li>\n<li>Publish</li>\n</ul>\n\n<h4>Items</h4>\n\n<p>Could be a lot of different items that get attached to entries or exist just on their own. Here&#8217;s where types of content come into play.</p>\n\n<ul>\n<li>Title</li>\n<li>URL</li>\n<li>Type</li>\n<li>Category</li>\n<li>Date</li>\n<li>Entry</li>\n<li>Description</li>\n<li>Body</li>\n<li>Tags</li>\n<li>Image</li>\n<li>File</li>\n<li>Publish</li>\n</ul>\n');
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (98, 24, '#### How it really started\r\n\r\nI bought this domain as a sandbox to play in. If I needed somewhere to send a client to see the current iteration of a project, I would send them here. The days of freelance are officially over. But I still like to play around. I tend to play around on the fringes of design and technology. But these experiments usually involve open source standards, or at least free tools and technologies that can be widely adapted and shared.', '<h4>How it really started</h4>\n\n<p>I bought this domain as a sandbox to play in. If I needed somewhere to send a client to see the current iteration of a project, I would send them here. The days of freelance are officially over. But I still like to play around. I tend to play around on the fringes of design and technology. But these experiments usually involve open source standards, or at least free tools and technologies that can be widely adapted and shared.</p>\n');
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (99, 25, 'I may have built a reputation for being the guy who starts things, but never finishes. I\'m okay with that. As I generalist, I try to learn as much as I can about a myriad of things. As a specialist, I get wrapped up in the details, and sometimes get lost in them. I have some goals in mind, but they tend to be a little lofty. Maybe some day the generalist, the specialist and the idealist will come together and actually finish something useful, beautiful or both.', '<p>I may have built a reputation for being the guy who starts things, but never finishes. I&#8217;m okay with that. As I generalist, I try to learn as much as I can about a myriad of things. As a specialist, I get wrapped up in the details, and sometimes get lost in them. I have some goals in mind, but they tend to be a little lofty. Maybe some day the generalist, the specialist and the idealist will come together and actually finish something useful, beautiful or both.</p>\n');
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (112, 28, 'This is the body of my entry, using [Markdown](http://daringfireball.net/projects/markdown/) to format the text as HTML, using the Symphony Markdown extension.', '<p>This is the body of my entry, using <a href=\"http://daringfireball.net/projects/markdown/\">Markdown</a> to format the text as HTML, using the Symphony Markdown extension.</p>\n');
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (104, 27, 'Since Symphony is a system based on XML and XSLT, it makes sense to store these files as XML. I could potentially import the XML files into Symphony instead of relying on the MySQL database to pull the appropriate data for each of my entries.\r\n\r\nI\'m still going to use Markdown to format my entries, rather than write HTML. Although, it might make sense in the long run to keep the structure of the article body as XML that the XSLT processor can transform. But I\'m a little lazy when it comes to that. Why don\'t I let Symphony create the XML for me. I simply need to write the text document and copy and paste the text into Symphony. Symphony will create the HTML formatted content and insert this content into the XML data. I just need to find the entry in the database and copy the XML.\r\n\r\n#### A Sample Text File\r\n\r\nThe structure of the TXT file will look something like this:\r\n\r\n	--------------------------------\r\n	Title\r\n	--------------------------------\r\n	\r\n	The Title of My Entry\r\n	\r\n	\r\n	--------------------------------\r\n	Description\r\n	--------------------------------\r\n	\r\n	A brief description of my entry.\r\n	\r\n	\r\n	--------------------------------\r\n	Body\r\n	--------------------------------\r\n	\r\n	This is the body of my entry, using \r\n	[Markdown](http://daringfireball.net/projects/markdown/) \r\n	to format the text as HTML, using the Symphony Markdown extension.\r\n	\r\n	--------------------------------\r\n	Date\r\n	--------------------------------\r\n	17 May 2009 9:07:59 am\r\n	\r\n	\r\n	--------------------------------\r\n	Section\r\n	--------------------------------\r\n	Journal\r\n	\r\n	\r\n	--------------------------------\r\n	Category\r\n	--------------------------------\r\n	Technology\r\n	\r\n	\r\n	--------------------------------\r\n	Tags\r\n	--------------------------------\r\n	symphony cms, backup, xml\r\n	\r\n	\r\n#### A Sample XML File\r\n\r\nOnce I have saved my entry, I can actually grab the formatted HTML from the ?debug page and I have XML that can be imported into my site as a fall back to using the database. The XML will look like this:\r\n\r\n    <entry id=\"28\" items=\"0\">\r\n        <title handle=\"the-title-of-my-entry\">The Title of My Entry</title>\r\n        <description word-count=\"6\"><p>A brief description of my entry.</p></description>\r\n        <body word-count=\"20\"><p>This is the body of my entry, using \r\n        	<a href=\"http://daringfireball.net/projects/markdown/\">Markdown</a> \r\n        	to format the text as HTML, using the Symphony Markdown extension.</p>\r\n        </body>\r\n        <section>\r\n            <item handle=\"journal\" id=\"17\">Journal</item>\r\n        </section>\r\n        <category>\r\n            <item handle=\"technology\" id=\"15\">Technology</item>\r\n        </category>\r\n        <date time=\"09:07\" weekday=\"7\">2009-05-17</date>\r\n    </entry>\r\n\r\n\r\nThis is similar to what Symphony already does. For each textarea field, the database stores a raw text version and the formatted HTML version. I\'ll create a directory in my workspace called \"entries\" to store the formatted XML entries which also contains a \"markdown\" directory containing the raw Markdown formatted TXT files.\r\n\r\nWe\'ll see if I like this method enough to actually use it going forward.\r\n', '<p>Since Symphony is a system based on XML and XSLT, it makes sense to store these files as XML. I could potentially import the XML files into Symphony instead of relying on the MySQL database to pull the appropriate data for each of my entries.</p>\n\n<p>I&#8217;m still going to use Markdown to format my entries, rather than write HTML. Although, it might make sense in the long run to keep the structure of the article body as XML that the XSLT processor can transform. But I&#8217;m a little lazy when it comes to that. Why don&#8217;t I let Symphony create the XML for me. I simply need to write the text document and copy and paste the text into Symphony. Symphony will create the HTML formatted content and insert this content into the XML data. I just need to find the entry in the database and copy the XML.</p>\n\n<h4>A Sample Text File</h4>\n\n<p>The structure of the TXT file will look something like this:</p>\n\n<pre><code>--------------------------------\nTitle\n--------------------------------\n\nThe Title of My Entry\n\n\n--------------------------------\nDescription\n--------------------------------\n\nA brief description of my entry.\n\n\n--------------------------------\nBody\n--------------------------------\n\nThis is the body of my entry, using \n[Markdown](http://daringfireball.net/projects/markdown/) \nto format the text as HTML, using the Symphony Markdown extension.\n\n--------------------------------\nDate\n--------------------------------\n17 May 2009 9:07:59 am\n\n\n--------------------------------\nSection\n--------------------------------\nJournal\n\n\n--------------------------------\nCategory\n--------------------------------\nTechnology\n\n\n--------------------------------\nTags\n--------------------------------\nsymphony cms, backup, xml\n</code></pre>\n\n<h4>A Sample XML File</h4>\n\n<p>Once I have saved my entry, I can actually grab the formatted HTML from the ?debug page and I have XML that can be imported into my site as a fall back to using the database. The XML will look like this:</p>\n\n<pre><code>&lt;entry id=\"28\" items=\"0\"&gt;\n    &lt;title handle=\"the-title-of-my-entry\"&gt;The Title of My Entry&lt;/title&gt;\n    &lt;description word-count=\"6\"&gt;&lt;p&gt;A brief description of my entry.&lt;/p&gt;&lt;/description&gt;\n    &lt;body word-count=\"20\"&gt;&lt;p&gt;This is the body of my entry, using \n        &lt;a href=\"http://daringfireball.net/projects/markdown/\"&gt;Markdown&lt;/a&gt; \n        to format the text as HTML, using the Symphony Markdown extension.&lt;/p&gt;\n    &lt;/body&gt;\n    &lt;section&gt;\n        &lt;item handle=\"journal\" id=\"17\"&gt;Journal&lt;/item&gt;\n    &lt;/section&gt;\n    &lt;category&gt;\n        &lt;item handle=\"technology\" id=\"15\"&gt;Technology&lt;/item&gt;\n    &lt;/category&gt;\n    &lt;date time=\"09:07\" weekday=\"7\"&gt;2009-05-17&lt;/date&gt;\n&lt;/entry&gt;\n</code></pre>\n\n<p>This is similar to what Symphony already does. For each textarea field, the database stores a raw text version and the formatted HTML version. I&#8217;ll create a directory in my workspace called &#8220;entries&#8221; to store the formatted XML entries which also contains a &#8220;markdown&#8221; directory containing the raw Markdown formatted TXT files.</p>\n\n<p>We&#8217;ll see if I like this method enough to actually use it going forward.</p>\n');
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (78, 30, NULL, NULL);
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (101, 31, 'To make using this grid system worthwhile, we need to add some classes to our HTML elements that provide the hooks necessary to quickly control the layout of our pages.\r\n\r\n#### The Grid Container\r\n\r\nThe first step is to choose a grid container. You have a choice of two grids: 12 columns and 16 columns. I\'m sure it would be possible to create more by modifying the grid.css file to account for the different ratios required if you preferred, say, a 7-column grid. For now, we\'ll stick to what we have \"out-of-the-box\". I\'ll choose the 12-column grid, so I can easily have the flexibility to try a 2-column, 3-column, 4-column or 6-column layout, since each of these numbers divides easily into the 12 columns available to work with. Wrap the content with a div with a class of \"container_12\".\r\n\r\n#### A Grid Column\r\n\r\nNow, to use the grid, it is necessary to define columns. A column can be a width of a single column in the grid, in which case you would create a div with a class of \"grid_1\", and fill it with your content. Using a 12-column grid, to create three equal columns, divide the total number of columns by 3. Then, add the result to the name of the class: \"grid_4\". Two equal columns would each have the class, \"grid_6\".\r\n\r\n#### Boxes\r\n\r\nThen, create a box to contain your content. Yes, we\'ll be adding a few boxes that make the layout more apparent and easier to deal with, but it might not be the best way to build the finished markup. This workflow does not follow the rules about creating semantic markup, this is true. For now, the goal is to quickly put together a site layout that conforms to web standards, employs a little JavaScript and allows us to easily move elements around on the page until we\'re happy with it. Ideally, then, the idea would be to create semantic IDs and classes to replace the presentational classes used by the grid system. The purpose of the grid system is not to produce finished sites with non-semantic code that tries to reproduce what might be much more easily accomplished using table layouts, if that was the route we wanted to take. It\'s about creating a system that helps to avoid the problems that might arise when trying to quickly produce a layout and test the flow of the site by actually navigating through each page rather than trying to envision how someone would interact with a site by looking at static wireframes. The benefit being that it is possible to start working with a set of common markup patterns to create the content on the page and quickly move the content modules around on the page without worry about breaking the layout because of the constant requirement of tweaking the CSS so that it will work in the modified layout. It\'s called rapid interactive prototyping.\r\n\r\n#### Blocks\r\n\r\nYet another div element. Someone\'s got to be saying, \"This system has a really bad case of divitis.\" That person would be correct. I was trying to solve the problem of being able to have content that could be hidden or revealed, using a little JavaScript, by clicking on the heading of the box. This is the markup that I came up with that used the minimum number of divisions to accomplish this effect. As with anything, browser limitations, specification limitations and plain ignorance, perhaps, on my part, means there is going to be some compromise between efficient workflow, semantic markup and presentational markup. Given the goal, I needed a div to wrap the content that could slide in and out. So, I created a \"block\" div that would be contained by the \"box\" div.', '<p>To make using this grid system worthwhile, we need to add some classes to our HTML elements that provide the hooks necessary to quickly control the layout of our pages.</p>\n\n<h4>The Grid Container</h4>\n\n<p>The first step is to choose a grid container. You have a choice of two grids: 12 columns and 16 columns. I&#8217;m sure it would be possible to create more by modifying the grid.css file to account for the different ratios required if you preferred, say, a 7-column grid. For now, we&#8217;ll stick to what we have &#8220;out-of-the-box&#8221;. I&#8217;ll choose the 12-column grid, so I can easily have the flexibility to try a 2-column, 3-column, 4-column or 6-column layout, since each of these numbers divides easily into the 12 columns available to work with. Wrap the content with a div with a class of &#8220;container_12&#8221;.</p>\n\n<h4>A Grid Column</h4>\n\n<p>Now, to use the grid, it is necessary to define columns. A column can be a width of a single column in the grid, in which case you would create a div with a class of &#8220;grid_1&#8221;, and fill it with your content. Using a 12-column grid, to create three equal columns, divide the total number of columns by 3. Then, add the result to the name of the class: &#8220;grid_4&#8221;. Two equal columns would each have the class, &#8220;grid_6&#8221;.</p>\n\n<h4>Boxes</h4>\n\n<p>Then, create a box to contain your content. Yes, we&#8217;ll be adding a few boxes that make the layout more apparent and easier to deal with, but it might not be the best way to build the finished markup. This workflow does not follow the rules about creating semantic markup, this is true. For now, the goal is to quickly put together a site layout that conforms to web standards, employs a little JavaScript and allows us to easily move elements around on the page until we&#8217;re happy with it. Ideally, then, the idea would be to create semantic IDs and classes to replace the presentational classes used by the grid system. The purpose of the grid system is not to produce finished sites with non-semantic code that tries to reproduce what might be much more easily accomplished using table layouts, if that was the route we wanted to take. It&#8217;s about creating a system that helps to avoid the problems that might arise when trying to quickly produce a layout and test the flow of the site by actually navigating through each page rather than trying to envision how someone would interact with a site by looking at static wireframes. The benefit being that it is possible to start working with a set of common markup patterns to create the content on the page and quickly move the content modules around on the page without worry about breaking the layout because of the constant requirement of tweaking the CSS so that it will work in the modified layout. It&#8217;s called rapid interactive prototyping.</p>\n\n<h4>Blocks</h4>\n\n<p>Yet another div element. Someone&#8217;s got to be saying, &#8220;This system has a really bad case of divitis.&#8221; That person would be correct. I was trying to solve the problem of being able to have content that could be hidden or revealed, using a little JavaScript, by clicking on the heading of the box. This is the markup that I came up with that used the minimum number of divisions to accomplish this effect. As with anything, browser limitations, specification limitations and plain ignorance, perhaps, on my part, means there is going to be some compromise between efficient workflow, semantic markup and presentational markup. Given the goal, I needed a div to wrap the content that could slide in and out. So, I created a &#8220;block&#8221; div that would be contained by the &#8220;box&#8221; div.</p>\n');
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (91, 32, '#### A different goal: what can I learn today?\r\n\r\nI learn by doing. So this is me doing stuff. I\'m also a perfectionist, which sometimes leads to a condition of paralysis, if I don\'t want to release something into the wild if it\'s not ready for public consumption. I have resolved that things will not be perfect. Mistakes are part of the process. So this is me in process. Stream of consciousness code and design.', '<h4>A different goal: what can I learn today?</h4>\n\n<p>I learn by doing. So this is me doing stuff. I&#8217;m also a perfectionist, which sometimes leads to a condition of paralysis, if I don&#8217;t want to release something into the wild if it&#8217;s not ready for public consumption. I have resolved that things will not be perfect. Mistakes are part of the process. So this is me in process. Stream of consciousness code and design.</p>\n');
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (113, 34, 'Marc Liyanage created a useful application called TestXSLT. He also published an [XSLT template](http://www.entropy.ch/software/xsl/xml-prettyprinter.xslt) that helps to make XML output look pretty, that is, to be indented according to the hierarchical structure of the XML file.\r\n\r\nI wasn\'t happy with the output of the basic `<xsl:copy-of select=\"/data/entry/*\"/>` instruction. The formatting was looking a little weird. So, I remembered Marc\'s work and went about seeing how his handy [XML Pretty Printer](http://www.entropy.ch/software/xsl/xml-prettyprinter.xslt) template might change things.\r\n\r\nI created a page with a Parent Page of \"Journal\" and a URL Parameter of \"entry\" and ended up with something like this for the template body:\r\n\r\n	<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n	<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n	\r\n	<xsl:import href=\"../utilities/xml-pretty-printer.xsl\"/>\r\n	\r\n	<xsl:output method=\"xml\" encoding=\"UTF-8\" indent=\"yes\" />\r\n	\r\n	<xsl:template match=\"/\">\r\n		<xsl:for-each select=\"data/entry\">\r\n			<xsl:apply-templates />\r\n		</xsl:for-each>\r\n	</xsl:template>\r\n		\r\n	</xsl:stylesheet>\r\n\r\nI made a very minor modification to Marc\'s template to output tabs instead of two spaces for indents:\r\n\r\n	<?xml version=\'1.0\' encoding=\'iso-8859-1\'?>\r\n	\r\n	<!-- xml pretty printing xslt -->\r\n	\r\n	<xsl:stylesheet version=\'1.0\' xmlns:xsl=\'http://www.w3.org/1999/XSL/Transform\'>\r\n	\r\n	<xsl:output method=\'html\' version=\'1.0\' encoding=\'iso-8859-1\' indent=\'no\'/>\r\n	\r\n	<xsl:variable name=\"indent_text\" select=\"\'&#x09;\'\"/>\r\n	\r\n	<xsl:template match=\"*[count(*) = 0]\">\r\n	<xsl:param name=\"indent\" select=\"0\"/>\r\n	<xsl:call-template name=\"indent\"><xsl:with-param name=\"count\" select=\"$indent\"/></xsl:call-template>\r\n	<xsl:element name=\"{name()}\"><xsl:copy-of select=\"@*\"/><xsl:value-of select=\"normalize-space(.)\"/></xsl:element><xsl:text>\r\n	</xsl:text>\r\n	</xsl:template>\r\n	\r\n	<xsl:template match=\"*[count(*) > 0]\">\r\n	<xsl:param name=\"indent\" select=\"0\"/>\r\n	<xsl:call-template name=\"indent\"><xsl:with-param name=\"count\" select=\"$indent\"/></xsl:call-template>\r\n	<xsl:element name=\"{name()}\"><xsl:copy-of select=\"@*\"/><xsl:text>\r\n	</xsl:text>\r\n	<xsl:apply-templates><xsl:with-param name=\"indent\" select=\"$indent + 1\"/></xsl:apply-templates>\r\n	<xsl:call-template name=\"indent\"><xsl:with-param name=\"count\" select=\"$indent\"/></xsl:call-template></xsl:element><xsl:text>\r\n	</xsl:text>\r\n	</xsl:template>\r\n	\r\n	<xsl:template name=\"indent\">\r\n	<xsl:param name=\"count\"/>\r\n	\r\n	<xsl:if test=\"$count > 0\">\r\n	<xsl:copy-of select=\"$indent_text\"/>\r\n	<xsl:call-template name=\"indent\">\r\n	<xsl:with-param name=\"count\" select=\"$count - 1\"/>\r\n	</xsl:call-template>\r\n	</xsl:if>\r\n	\r\n	</xsl:template>\r\n	\r\n	<xsl:template match=\"text()[string-length(normalize-space(.)) &lt; 1]\">\r\n	</xsl:template>\r\n	\r\n	<xsl:template match=\"text()[string-length(normalize-space(.)) > 1]\">\r\n	<xsl:param name=\"indent\" select=\"0\"/>\r\n	<xsl:call-template name=\"indent\"><xsl:with-param name=\"count\" select=\"$indent\"/></xsl:call-template>\r\n	<xsl:value-of select=\"normalize-space(.)\"/><xsl:text>\r\n	</xsl:text>\r\n	</xsl:template>\r\n	\r\n	</xsl:stylesheet>\r\n\r\nThe tab character needed to be expressed as a [numeric character entity reference](http://www.w3.org/TR/html4/sgml/entities.html): `&#x09;`. For more information about white space handling in XML and XSLT, Dave Pawson has put together some [helpful resources](http://www.dpawson.co.uk/xsl/sect2/N8321.html#d12587e947). To view the XML for the current page, I can add some code to the entries template to output a link with the following signature:\r\n\r\n	{$root}/{$current-page}/xml/{$entry}/\r\n\r\nFor this to work on the Journal overview, I\'ll need to use this instead:\r\n\r\n	<a href=\"{$root}/{$current-page}/xml/{title/@handle}/\" title=\"View entry as XML\">XML</a>\r\n\r\nThe unfortunate by-product of using XML Pretty Printer to format the XML is that the code blocks are stripped of all white space, turning them into a single line of code. I\'ll have to think of a workaround for this.', '<p>Marc Liyanage created a useful application called TestXSLT. He also published an <a href=\"http://www.entropy.ch/software/xsl/xml-prettyprinter.xslt\">XSLT template</a> that helps to make XML output look pretty, that is, to be indented according to the hierarchical structure of the XML file.</p>\n\n<p>I wasn&#8217;t happy with the output of the basic <code>&lt;xsl:copy-of select=\"/data/entry/*\"/&gt;</code> instruction. The formatting was looking a little weird. So, I remembered Marc&#8217;s work and went about seeing how his handy <a href=\"http://www.entropy.ch/software/xsl/xml-prettyprinter.xslt\">XML Pretty Printer</a> template might change things.</p>\n\n<p>I created a page with a Parent Page of &#8220;Journal&#8221; and a URL Parameter of &#8220;entry&#8221; and ended up with something like this for the template body:</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;\n\n&lt;xsl:import href=\"../utilities/xml-pretty-printer.xsl\"/&gt;\n\n&lt;xsl:output method=\"xml\" encoding=\"UTF-8\" indent=\"yes\" /&gt;\n\n&lt;xsl:template match=\"/\"&gt;\n    &lt;xsl:for-each select=\"data/entry\"&gt;\n        &lt;xsl:apply-templates /&gt;\n    &lt;/xsl:for-each&gt;\n&lt;/xsl:template&gt;\n\n&lt;/xsl:stylesheet&gt;\n</code></pre>\n\n<p>I made a very minor modification to Marc&#8217;s template to output tabs instead of two spaces for indents:</p>\n\n<pre><code>&lt;?xml version=\'1.0\' encoding=\'iso-8859-1\'?&gt;\n\n&lt;!-- xml pretty printing xslt --&gt;\n\n&lt;xsl:stylesheet version=\'1.0\' xmlns:xsl=\'http://www.w3.org/1999/XSL/Transform\'&gt;\n\n&lt;xsl:output method=\'html\' version=\'1.0\' encoding=\'iso-8859-1\' indent=\'no\'/&gt;\n\n&lt;xsl:variable name=\"indent_text\" select=\"\'&amp;#x09;\'\"/&gt;\n\n&lt;xsl:template match=\"*[count(*) = 0]\"&gt;\n&lt;xsl:param name=\"indent\" select=\"0\"/&gt;\n&lt;xsl:call-template name=\"indent\"&gt;&lt;xsl:with-param name=\"count\" select=\"$indent\"/&gt;&lt;/xsl:call-template&gt;\n&lt;xsl:element name=\"{name()}\"&gt;&lt;xsl:copy-of select=\"@*\"/&gt;&lt;xsl:value-of select=\"normalize-space(.)\"/&gt;&lt;/xsl:element&gt;&lt;xsl:text&gt;\n&lt;/xsl:text&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:template match=\"*[count(*) &gt; 0]\"&gt;\n&lt;xsl:param name=\"indent\" select=\"0\"/&gt;\n&lt;xsl:call-template name=\"indent\"&gt;&lt;xsl:with-param name=\"count\" select=\"$indent\"/&gt;&lt;/xsl:call-template&gt;\n&lt;xsl:element name=\"{name()}\"&gt;&lt;xsl:copy-of select=\"@*\"/&gt;&lt;xsl:text&gt;\n&lt;/xsl:text&gt;\n&lt;xsl:apply-templates&gt;&lt;xsl:with-param name=\"indent\" select=\"$indent + 1\"/&gt;&lt;/xsl:apply-templates&gt;\n&lt;xsl:call-template name=\"indent\"&gt;&lt;xsl:with-param name=\"count\" select=\"$indent\"/&gt;&lt;/xsl:call-template&gt;&lt;/xsl:element&gt;&lt;xsl:text&gt;\n&lt;/xsl:text&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:template name=\"indent\"&gt;\n&lt;xsl:param name=\"count\"/&gt;\n\n&lt;xsl:if test=\"$count &gt; 0\"&gt;\n&lt;xsl:copy-of select=\"$indent_text\"/&gt;\n&lt;xsl:call-template name=\"indent\"&gt;\n&lt;xsl:with-param name=\"count\" select=\"$count - 1\"/&gt;\n&lt;/xsl:call-template&gt;\n&lt;/xsl:if&gt;\n\n&lt;/xsl:template&gt;\n\n&lt;xsl:template match=\"text()[string-length(normalize-space(.)) &amp;lt; 1]\"&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:template match=\"text()[string-length(normalize-space(.)) &gt; 1]\"&gt;\n&lt;xsl:param name=\"indent\" select=\"0\"/&gt;\n&lt;xsl:call-template name=\"indent\"&gt;&lt;xsl:with-param name=\"count\" select=\"$indent\"/&gt;&lt;/xsl:call-template&gt;\n&lt;xsl:value-of select=\"normalize-space(.)\"/&gt;&lt;xsl:text&gt;\n&lt;/xsl:text&gt;\n&lt;/xsl:template&gt;\n\n&lt;/xsl:stylesheet&gt;\n</code></pre>\n\n<p>The tab character needed to be expressed as a <a href=\"http://www.w3.org/TR/html4/sgml/entities.html\">numeric character entity reference</a>: <code>&amp;#x09;</code>. For more information about white space handling in XML and XSLT, Dave Pawson has put together some <a href=\"http://www.dpawson.co.uk/xsl/sect2/N8321.html#d12587e947\">helpful resources</a>. To view the XML for the current page, I can add some code to the entries template to output a link with the following signature:</p>\n\n<pre><code>{$root}/{$current-page}/xml/{$entry}/\n</code></pre>\n\n<p>For this to work on the Journal overview, I&#8217;ll need to use this instead:</p>\n\n<pre><code>&lt;a href=\"{$root}/{$current-page}/xml/{title/@handle}/\" title=\"View entry as XML\"&gt;XML&lt;/a&gt;\n</code></pre>\n\n<p>The unfortunate by-product of using XML Pretty Printer to format the XML is that the code blocks are stripped of all white space, turning them into a single line of code. I&#8217;ll have to think of a workaround for this.</p>\n');
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (115, 26, 'I love to experiment with new things. Design is my passion. I desire to create, inspire, transform, revolutionize. The tools of my experimentation are an Apple Mac G5, Compaq Presario, Adobe InDesign, Photoshop and Illustrator, Dreamweaver and Flash, XHTML, CSS, Apache, PHP, MySQL, Symphony, Joyent. My design is influenced by the Modernist roots of art and design at the Bauhaus, a school founded by Walter Gropius in 1919 in Weimar, Germany. The influence tends to show up less in design style, but more in my idealism and my hope to encourage social unity in diversity through the synthesis of art and technology. [Stephen Bau](http://www.domain7.com/WhoWeAre/StephenBau.html), [MGDC](http://www.gdc.net/business/find_a_designer/designer1228.php)', '<p>I love to experiment with new things. Design is my passion. I desire to create, inspire, transform, revolutionize. The tools of my experimentation are an Apple Mac G5, Compaq Presario, Adobe InDesign, Photoshop and Illustrator, Dreamweaver and Flash, XHTML, CSS, Apache, PHP, MySQL, Symphony, Joyent. My design is influenced by the Modernist roots of art and design at the Bauhaus, a school founded by Walter Gropius in 1919 in Weimar, Germany. The influence tends to show up less in design style, but more in my idealism and my hope to encourage social unity in diversity through the synthesis of art and technology. <a href=\"http://www.domain7.com/WhoWeAre/StephenBau.html\">Stephen Bau</a>, <a href=\"http://www.gdc.net/business/find_a_designer/designer1228.php\">MGDC</a></p>\n');
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (117, 35, 'There are already some good resources available in print for XSLT, but online resources are not well organized for beginners who might be trying to learn the language. W3Schools provides a few good introductory primers on [XML](http://www.w3schools.com/xml/default.asp), [XSLT](http://www.w3schools.com/xsl/default.asp) and [XPath](http://www.w3schools.com/xpath/default.asp), but they only scratch the surface.\r\n\r\n[Overture, The Complete Resource Center for Symphony](http://archive.overture21.com/wiki/) contained some good resources, but I don\'t think it was ever really complete.\r\n\r\nThis might be a good place to start to put together a [Glossary](http://symphony-cms.com/documentation/glossary/) for the new [Symphony CMS Documentation](http://symphony-cms.com/documentation/) section.\r\n\r\n[Craig Zheng](http://symphony-cms.com/members/czheng/) offered [a list of terms](http://symphony-cms.com/forum/discussions/20449/#position-2) to use as a starting point:\r\n\r\n#### Symphony-specific\r\n\r\n* author\r\n* content group\r\n* data source\r\n* data source: parameter output\r\n* debug\r\n* debug: parameter pool\r\n* debug: profile\r\n* ensemble\r\n* event\r\n* extension\r\n* extension: enable/disable/uninstall\r\n* field\r\n* page\r\n* page: page type\r\n* section\r\n* URL parameter\r\n* utility\r\n* workspace\r\n\r\n\r\n#### XML/XSLT/XPath\r\n\r\n* entity\r\n* namespace\r\n* node\r\n', '<p>There are already some good resources available in print for XSLT, but online resources are not well organized for beginners who might be trying to learn the language. W3Schools provides a few good introductory primers on <a href=\"http://www.w3schools.com/xml/default.asp\">XML</a>, <a href=\"http://www.w3schools.com/xsl/default.asp\">XSLT</a> and <a href=\"http://www.w3schools.com/xpath/default.asp\">XPath</a>, but they only scratch the surface.</p>\n\n<p><a href=\"http://archive.overture21.com/wiki/\">Overture, The Complete Resource Center for Symphony</a> contained some good resources, but I don&#8217;t think it was ever really complete.</p>\n\n<p>This might be a good place to start to put together a <a href=\"http://symphony-cms.com/documentation/glossary/\">Glossary</a> for the new <a href=\"http://symphony-cms.com/documentation/\">Symphony CMS Documentation</a> section.</p>\n\n<p><a href=\"http://symphony-cms.com/members/czheng/\">Craig Zheng</a> offered <a href=\"http://symphony-cms.com/forum/discussions/20449/#position-2\">a list of terms</a> to use as a starting point:</p>\n\n<h4>Symphony-specific</h4>\n\n<ul>\n<li>author</li>\n<li>content group</li>\n<li>data source</li>\n<li>data source: parameter output</li>\n<li>debug</li>\n<li>debug: parameter pool</li>\n<li>debug: profile</li>\n<li>ensemble</li>\n<li>event</li>\n<li>extension</li>\n<li>extension: enable/disable/uninstall</li>\n<li>field</li>\n<li>page</li>\n<li>page: page type</li>\n<li>section</li>\n<li>URL parameter</li>\n<li>utility</li>\n<li>workspace</li>\n</ul>\n\n<h4>XML/XSLT/XPath</h4>\n\n<ul>\n<li>entity</li>\n<li>namespace</li>\n<li>node</li>\n</ul>\n');
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (156, 38, 'Don’t worry if you don’t have the integration branch installed. This simply means you won’t be able to organize sections into different menus in the Symphony admin area.\r\n\r\nFor this site, I have created 5 sections. Two sections deal with metadata. Three sections deal with content.\r\n\r\n#### Metadata Sections\r\n\r\nFirst, let’s create the metadata sections:\r\n\r\n##### Types Section\r\n\r\nNavigate to Blueprints : Sections and create a new section with the following settings:\r\n\r\n###### Essentials\r\n\r\n* Name: **Types**\r\n* Navigation Group: **Meta**\r\n\r\n###### Fields\r\n\r\n* Text Input\r\n	* Label: **Title**\r\n	* Placement: **Main content**\r\n	* Validation Rule: (none)\r\n	* Make this a required field: **yes**\r\n	* Show column: **yes**\r\n* Textarea\r\n	* Label: **Description**\r\n	* Placement: **Main content**\r\n	* Make textarea **15** rows tall\r\n	* Make this a required field: **no**\r\n	* Text Formatter: **Markdown Extra plus SmartyPants**\r\n	* Show column: **yes**\r\n\r\n##### Categories Section\r\n\r\nNext, create the \"Categories\" section with the following settings:\r\n\r\n###### Essentials\r\n\r\n* Name: **Types**\r\n* Navigation Group: **Meta**\r\n\r\n###### Fields\r\n\r\n* Text Input\r\n	* Label: **Title**\r\n	* Placement: **Main content**\r\n	* Validation Rule: (none)\r\n	* Make this a required field: **yes**\r\n	* Show column: **yes**\r\n* Textarea\r\n	* Label: **Description**\r\n	* Placement: **Main content**\r\n	* Make textarea **6** rows tall\r\n	* Make this a required field: **no**\r\n	* Text Formatter: **Markdown Extra plus SmartyPants**\r\n	* Show column: **yes**\r\n* Textarea\r\n	* Label: **Body**\r\n	* Placement: **Main content**\r\n	* Make textarea **15** rows tall\r\n	* Make this a required field: **no**\r\n	* Text Formatter: **Markdown Extra plus SmartyPants**\r\n	* Show column: **no**\r\n	\r\n##### Symphony Admin Navigation\r\n\r\nIf you are working with a clean install of Symphony, you will notice that once you have created the first section, a new menu item will be added to the Symphony admin menu. If you are using the version 2.0.2 integration branch, the name of the menu will be labelled with the name you designated as the Navigation Group. For earlier versions, all sections will appear in the Publish menu. To re-order the menu, navigate to Blueprints : Sections and drag the row for each section to a different position.\r\n\r\n#### Content Sections\r\n\r\nNow, let’s create the content sections:\r\n\r\n##### Sections Section\r\n\r\nCreate a new section with the following settings. (**Note**: for the Parent Section select box link field, select Types:Title, save the section, then select Sections:Title. It is possible for a Select Box Link to select itself to be able to create hierarchies of sections, but the section must first be saved to make the section available in the list of options.)\r\n\r\n###### Essentials\r\n\r\n* Name: **Sections**\r\n* Navigation Group: **Content**\r\n\r\n###### Fields\r\n\r\n* Text Input\r\n	* Label: **Title**\r\n	* Placement: **Main content**\r\n	* Validation Rule: (none)\r\n	* Make this a required field: **yes**\r\n	* Show column: **yes**\r\n* Textarea\r\n	* Label: **Description**\r\n	* Placement: **Main content**\r\n	* Make textarea **6** rows tall\r\n	* Make this a required field: **no**\r\n	* Text Formatter: **Markdown Extra plus SmartyPants**\r\n	* Show column: **yes**\r\n* Textarea\r\n	* Label: **Body**\r\n	* Placement: **Main content**\r\n	* Make textarea **15** rows tall\r\n	* Make this a required field: **no**\r\n	* Text Formatter: **Markdown Extra plus SmartyPants**\r\n	* Show column: **no**\r\n* Select Box Link\r\n	* Label: **Parent Section**\r\n	* Placement: **Sidebar**\r\n	* Options: **Sections: Title**\r\n	* Limit to the **20** most recent entries\r\n	* Allow selection of multiple options: **no**\r\n	* Make this a required field: **no**\r\n	* Show column: **yes**\r\n* Select Box\r\n	* Label: **Menu**\r\n	* Placement: **Sidebar**\r\n	* Static Options: **Main, Content**\r\n	* Dynamic Options: **None**\r\n	* Allow selection of multiple options: **no**\r\n	* Show column: **yes**\r\n* Entry Order\r\n	* Label: **Sort**\r\n	* Placement: **Sidebar**\r\n	* Show column: **yes**\r\n\r\n##### Entries Section\r\n\r\nNext, create the \"Entries\" section with the following settings:\r\n\r\n###### Essentials\r\n\r\n* Name: **Entries**\r\n* Navigation Group: **Content**\r\n\r\n###### Fields\r\n\r\n* Text Input\r\n	* Label: **Title**\r\n	* Placement: **Main content**\r\n	* Validation Rule: (none)\r\n	* Make this a required field: **yes**\r\n	* Show column: **yes**\r\n* Textarea\r\n	* Label: **Description**\r\n	* Placement: **Main content**\r\n	* Make textarea **6** rows tall\r\n	* Make this a required field: **no**\r\n	* Text Formatter: **Markdown Extra plus SmartyPants**\r\n	* Show column: **no**\r\n* Textarea\r\n	* Label: **Body**\r\n	* Placement: **Main content**\r\n	* Make textarea **15** rows tall\r\n	* Make this a required field: **no**\r\n	* Text Formatter: **Markdown Extra plus SmartyPants**\r\n	* Show column: **no**\r\n* Select Box Link\r\n	* Label: **Section**\r\n	* Placement: **Sidebar**\r\n	* Options: **Sections: Title**\r\n	* Limit to the **20** most recent entries\r\n	* Allow selection of multiple options: **no**\r\n	* Make this a required field: **no**\r\n	* Show column: **yes**\r\n* Select Box Link\r\n	* Label: **Category**\r\n	* Placement: **Sidebar**\r\n	* Options: **Categories: Title**\r\n	* Limit to the **20** most recent entries\r\n	* Allow selection of multiple options: **no**\r\n	* Make this a required field: **no**\r\n	* Show column: **yes**\r\n* Tag List\r\n	* Label: **Tags**\r\n	* Placement: **Sidebar**\r\n	* Suggestion List: **Existing Values**\r\n	* Validation Rule: (none)\r\n	* Show column: **yes**\r\n* Date\r\n	* Label: **Date**\r\n	* Placement: **Sidebar**\r\n	* Pre-populate this field with today\'s date: **yes**\r\n	* Show column: **yes**\r\n* Checkbox\r\n	* Label: **Publish**\r\n	* Placement: **Sidebar**\r\n	* Long Description: (none)\r\n	* Checked by default: **yes**\r\n	* Show column: **yes**\r\n\r\n##### Items Section\r\n\r\nFinally, create the \"Items\" section with the following settings:\r\n\r\n###### Essentials\r\n\r\n* Name: **Items**\r\n* Navigation Group: **Content**\r\n\r\n###### Fields\r\n\r\n* Text Input\r\n	* Label: **Title**\r\n	* Placement: **Main content**\r\n	* Validation Rule: (none)\r\n	* Make this a required field: **yes**\r\n	* Show column: **yes**\r\n* Select Box Link\r\n	* Label: **Type**\r\n	* Placement: **Main content**\r\n	* Options: **Types: Title**\r\n	* Limit to the **20** most recent entries\r\n	* Allow selection of multiple options: **no**\r\n	* Make this a required field: **yes**\r\n	* Show column: **yes**\r\n* Select Box Link\r\n	* Label: **Entry**\r\n	* Placement: **Sidebar**\r\n	* Options: **Entries: Title**\r\n	* Limit to the **20** most recent entries\r\n	* Allow selection of multiple options: **no**\r\n	* Make this a required field: **no**\r\n	* Show column: **no**\r\n* Text Input\r\n	* Label: **URL**\r\n	* Placement: **Main content**\r\n	* Validation Rule: (none)\r\n	* Make this a required field: **no**\r\n	* Show column: **yes**\r\n* Textarea\r\n	* Label: **Description**\r\n	* Placement: **Main content**\r\n	* Make textarea **6** rows tall\r\n	* Make this a required field: **no**\r\n	* Text Formatter: **Markdown Extra plus SmartyPants**\r\n	* Show column: **no**\r\n* Textarea\r\n	* Label: **Body**\r\n	* Placement: **Main content**\r\n	* Make textarea **15** rows tall\r\n	* Make this a required field: **no**\r\n	* Text Formatter: **Markdown Extra plus SmartyPants**\r\n	* Show column: **no**\r\n* Select Box Link\r\n	* Label: **Category**\r\n	* Placement: **Sidebar**\r\n	* Options: **Categories: Title**\r\n	* Limit to the **20** most recent entries\r\n	* Allow selection of multiple options: **no**\r\n	* Make this a required field: **no**\r\n	* Show column: **no**\r\n* Tag List\r\n	* Label: **Tags**\r\n	* Placement: **Sidebar**\r\n	* Suggestion List: **Existing Values**\r\n	* Validation Rule: (none)\r\n	* Show column: **no**\r\n* Date\r\n	* Label: **Date**\r\n	* Placement: **Sidebar**\r\n	* Pre-populate this field with today\'s date: **yes**\r\n	* Show column: **yes**\r\n* Checkbox\r\n	* Label: **Publish**\r\n	* Placement: **Sidebar**\r\n	* Long Description: (none)\r\n	* Checked by default: **yes**\r\n	* Show column: **yes**\r\n* File Upload\r\n	* Label: **Image**\r\n	* Placement: **Main content**\r\n	* Destination Directory: **/workspace/images**\r\n	* Validation Rule: (none)\r\n	* Make this a required field: **no**\r\n	* Show column: **yes**\r\n* File Upload\r\n	* Label: **File**\r\n	* Placement: **Main content**\r\n	* Destination Directory: **/workspace/files**\r\n	* Validation Rule: (none)\r\n	* Make this a required field: **no**\r\n	* Show column: **yes**\r\n\r\n##### Data Structure and Backup System\r\n\r\nThis is the data structure of this site as of this writing. Feel free to keep the data structure of your site as simple or as complex as you like. You can always add or remove fields and sections as you like. But, be aware that removing sections and fields will also remove the associated data from the database. So, be careful.\r\n\r\nAs a simple backup system, it is a good idea to install the Export Ensemble extension. This extension will create a ZIP archive that contains everything needed to reproduce your entire site, except for your author settings and server/database configuration settings. You would install an ensemble in the same way you would install Symphony. The Symphony install file is itself an Ensemble. The Ensemble can be used to share site files, build themes or migrate sites from one server to another, or from a local test server to a production server.\r\n\r\nOf course, if you have several Authors, it would be far better to maintain a backup of the files and database that could be used to restore the entire site, including Authors, .htaccess files and configuration settings.\r\n', '<p>Don’t worry if you don’t have the integration branch installed. This simply means you won’t be able to organize sections into different menus in the Symphony admin area.</p>\n\n<p>For this site, I have created 5 sections. Two sections deal with metadata. Three sections deal with content.</p>\n\n<h4>Metadata Sections</h4>\n\n<p>First, let’s create the metadata sections:</p>\n\n<h5>Types Section</h5>\n\n<p>Navigate to Blueprints : Sections and create a new section with the following settings:</p>\n\n<h6>Essentials</h6>\n\n<ul>\n<li>Name: <strong>Types</strong></li>\n<li>Navigation Group: <strong>Meta</strong></li>\n</ul>\n\n<h6>Fields</h6>\n\n<ul>\n<li>Text Input\n\n<ul>\n<li>Label: <strong>Title</strong></li>\n<li>Placement: <strong>Main content</strong></li>\n<li>Validation Rule: (none)</li>\n<li>Make this a required field: <strong>yes</strong></li>\n<li>Show column: <strong>yes</strong></li>\n</ul></li>\n<li>Textarea\n\n<ul>\n<li>Label: <strong>Description</strong></li>\n<li>Placement: <strong>Main content</strong></li>\n<li>Make textarea <strong>15</strong> rows tall</li>\n<li>Make this a required field: <strong>no</strong></li>\n<li>Text Formatter: <strong>Markdown Extra plus SmartyPants</strong></li>\n<li>Show column: <strong>yes</strong></li>\n</ul></li>\n</ul>\n\n<h5>Categories Section</h5>\n\n<p>Next, create the &#8220;Categories&#8221; section with the following settings:</p>\n\n<h6>Essentials</h6>\n\n<ul>\n<li>Name: <strong>Types</strong></li>\n<li>Navigation Group: <strong>Meta</strong></li>\n</ul>\n\n<h6>Fields</h6>\n\n<ul>\n<li>Text Input\n\n<ul>\n<li>Label: <strong>Title</strong></li>\n<li>Placement: <strong>Main content</strong></li>\n<li>Validation Rule: (none)</li>\n<li>Make this a required field: <strong>yes</strong></li>\n<li>Show column: <strong>yes</strong></li>\n</ul></li>\n<li>Textarea\n\n<ul>\n<li>Label: <strong>Description</strong></li>\n<li>Placement: <strong>Main content</strong></li>\n<li>Make textarea <strong>6</strong> rows tall</li>\n<li>Make this a required field: <strong>no</strong></li>\n<li>Text Formatter: <strong>Markdown Extra plus SmartyPants</strong></li>\n<li>Show column: <strong>yes</strong></li>\n</ul></li>\n<li>Textarea\n\n<ul>\n<li>Label: <strong>Body</strong></li>\n<li>Placement: <strong>Main content</strong></li>\n<li>Make textarea <strong>15</strong> rows tall</li>\n<li>Make this a required field: <strong>no</strong></li>\n<li>Text Formatter: <strong>Markdown Extra plus SmartyPants</strong></li>\n<li>Show column: <strong>no</strong></li>\n</ul></li>\n</ul>\n\n<h5>Symphony Admin Navigation</h5>\n\n<p>If you are working with a clean install of Symphony, you will notice that once you have created the first section, a new menu item will be added to the Symphony admin menu. If you are using the version 2.0.2 integration branch, the name of the menu will be labelled with the name you designated as the Navigation Group. For earlier versions, all sections will appear in the Publish menu. To re-order the menu, navigate to Blueprints : Sections and drag the row for each section to a different position.</p>\n\n<h4>Content Sections</h4>\n\n<p>Now, let’s create the content sections:</p>\n\n<h5>Sections Section</h5>\n\n<p>Create a new section with the following settings. (<strong>Note</strong>: for the Parent Section select box link field, select Types:Title, save the section, then select Sections:Title. It is possible for a Select Box Link to select itself to be able to create hierarchies of sections, but the section must first be saved to make the section available in the list of options.)</p>\n\n<h6>Essentials</h6>\n\n<ul>\n<li>Name: <strong>Sections</strong></li>\n<li>Navigation Group: <strong>Content</strong></li>\n</ul>\n\n<h6>Fields</h6>\n\n<ul>\n<li>Text Input\n\n<ul>\n<li>Label: <strong>Title</strong></li>\n<li>Placement: <strong>Main content</strong></li>\n<li>Validation Rule: (none)</li>\n<li>Make this a required field: <strong>yes</strong></li>\n<li>Show column: <strong>yes</strong></li>\n</ul></li>\n<li>Textarea\n\n<ul>\n<li>Label: <strong>Description</strong></li>\n<li>Placement: <strong>Main content</strong></li>\n<li>Make textarea <strong>6</strong> rows tall</li>\n<li>Make this a required field: <strong>no</strong></li>\n<li>Text Formatter: <strong>Markdown Extra plus SmartyPants</strong></li>\n<li>Show column: <strong>yes</strong></li>\n</ul></li>\n<li>Textarea\n\n<ul>\n<li>Label: <strong>Body</strong></li>\n<li>Placement: <strong>Main content</strong></li>\n<li>Make textarea <strong>15</strong> rows tall</li>\n<li>Make this a required field: <strong>no</strong></li>\n<li>Text Formatter: <strong>Markdown Extra plus SmartyPants</strong></li>\n<li>Show column: <strong>no</strong></li>\n</ul></li>\n<li>Select Box Link\n\n<ul>\n<li>Label: <strong>Parent Section</strong></li>\n<li>Placement: <strong>Sidebar</strong></li>\n<li>Options: <strong>Sections: Title</strong></li>\n<li>Limit to the <strong>20</strong> most recent entries</li>\n<li>Allow selection of multiple options: <strong>no</strong></li>\n<li>Make this a required field: <strong>no</strong></li>\n<li>Show column: <strong>yes</strong></li>\n</ul></li>\n<li>Select Box\n\n<ul>\n<li>Label: <strong>Menu</strong></li>\n<li>Placement: <strong>Sidebar</strong></li>\n<li>Static Options: <strong>Main, Content</strong></li>\n<li>Dynamic Options: <strong>None</strong></li>\n<li>Allow selection of multiple options: <strong>no</strong></li>\n<li>Show column: <strong>yes</strong></li>\n</ul></li>\n<li>Entry Order\n\n<ul>\n<li>Label: <strong>Sort</strong></li>\n<li>Placement: <strong>Sidebar</strong></li>\n<li>Show column: <strong>yes</strong></li>\n</ul></li>\n</ul>\n\n<h5>Entries Section</h5>\n\n<p>Next, create the &#8220;Entries&#8221; section with the following settings:</p>\n\n<h6>Essentials</h6>\n\n<ul>\n<li>Name: <strong>Entries</strong></li>\n<li>Navigation Group: <strong>Content</strong></li>\n</ul>\n\n<h6>Fields</h6>\n\n<ul>\n<li>Text Input\n\n<ul>\n<li>Label: <strong>Title</strong></li>\n<li>Placement: <strong>Main content</strong></li>\n<li>Validation Rule: (none)</li>\n<li>Make this a required field: <strong>yes</strong></li>\n<li>Show column: <strong>yes</strong></li>\n</ul></li>\n<li>Textarea\n\n<ul>\n<li>Label: <strong>Description</strong></li>\n<li>Placement: <strong>Main content</strong></li>\n<li>Make textarea <strong>6</strong> rows tall</li>\n<li>Make this a required field: <strong>no</strong></li>\n<li>Text Formatter: <strong>Markdown Extra plus SmartyPants</strong></li>\n<li>Show column: <strong>no</strong></li>\n</ul></li>\n<li>Textarea\n\n<ul>\n<li>Label: <strong>Body</strong></li>\n<li>Placement: <strong>Main content</strong></li>\n<li>Make textarea <strong>15</strong> rows tall</li>\n<li>Make this a required field: <strong>no</strong></li>\n<li>Text Formatter: <strong>Markdown Extra plus SmartyPants</strong></li>\n<li>Show column: <strong>no</strong></li>\n</ul></li>\n<li>Select Box Link\n\n<ul>\n<li>Label: <strong>Section</strong></li>\n<li>Placement: <strong>Sidebar</strong></li>\n<li>Options: <strong>Sections: Title</strong></li>\n<li>Limit to the <strong>20</strong> most recent entries</li>\n<li>Allow selection of multiple options: <strong>no</strong></li>\n<li>Make this a required field: <strong>no</strong></li>\n<li>Show column: <strong>yes</strong></li>\n</ul></li>\n<li>Select Box Link\n\n<ul>\n<li>Label: <strong>Category</strong></li>\n<li>Placement: <strong>Sidebar</strong></li>\n<li>Options: <strong>Categories: Title</strong></li>\n<li>Limit to the <strong>20</strong> most recent entries</li>\n<li>Allow selection of multiple options: <strong>no</strong></li>\n<li>Make this a required field: <strong>no</strong></li>\n<li>Show column: <strong>yes</strong></li>\n</ul></li>\n<li>Tag List\n\n<ul>\n<li>Label: <strong>Tags</strong></li>\n<li>Placement: <strong>Sidebar</strong></li>\n<li>Suggestion List: <strong>Existing Values</strong></li>\n<li>Validation Rule: (none)</li>\n<li>Show column: <strong>yes</strong></li>\n</ul></li>\n<li>Date\n\n<ul>\n<li>Label: <strong>Date</strong></li>\n<li>Placement: <strong>Sidebar</strong></li>\n<li>Pre-populate this field with today&#8217;s date: <strong>yes</strong></li>\n<li>Show column: <strong>yes</strong></li>\n</ul></li>\n<li>Checkbox\n\n<ul>\n<li>Label: <strong>Publish</strong></li>\n<li>Placement: <strong>Sidebar</strong></li>\n<li>Long Description: (none)</li>\n<li>Checked by default: <strong>yes</strong></li>\n<li>Show column: <strong>yes</strong></li>\n</ul></li>\n</ul>\n\n<h5>Items Section</h5>\n\n<p>Finally, create the &#8220;Items&#8221; section with the following settings:</p>\n\n<h6>Essentials</h6>\n\n<ul>\n<li>Name: <strong>Items</strong></li>\n<li>Navigation Group: <strong>Content</strong></li>\n</ul>\n\n<h6>Fields</h6>\n\n<ul>\n<li>Text Input\n\n<ul>\n<li>Label: <strong>Title</strong></li>\n<li>Placement: <strong>Main content</strong></li>\n<li>Validation Rule: (none)</li>\n<li>Make this a required field: <strong>yes</strong></li>\n<li>Show column: <strong>yes</strong></li>\n</ul></li>\n<li>Select Box Link\n\n<ul>\n<li>Label: <strong>Type</strong></li>\n<li>Placement: <strong>Main content</strong></li>\n<li>Options: <strong>Types: Title</strong></li>\n<li>Limit to the <strong>20</strong> most recent entries</li>\n<li>Allow selection of multiple options: <strong>no</strong></li>\n<li>Make this a required field: <strong>yes</strong></li>\n<li>Show column: <strong>yes</strong></li>\n</ul></li>\n<li>Select Box Link\n\n<ul>\n<li>Label: <strong>Entry</strong></li>\n<li>Placement: <strong>Sidebar</strong></li>\n<li>Options: <strong>Entries: Title</strong></li>\n<li>Limit to the <strong>20</strong> most recent entries</li>\n<li>Allow selection of multiple options: <strong>no</strong></li>\n<li>Make this a required field: <strong>no</strong></li>\n<li>Show column: <strong>no</strong></li>\n</ul></li>\n<li>Text Input\n\n<ul>\n<li>Label: <strong>URL</strong></li>\n<li>Placement: <strong>Main content</strong></li>\n<li>Validation Rule: (none)</li>\n<li>Make this a required field: <strong>no</strong></li>\n<li>Show column: <strong>yes</strong></li>\n</ul></li>\n<li>Textarea\n\n<ul>\n<li>Label: <strong>Description</strong></li>\n<li>Placement: <strong>Main content</strong></li>\n<li>Make textarea <strong>6</strong> rows tall</li>\n<li>Make this a required field: <strong>no</strong></li>\n<li>Text Formatter: <strong>Markdown Extra plus SmartyPants</strong></li>\n<li>Show column: <strong>no</strong></li>\n</ul></li>\n<li>Textarea\n\n<ul>\n<li>Label: <strong>Body</strong></li>\n<li>Placement: <strong>Main content</strong></li>\n<li>Make textarea <strong>15</strong> rows tall</li>\n<li>Make this a required field: <strong>no</strong></li>\n<li>Text Formatter: <strong>Markdown Extra plus SmartyPants</strong></li>\n<li>Show column: <strong>no</strong></li>\n</ul></li>\n<li>Select Box Link\n\n<ul>\n<li>Label: <strong>Category</strong></li>\n<li>Placement: <strong>Sidebar</strong></li>\n<li>Options: <strong>Categories: Title</strong></li>\n<li>Limit to the <strong>20</strong> most recent entries</li>\n<li>Allow selection of multiple options: <strong>no</strong></li>\n<li>Make this a required field: <strong>no</strong></li>\n<li>Show column: <strong>no</strong></li>\n</ul></li>\n<li>Tag List\n\n<ul>\n<li>Label: <strong>Tags</strong></li>\n<li>Placement: <strong>Sidebar</strong></li>\n<li>Suggestion List: <strong>Existing Values</strong></li>\n<li>Validation Rule: (none)</li>\n<li>Show column: <strong>no</strong></li>\n</ul></li>\n<li>Date\n\n<ul>\n<li>Label: <strong>Date</strong></li>\n<li>Placement: <strong>Sidebar</strong></li>\n<li>Pre-populate this field with today&#8217;s date: <strong>yes</strong></li>\n<li>Show column: <strong>yes</strong></li>\n</ul></li>\n<li>Checkbox\n\n<ul>\n<li>Label: <strong>Publish</strong></li>\n<li>Placement: <strong>Sidebar</strong></li>\n<li>Long Description: (none)</li>\n<li>Checked by default: <strong>yes</strong></li>\n<li>Show column: <strong>yes</strong></li>\n</ul></li>\n<li>File Upload\n\n<ul>\n<li>Label: <strong>Image</strong></li>\n<li>Placement: <strong>Main content</strong></li>\n<li>Destination Directory: <strong>/workspace/images</strong></li>\n<li>Validation Rule: (none)</li>\n<li>Make this a required field: <strong>no</strong></li>\n<li>Show column: <strong>yes</strong></li>\n</ul></li>\n<li>File Upload\n\n<ul>\n<li>Label: <strong>File</strong></li>\n<li>Placement: <strong>Main content</strong></li>\n<li>Destination Directory: <strong>/workspace/files</strong></li>\n<li>Validation Rule: (none)</li>\n<li>Make this a required field: <strong>no</strong></li>\n<li>Show column: <strong>yes</strong></li>\n</ul></li>\n</ul>\n\n<h5>Data Structure and Backup System</h5>\n\n<p>This is the data structure of this site as of this writing. Feel free to keep the data structure of your site as simple or as complex as you like. You can always add or remove fields and sections as you like. But, be aware that removing sections and fields will also remove the associated data from the database. So, be careful.</p>\n\n<p>As a simple backup system, it is a good idea to install the Export Ensemble extension. This extension will create a ZIP archive that contains everything needed to reproduce your entire site, except for your author settings and server/database configuration settings. You would install an ensemble in the same way you would install Symphony. The Symphony install file is itself an Ensemble. The Ensemble can be used to share site files, build themes or migrate sites from one server to another, or from a local test server to a production server.</p>\n\n<p>Of course, if you have several Authors, it would be far better to maintain a backup of the files and database that could be used to restore the entire site, including Authors, .htaccess files and configuration settings.</p>\n');
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (155, 39, '#### Sections Data Sources\r\n\r\nTo view or create data sources, navigate to Blueprints : Components. I created four data sources and attached them to the Journal page: Entries, Entry, Section and Navigation.\r\n\r\n##### Entries Data Source\r\n\r\nThe Entries data source provides an overview of the 50 most recent entries. This data source excludes the \"body\" field to keep the XML output from being unnecessarily large, since we only need enough information to display the title and a short description of each entry, with the possibility of including some metadata information regarding date, category and tags.\r\n\r\n###### Essentials\r\n\r\n* Name: Entries\r\n* Source: Entries\r\n\r\n###### Filter Results\r\n\r\n* Publish (checkbox): Value: Yes\r\n\r\n###### Sorting and Limiting\r\n\r\n* Sort By: Date\r\n* Sort Order: descending\r\n* Show a Maximum of 50 results\r\n* Show Page 1 of results\r\n* Required URL Parameter: (none)\r\n* Redirect to 404 page when no results are found: no\r\n\r\n###### Output Options\r\n\r\n* Parameter Output: Use Field: (None)\r\n* XML Output: Group By: (None)\r\n* Included Elements: pagination, title, description, section, category, tags, date\r\n\r\n##### Entry Data Source\r\n\r\nThe Entry data source provides the complete XML data for a single entry: all available fields have been included. A URL parameter of \"entry\" has been specified for the Journal page. The Entry data source is configured to filter the XML output to include only those entries where the Title field matches the $entry parameter. Also, the data source will output XML only if the $entry parameter has a value. \r\n\r\n###### Essentials\r\n\r\n* Name: Entry\r\n* Source: Entries\r\n\r\n###### Filter Results\r\n\r\n* Title (text input): Value: {$entry}\r\n\r\n###### Sorting and Limiting\r\n\r\n* Sort By: System ID\r\n* Sort Order: descending\r\n* Show a Maximum of 20 results\r\n* Show Page 1 of results\r\n* Required URL Parameter: {$entry}\r\n* Redirect to 404 page when no results are found: no\r\n\r\n###### Output Options\r\n\r\n* Parameter Output: Use Field: (None)\r\n* XML Output: Group By: (None)\r\n* Included Elements: pagination, title, description, body, section, category, tags, date, publish\r\n\r\n##### Section Data Source\r\n\r\nThe Section data source provides a means of filtering entries by section. The results of the data source are filtered to include only those sections where the Title field matches the `$current-page` parameter. Under Output Options, the System ID numbers will be output for every section included in the XML output as a page parameter with the name `$ds-section`. Since this data source will filter sections by the `$current-page` parameter, there should only be a single section in the XML output. Since a Select Box Link can only be filtered by an ID number, we can use this ID number from the `$ds-section` parameter to filter other data sources.\r\n\r\n###### Essentials\r\n\r\n* Name: Section\r\n* Source: Sections\r\n\r\n###### Filter Results\r\n\r\n* Title (text input): Value: {$current-page}\r\n\r\n###### Sorting and Limiting\r\n\r\n* Sort By: System ID\r\n* Sort Order: descending\r\n* Show a Maximum of 20 results\r\n* Show Page 1 of results\r\n* Required URL Parameter: (none)\r\n* Redirect to 404 page when no results are found: no\r\n\r\n###### Output Options\r\n\r\n* Parameter Output: Use Field: System ID\r\n* XML Output: Group By: (None)\r\n* Included Elements: title, description, body, parent-section, menu\r\n\r\n#### System Data Sources\r\n\r\nTwo types of system data are available as data sources in a default Symphony install: Authors and Navigation.\r\n\r\nAn Authors data source can be created to output XML data for the Symphony admin Authors. This can allow for different views and features for different types of Authors or when distinguishing between admin users and the general public. For example, the default Symphony theme, Spectrum, uses the Authors data source to display certain features and pages on the front end of the site only when the owner of a website is logged into the admin area.\r\n\r\nThe Navigation data source provides the XML data that describes the hierarchical structure of the pages created in Blueprints : Pages. If pages have been configured with parent pages, the XML will reflect the relationship with a nested node structure, with parent pages output as parent or ancestor nodes of the child or descendant pages.\r\n\r\n##### Navigation Data Source\r\n\r\nThe main navigation menu for this site uses a Navigation data source with the following settings:\r\n\r\n###### Essentials\r\n\r\n* Name: Navigation\r\n* Source: Navigation\r\n\r\n###### Filter Results\r\n\r\n* (none)\r\n\r\n###### Sorting and Limiting\r\n* Required URL Parameter: (none)\r\n* Redirect to 404 page when no results are found: no\r\n\r\n#### Custom Data Sources\r\n\r\nCustom data sources can be created as either Dynamic XML or Static XML. Dynamic XML data sources can dynamically pull and cache any valid XML from various online sources. The most common source would be RSS feeds, which use a specific XML schema. Several web services use XML as part of their application programming interface (API), such as Flickr, Delicious, etc.\r\n\r\nStatic XML can be used to include any valid XML in the XML output. It is also possible to use the document() function in the XSLT page template, but this XML will not show up on the ?debug page. \r\n\r\n#### Data Source Extensions\r\n\r\nExtensions can be used to provide additional data sources for those parts of the admin area not covered by the default data sources. For example, the Section Schema extension can be used to create data sources to output XML data that define the structure and settings for sections and fields. Theoretically, these can then be used to recreate the admin area using XML and XSLT instead of PHP. In fact, the future direction of Symphony development proposes an XML and XSLT implementation of the admin area that will allow those with XSLT skills to develop extensions and improvements to the admin area without requiring PHP programming skills.\r\n', '<h4>Sections Data Sources</h4>\n\n<p>To view or create data sources, navigate to Blueprints : Components. I created four data sources and attached them to the Journal page: Entries, Entry, Section and Navigation.</p>\n\n<h5>Entries Data Source</h5>\n\n<p>The Entries data source provides an overview of the 50 most recent entries. This data source excludes the &#8220;body&#8221; field to keep the XML output from being unnecessarily large, since we only need enough information to display the title and a short description of each entry, with the possibility of including some metadata information regarding date, category and tags.</p>\n\n<h6>Essentials</h6>\n\n<ul>\n<li>Name: Entries</li>\n<li>Source: Entries</li>\n</ul>\n\n<h6>Filter Results</h6>\n\n<ul>\n<li>Publish (checkbox): Value: Yes</li>\n</ul>\n\n<h6>Sorting and Limiting</h6>\n\n<ul>\n<li>Sort By: Date</li>\n<li>Sort Order: descending</li>\n<li>Show a Maximum of 50 results</li>\n<li>Show Page 1 of results</li>\n<li>Required URL Parameter: (none)</li>\n<li>Redirect to 404 page when no results are found: no</li>\n</ul>\n\n<h6>Output Options</h6>\n\n<ul>\n<li>Parameter Output: Use Field: (None)</li>\n<li>XML Output: Group By: (None)</li>\n<li>Included Elements: pagination, title, description, section, category, tags, date</li>\n</ul>\n\n<h5>Entry Data Source</h5>\n\n<p>The Entry data source provides the complete XML data for a single entry: all available fields have been included. A URL parameter of &#8220;entry&#8221; has been specified for the Journal page. The Entry data source is configured to filter the XML output to include only those entries where the Title field matches the $entry parameter. Also, the data source will output XML only if the $entry parameter has a value.</p>\n\n<h6>Essentials</h6>\n\n<ul>\n<li>Name: Entry</li>\n<li>Source: Entries</li>\n</ul>\n\n<h6>Filter Results</h6>\n\n<ul>\n<li>Title (text input): Value: {$entry}</li>\n</ul>\n\n<h6>Sorting and Limiting</h6>\n\n<ul>\n<li>Sort By: System ID</li>\n<li>Sort Order: descending</li>\n<li>Show a Maximum of 20 results</li>\n<li>Show Page 1 of results</li>\n<li>Required URL Parameter: {$entry}</li>\n<li>Redirect to 404 page when no results are found: no</li>\n</ul>\n\n<h6>Output Options</h6>\n\n<ul>\n<li>Parameter Output: Use Field: (None)</li>\n<li>XML Output: Group By: (None)</li>\n<li>Included Elements: pagination, title, description, body, section, category, tags, date, publish</li>\n</ul>\n\n<h5>Section Data Source</h5>\n\n<p>The Section data source provides a means of filtering entries by section. The results of the data source are filtered to include only those sections where the Title field matches the <code>$current-page</code> parameter. Under Output Options, the System ID numbers will be output for every section included in the XML output as a page parameter with the name <code>$ds-section</code>. Since this data source will filter sections by the <code>$current-page</code> parameter, there should only be a single section in the XML output. Since a Select Box Link can only be filtered by an ID number, we can use this ID number from the <code>$ds-section</code> parameter to filter other data sources.</p>\n\n<h6>Essentials</h6>\n\n<ul>\n<li>Name: Section</li>\n<li>Source: Sections</li>\n</ul>\n\n<h6>Filter Results</h6>\n\n<ul>\n<li>Title (text input): Value: {$current-page}</li>\n</ul>\n\n<h6>Sorting and Limiting</h6>\n\n<ul>\n<li>Sort By: System ID</li>\n<li>Sort Order: descending</li>\n<li>Show a Maximum of 20 results</li>\n<li>Show Page 1 of results</li>\n<li>Required URL Parameter: (none)</li>\n<li>Redirect to 404 page when no results are found: no</li>\n</ul>\n\n<h6>Output Options</h6>\n\n<ul>\n<li>Parameter Output: Use Field: System ID</li>\n<li>XML Output: Group By: (None)</li>\n<li>Included Elements: title, description, body, parent-section, menu</li>\n</ul>\n\n<h4>System Data Sources</h4>\n\n<p>Two types of system data are available as data sources in a default Symphony install: Authors and Navigation.</p>\n\n<p>An Authors data source can be created to output XML data for the Symphony admin Authors. This can allow for different views and features for different types of Authors or when distinguishing between admin users and the general public. For example, the default Symphony theme, Spectrum, uses the Authors data source to display certain features and pages on the front end of the site only when the owner of a website is logged into the admin area.</p>\n\n<p>The Navigation data source provides the XML data that describes the hierarchical structure of the pages created in Blueprints : Pages. If pages have been configured with parent pages, the XML will reflect the relationship with a nested node structure, with parent pages output as parent or ancestor nodes of the child or descendant pages.</p>\n\n<h5>Navigation Data Source</h5>\n\n<p>The main navigation menu for this site uses a Navigation data source with the following settings:</p>\n\n<h6>Essentials</h6>\n\n<ul>\n<li>Name: Navigation</li>\n<li>Source: Navigation</li>\n</ul>\n\n<h6>Filter Results</h6>\n\n<ul>\n<li>(none)</li>\n</ul>\n\n<h6>Sorting and Limiting</h6>\n\n<ul>\n<li>Required URL Parameter: (none)</li>\n<li>Redirect to 404 page when no results are found: no</li>\n</ul>\n\n<h4>Custom Data Sources</h4>\n\n<p>Custom data sources can be created as either Dynamic XML or Static XML. Dynamic XML data sources can dynamically pull and cache any valid XML from various online sources. The most common source would be RSS feeds, which use a specific XML schema. Several web services use XML as part of their application programming interface (API), such as Flickr, Delicious, etc.</p>\n\n<p>Static XML can be used to include any valid XML in the XML output. It is also possible to use the document() function in the XSLT page template, but this XML will not show up on the ?debug page.</p>\n\n<h4>Data Source Extensions</h4>\n\n<p>Extensions can be used to provide additional data sources for those parts of the admin area not covered by the default data sources. For example, the Section Schema extension can be used to create data sources to output XML data that define the structure and settings for sections and fields. Theoretically, these can then be used to recreate the admin area using XML and XSLT instead of PHP. In fact, the future direction of Symphony development proposes an XML and XSLT implementation of the admin area that will allow those with XSLT skills to develop extensions and improvements to the admin area without requiring PHP programming skills.</p>\n');
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (159, 29, '#### Page\r\n\r\nFirst, create the home page. Navigate to Blueprints : Pages and click on the Create New button.\r\n\r\n##### The Index Page\r\n\r\nThe index page is a special type of page that is designated as the root of your site. There can only be one page with a type of `index`. If the home page does not have the `index` page type assigned to it, Symphony will throw an error:\r\n\r\n> The page you requested does not exist.\r\n\r\nOther pages do not require a page type, so, for all other pages, the Page Type field is optional.\r\n\r\n##### URL Handle\r\n\r\nThe URL handle is the text string that can be used to identify an entry in a URL. If you do not specify a URL handle, Symphony automatically modifies the string supplied in the Title field, transforming uppercase characters to lowercase characters and turning space characters into hyphens to create the handle.\r\n\r\nUse the following settings to configure the page:\r\n\r\n###### URL Settings\r\n\r\n* Parent Page: /\r\n* URL Handle: home\r\n* URL Parameters: (none)\r\n\r\n###### Page Metadata\r\n\r\n* Events: (none)\r\n* Data Sources: (none)\r\n* Page Type: index **(this is important)**\r\n\r\n###### Page Data\r\n\r\n* Title: Home\r\n* Body: (see the page template below)\r\n* Utilities: (none)\r\n\r\n#### The Page Template\r\n\r\nSymphony uses XSLT as its templating system. XSLT is a W3C recommendation. It\'s strength is in its ability to transform XML into XML, Text, HTML or XHTML with the ability to use conditionals, recursion, and a number of math and string manipulation functions. This skeleton XSL stylesheet provides the minimum necessary to create a web page with an XHTML 1.0 Strict doctype.\r\n\r\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n    <xsl:stylesheet version=\"1.0\"\r\n	    xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n    \r\n    <xsl:output method=\"xml\"\r\n	    doctype-public=\"-//W3C//DTD XHTML 1.0 Strict//EN\"\r\n	    doctype-system=\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\r\n	    omit-xml-declaration=\"yes\"\r\n	    encoding=\"UTF-8\"\r\n	    indent=\"yes\" />\r\n    \r\n    <xsl:template match=\"/\">\r\n    <html>\r\n    <head>\r\n        <title>Hello</title>\r\n    </head>\r\n    <body>\r\n        <h1>Hello, world</h1>\r\n    </body>\r\n    </html>\r\n    </xsl:template>\r\n    \r\n    </xsl:stylesheet>\r\n\r\nView the example [XSLT template](/workspace/pages/tutorials_examples_hello.xsl) and [HTML output](/tutorials/examples/hello/).\r\n\r\nSo, you can have one XSL stylesheet that contains several XSL templates that do a number of different things. But, we’ll find out about that later. Just be aware that everything is based on XML, so everything has to be “well-formed” or “valid” XML. And that includes the HTML.\r\n', '<h4>Page</h4>\n\n<p>First, create the home page. Navigate to Blueprints : Pages and click on the Create New button.</p>\n\n<h5>The Index Page</h5>\n\n<p>The index page is a special type of page that is designated as the root of your site. There can only be one page with a type of <code>index</code>. If the home page does not have the <code>index</code> page type assigned to it, Symphony will throw an error:</p>\n\n<blockquote>\n  <p>The page you requested does not exist.</p>\n</blockquote>\n\n<p>Other pages do not require a page type, so, for all other pages, the Page Type field is optional.</p>\n\n<h5>URL Handle</h5>\n\n<p>The URL handle is the text string that can be used to identify an entry in a URL. If you do not specify a URL handle, Symphony automatically modifies the string supplied in the Title field, transforming uppercase characters to lowercase characters and turning space characters into hyphens to create the handle.</p>\n\n<p>Use the following settings to configure the page:</p>\n\n<h6>URL Settings</h6>\n\n<ul>\n<li>Parent Page: /</li>\n<li>URL Handle: home</li>\n<li>URL Parameters: (none)</li>\n</ul>\n\n<h6>Page Metadata</h6>\n\n<ul>\n<li>Events: (none)</li>\n<li>Data Sources: (none)</li>\n<li>Page Type: index <strong>(this is important)</strong></li>\n</ul>\n\n<h6>Page Data</h6>\n\n<ul>\n<li>Title: Home</li>\n<li>Body: (see the page template below)</li>\n<li>Utilities: (none)</li>\n</ul>\n\n<h4>The Page Template</h4>\n\n<p>Symphony uses XSLT as its templating system. XSLT is a W3C recommendation. It&#8217;s strength is in its ability to transform XML into XML, Text, HTML or XHTML with the ability to use conditionals, recursion, and a number of math and string manipulation functions. This skeleton XSL stylesheet provides the minimum necessary to create a web page with an XHTML 1.0 Strict doctype.</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;xsl:stylesheet version=\"1.0\"\n    xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;\n\n&lt;xsl:output method=\"xml\"\n    doctype-public=\"-//W3C//DTD XHTML 1.0 Strict//EN\"\n    doctype-system=\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\n    omit-xml-declaration=\"yes\"\n    encoding=\"UTF-8\"\n    indent=\"yes\" /&gt;\n\n&lt;xsl:template match=\"/\"&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Hello&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hello, world&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;/xsl:template&gt;\n\n&lt;/xsl:stylesheet&gt;\n</code></pre>\n\n<p>View the example <a href=\"/workspace/pages/tutorials_examples_hello.xsl\">XSLT template</a> and <a href=\"/tutorials/examples/hello/\">HTML output</a>.</p>\n\n<p>So, you can have one XSL stylesheet that contains several XSL templates that do a number of different things. But, we’ll find out about that later. Just be aware that everything is based on XML, so everything has to be “well-formed” or “valid” XML. And that includes the HTML.</p>\n');
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (164, 40, 'The purpose of configuring data sources is to produce the XML output that XSLT page templates can process to create XML, HTML or text to render to the browser. For Symphony, the goal is usually to produce HTML. The smaller the XML data source, the faster it is to build the XML, the sooner the processor can render the HTML and serve the page to the browser. So, it is important to optimize the XML output to include only what is necessary to build the page. The options to filter, sort, limit and paginate the data sources provide several options to optimize the performance of the site. Symphony provides a means of being able to view the XSLT Page Parameters, the XML data, and to analyze performance data by providing debug information in the browser.\r\n\r\nIf an admin user or Author is logged in to the Symphony admin, front end pages are given the ability to display debug information. Simply add `?debug` to the page URL to view Page Parameters, XML Output, XSLT page templates and utilities, Result and Profile data. Refer to the [documentation](http://symphony-cms.com/documentation/templating/#sec-4) for more information.\r\n\r\n#### Page Parameters\r\n\r\nThe following page parameters are available for use in XSLT page templates to provide information about the current date and time, the selected page, path and URL, and other details about the site and user data.\r\n\r\n* $today\r\n* $current-time\r\n* $this-year\r\n* $this-month\r\n* $this-day\r\n* $timezone\r\n* $website-name\r\n* $page-title\r\n* $root\r\n* $workspace\r\n* $root-page\r\n* $current-page\r\n* $current-page-id\r\n* $current-path\r\n* $parent-path\r\n* $current-url\r\n* $upload-limit\r\n* $symphony-build\r\n* $entry\r\n* $cookie-username\r\n* $cookie-pass\r\n\r\nCustom data source parameters, created when specifying Parameter Output Options for data sources, are added at the bottom of the list. For example, when I created the Section data source, I configured the Parameter Output to use the System ID field. This custom data source parameter will appear at the bottom of the list of parameters in the parameter pool.\r\n\r\n* $ds-section\r\n\r\nBy filtering this data source to include only those entries where the Title field matched the $current-page parameter, I ensure that the Data Source Parameter for the Section data source will output a single ID number. I can then use this ID number to filter other data sources. \r\n\r\n##### Global Parameter Loader Extension\r\n\r\nUsing the [Global Parameter Loader](http://github.com/carsten/globalparamloader/) extension, it is possible to add sets of parameters to Symphony\'s parameter pool while excluding specified pages. Parameter values can be created by valid PHP code.\r\n\r\n#### XML\r\n\r\nThe XML output is built by Symphony from the data sources attached to a page. Symphony queries the MySQL database and builds the XML with `data` as the root node. Each section is added as a child node of the `data` node with an element name equal to the url-encoded string value of the section label. Each section entry is included as a child of the section node with the element name `entry` and an `id` attribute indicating the System ID. Each entry node has a child node for every field specified as Included Elements in the data source configuration. Fields with the possibility of multiple values will contain `item` nodes for each value.\r\n\r\n##### Example XML Output\r\n\r\nThe XML for [this test entry](http://designprojectx.com/journal/the-title-of-my-entry/) looks like this:\r\n\r\n	<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n	<data>\r\n		<events />\r\n		<categories>\r\n			<section id=\"3\" handle=\"categories\">Categories</section>\r\n			<entry id=\"11\" entries=\"0\" items=\"0\">\r\n				<title handle=\"applications\">Applications</title>\r\n			</entry>\r\n			<entry id=\"12\" entries=\"0\" items=\"0\">\r\n				<title handle=\"design\">Design</title>\r\n			</entry>\r\n			<entry id=\"13\" entries=\"0\" items=\"0\">\r\n				<title handle=\"history\">History</title>\r\n			</entry>\r\n			<entry id=\"14\" entries=\"0\" items=\"0\">\r\n				<title handle=\"ideas\">Ideas</title>\r\n			</entry>\r\n			<entry id=\"15\" entries=\"20\" items=\"0\">\r\n				<title handle=\"technology\">Technology</title>\r\n			</entry>\r\n		</categories>\r\n		<entries>\r\n			<pagination total-entries=\"21\" total-pages=\"1\" entries-per-page=\"50\" current-page=\"1\" />\r\n			<section id=\"4\" handle=\"entries\">Entries</section>\r\n			<entry id=\"40\" items=\"0\">\r\n				<title handle=\"xml-output-and-the-debug-page\">XML Output and the Debug Page</title>\r\n				<description word-count=\"50\"><p>Once the sections have been set up and the data sources have been configured in Symphony, XML output can be attached to a page to be processed using the XSLT page template specified in the Body field of the page configuration. The result document can be XML, HTML or text.</p></description>\r\n				<section>\r\n					<item handle=\"tutorials\" id=\"37\">Tutorials</item>\r\n				</section>\r\n				<category>\r\n					<item handle=\"technology\" id=\"15\">Technology</item>\r\n				</category>\r\n				<date time=\"20:31\" weekday=\"3\">2009-05-20</date>\r\n				<tags>\r\n					<item handle=\"symphony-cms\">symphony cms</item>\r\n					<item handle=\"xslt\">xslt</item>\r\n				</tags>\r\n			</entry>\r\n			<entry id=\"39\" items=\"0\">\r\n				<title handle=\"symphony-data-sources\">Symphony Data Sources</title>\r\n				<description word-count=\"43\"><p>Once the sections have been set up in Symphony, data sources can be configured to output XML that can be used by the XSLT page templates to output HTML pages. These are the data sources that have been used to create this site.</p></description>\r\n				<section>\r\n					<item handle=\"tutorials\" id=\"37\">Tutorials</item>\r\n				</section>\r\n				<category>\r\n					<item handle=\"technology\" id=\"15\">Technology</item>\r\n				</category>\r\n				<date time=\"14:47\" weekday=\"3\">2009-05-20</date>\r\n				<tags>\r\n					<item handle=\"symphony-cms\">symphony cms</item>\r\n				</tags>\r\n			</entry>\r\n			<entry id=\"38\" items=\"0\">\r\n				<title handle=\"symphony-sections\">Symphony Sections</title>\r\n				<description word-count=\"45\"><p>In Symphony, creating Sections is a way of dynamically creating the database structure for your site and the navigation system of the Symphony admin area. This tutorial assumes that you have installed the integration branch of Symphony 2.0.2 from Github (although, this is not essential).</p></description>\r\n				<section>\r\n					<item handle=\"tutorials\" id=\"37\">Tutorials</item>\r\n				</section>\r\n				<category>\r\n					<item handle=\"technology\" id=\"15\">Technology</item>\r\n				</category>\r\n				<date time=\"09:45\" weekday=\"3\">2009-05-20</date>\r\n				<tags>\r\n					<item handle=\"symphony-cms\">symphony cms</item>\r\n				</tags>\r\n			</entry>\r\n			<entry id=\"36\" items=\"0\">\r\n				<title handle=\"beyond-hello-an-xslt-page-template\">Beyond Hello: An XSLT Page Template</title>\r\n				<description word-count=\"43\"><p>I started with the basic <a href=\"http://www.designprojectx.com/tutorials/hello-world-a-basic-xsl-stylesheet/\">Hello World</a> example. This tutorial assumes that <a href=\"http://www.designprojectx.com/tutorials/symphony-sections/\">sections</a> have been created in Symphony and <a href=\"http://www.designprojectx.com/tutorials/symphony-data-sources/\">data sources</a> attached to a page. This example shows how I developed the page template that displays the entries that you are currently reading.</p></description>\r\n				<section>\r\n					<item handle=\"tutorials\" id=\"37\">Tutorials</item>\r\n				</section>\r\n				<category>\r\n					<item handle=\"technology\" id=\"15\">Technology</item>\r\n				</category>\r\n				<date time=\"08:14\" weekday=\"3\">2009-05-20</date>\r\n				<tags>\r\n					<item handle=\"symphony-cms\">symphony cms</item>\r\n					<item handle=\"xslt\">xslt</item>\r\n				</tags>\r\n			</entry>\r\n			<entry id=\"35\" items=\"0\">\r\n				<title handle=\"xslt-glossary\">XSLT Glossary</title>\r\n				<description word-count=\"47\"><p><a href=\"http://symphony-cms.com/members/TheJester12/\">Jesse Sutherland</a> raised some questions about <a href=\"http://symphony-cms.com/forum/discussions/21437/\">learning symphony</a> on the Symphony forum. It seems to be a good time to further develop the documentation and add some tutorials to help beginners get acquainted with the system. A glossary of terms might be a good place to start.</p></description>\r\n				<section>\r\n					<item handle=\"journal\" id=\"17\">Journal</item>\r\n				</section>\r\n				<category>\r\n					<item handle=\"technology\" id=\"15\">Technology</item>\r\n				</category>\r\n				<date time=\"07:53\" weekday=\"3\">2009-05-20</date>\r\n				<tags>\r\n					<item handle=\"xslt\">xslt</item>\r\n				</tags>\r\n			</entry>\r\n			<entry id=\"34\" items=\"0\">\r\n				<title handle=\"viewing-entries-as-xml\">Viewing Entries as XML</title>\r\n				<description word-count=\"47\"><p>To make the process of saving XML files of each entry a little easier, I thought I could create an XSL stylesheet that would output the XML of a single entry. I ended up using Marc Liyanage&#8217;s XML Pretty Printer template to create nicely indented XML files.</p></description>\r\n				<section>\r\n					<item handle=\"journal\" id=\"17\">Journal</item>\r\n				</section>\r\n				<category>\r\n					<item handle=\"technology\" id=\"15\">Technology</item>\r\n				</category>\r\n				<date time=\"08:59\" weekday=\"1\">2009-05-18</date>\r\n				<tags>\r\n					<item handle=\"xslt\">xslt</item>\r\n				</tags>\r\n			</entry>\r\n			<entry id=\"33\" items=\"0\">\r\n				<title handle=\"symphony-utilities\">Symphony Utilities</title>\r\n				<description word-count=\"30\"><p>Utilities are XSLT templates that can be used for a number of different applications. XML can be transformed into text, html, or xml, so the applications can be virtually limitless.</p></description>\r\n				<section>\r\n					<item handle=\"journal\" id=\"17\">Journal</item>\r\n				</section>\r\n				<category>\r\n					<item handle=\"technology\" id=\"15\">Technology</item>\r\n				</category>\r\n				<date time=\"17:48\" weekday=\"7\">2009-05-17</date>\r\n				<tags>\r\n					<item handle=\"symphony-cms\">symphony cms</item>\r\n				</tags>\r\n			</entry>\r\n			<entry id=\"27\" items=\"0\">\r\n				<title handle=\"maintaining-a-simple-backup-system-in-symphony\">Maintaining a Simple Backup System in Symphony</title>\r\n				<description word-count=\"48\"><p>I want to be able to have easy access to all my site content. I also want to be able to write the content in a text editor so that I can use the features that help the writing process go a lot smoother, such as multiple undos.</p></description>\r\n				<section>\r\n					<item handle=\"journal\" id=\"17\">Journal</item>\r\n				</section>\r\n				<category>\r\n					<item handle=\"technology\" id=\"15\">Technology</item>\r\n				</category>\r\n				<date time=\"08:18\" weekday=\"7\">2009-05-17</date>\r\n			</entry>\r\n			<entry id=\"23\" items=\"0\">\r\n				<title handle=\"symphony-extensions\">Symphony Extensions</title>\r\n				<description word-count=\"49\"><p>To get the most out of Symphony, we&#8217;re going to need to extend the core system using extensions. Out of the box, Symphony provides some very powerful features. But it assumes nothing about the type of site that we create. To extend the system, let&#8217;s explore the available extensions.</p></description>\r\n				<section>\r\n					<item handle=\"tutorials\" id=\"37\">Tutorials</item>\r\n				</section>\r\n				<category>\r\n					<item handle=\"technology\" id=\"15\">Technology</item>\r\n				</category>\r\n				<date time=\"13:46\" weekday=\"6\">2009-05-16</date>\r\n				<tags>\r\n					<item handle=\"extensions\">extensions</item>\r\n					<item handle=\"symphony-cms\">symphony cms</item>\r\n				</tags>\r\n			</entry>\r\n			<entry id=\"21\" items=\"0\">\r\n				<title handle=\"spreading-myself-too-thin\">Spreading Myself Too Thin</title>\r\n				<description word-count=\"23\"><p>So, I&#8217;ve got failed, half-finished, barely started web development / social media experiments scattered all over the web. Let&#8217;s see if I can remember:</p></description>\r\n				<section>\r\n					<item handle=\"journal\" id=\"17\">Journal</item>\r\n				</section>\r\n				<category>\r\n					<item handle=\"technology\" id=\"15\">Technology</item>\r\n				</category>\r\n				<date time=\"11:19\" weekday=\"6\">2009-05-16</date>\r\n			</entry>\r\n			<entry id=\"20\" items=\"0\">\r\n				<title handle=\"under-construction\">Under Construction</title>\r\n				<description word-count=\"9\"><p>Continuing with my live build of a Symphony site</p></description>\r\n				<section>\r\n					<item handle=\"journal\" id=\"17\">Journal</item>\r\n				</section>\r\n				<category>\r\n					<item handle=\"technology\" id=\"15\">Technology</item>\r\n				</category>\r\n				<date time=\"09:40\" weekday=\"6\">2009-05-16</date>\r\n			</entry>\r\n			<entry id=\"19\" items=\"0\">\r\n				<title handle=\"rapid-interactive-prototyping\">Rapid Interactive Prototyping</title>\r\n				<description word-count=\"36\"><p>I credit Andy Clarke with the idea of improving the approach of working with wireframes by using the Grey Box Method. I highly recommend his book, Trancending CSS, for both the fantastic content and beautiful design.</p></description>\r\n				<section>\r\n					<item handle=\"journal\" id=\"17\">Journal</item>\r\n				</section>\r\n				<category>\r\n					<item handle=\"technology\" id=\"15\">Technology</item>\r\n				</category>\r\n				<date time=\"08:46\" weekday=\"4\">2009-05-07</date>\r\n			</entry>\r\n			<entry id=\"5\" items=\"0\">\r\n				<title handle=\"building-a-blog-with-symphony\">Building a Blog with Symphony</title>\r\n				<description word-count=\"14\"><p>A step-by-step tutorial to build a blog with XML and XSLT, using Symphony CMS</p></description>\r\n				<section>\r\n					<item handle=\"journal\" id=\"17\">Journal</item>\r\n				</section>\r\n				<category>\r\n					<item handle=\"technology\" id=\"15\">Technology</item>\r\n				</category>\r\n				<date time=\"14:33\" weekday=\"3\">2009-05-06</date>\r\n			</entry>\r\n			<entry id=\"29\" items=\"0\">\r\n				<title handle=\"hello-world-a-basic-xsl-stylesheet\">Hello World: A Basic XSL Stylesheet</title>\r\n				<description word-count=\"19\"><p>Developing a site with Symphony CMS starts with a basic XSL stylesheet. This is the traditional &#8220;Hello, world&#8221; example.</p></description>\r\n				<section>\r\n					<item handle=\"tutorials\" id=\"37\">Tutorials</item>\r\n				</section>\r\n				<category>\r\n					<item handle=\"technology\" id=\"15\">Technology</item>\r\n				</category>\r\n				<date time=\"18:00\" weekday=\"2\">2009-05-05</date>\r\n				<tags>\r\n					<item handle=\"symphony-cms\">symphony cms</item>\r\n				</tags>\r\n			</entry>\r\n			<entry id=\"31\" items=\"0\">\r\n				<title handle=\"fluid-960-grid-system\">Fluid 960 Grid System</title>\r\n				<description word-count=\"44\"><p>Nathan Smith created the <a href=\"http://960.gs/\">960 Grid System</a> as a CSS framework that provides classes to easily create web pages that can be designed with a 12-column or 16-column grid. I decided to extend his grids as the <a href=\"http://www.designinfluences.com/fluid960gs/\">Fluid 960 Grid System</a> for fluid layouts.</p></description>\r\n				<section>\r\n					<item handle=\"journal\" id=\"17\">Journal</item>\r\n				</section>\r\n				<category>\r\n					<item handle=\"technology\" id=\"15\">Technology</item>\r\n				</category>\r\n				<date time=\"16:07\" weekday=\"2\">2009-05-05</date>\r\n				<tags>\r\n					<item handle=\"960-grid-system\">960 grid system</item>\r\n					<item handle=\"css\">css</item>\r\n					<item handle=\"framework\">framework</item>\r\n				</tags>\r\n			</entry>\r\n			<entry id=\"22\" items=\"0\">\r\n				<title handle=\"creating-a-data-structure-in-symphony\">Creating a Data Structure in Symphony</title>\r\n				<description word-count=\"54\"><p>Symphony CMS allows the developer the freedom to create a data structure that suits the content of the site. I won&#8217;t be straying far from the usual, to demonstrate the basics. We can always extend these data structures at any time, although, it&#8217;s better to have a clear idea in mind at the outset.</p></description>\r\n				<section>\r\n					<item handle=\"journal\" id=\"17\">Journal</item>\r\n				</section>\r\n				<category>\r\n					<item handle=\"technology\" id=\"15\">Technology</item>\r\n				</category>\r\n				<date time=\"15:00\" weekday=\"2\">2009-05-05</date>\r\n				<tags>\r\n					<item handle=\"symphony-cms\">symphony cms</item>\r\n				</tags>\r\n			</entry>\r\n			<entry id=\"28\" items=\"0\">\r\n				<title handle=\"the-title-of-my-entry\">The Title of My Entry</title>\r\n				<description word-count=\"6\"><p>A brief description of my entry.</p></description>\r\n				<section>\r\n					<item handle=\"journal\" id=\"17\">Journal</item>\r\n				</section>\r\n				<date time=\"09:00\" weekday=\"2\">2009-05-05</date>\r\n			</entry>\r\n			<entry id=\"32\" items=\"0\">\r\n				<title handle=\"lets-get-started-again\">Let\'s Get Started ... Again</title>\r\n				<description word-count=\"41\"><h4>Then, let&#8217;s see if I can finish</h4>\r\n	<p>The thing is, when is something really finished on the web? The web is fluid. It is constantly evolving. There&#8217;s always more to learn. So, I think &#8220;finished&#8221; will always be an elusive goal.</p></description>\r\n				<section>\r\n					<item handle=\"about\" id=\"16\">About</item>\r\n				</section>\r\n				<date time=\"13:00\" weekday=\"1\">2009-05-04</date>\r\n			</entry>\r\n			<entry id=\"25\" items=\"0\">\r\n				<title handle=\"this-looks-broken\">This Looks Broken</title>\r\n				<description word-count=\"14\"><h4>Expect things to be broken here.</h4>\r\n	<p>I would be surprised if they are not.</p></description>\r\n				<section>\r\n					<item handle=\"about\" id=\"16\">About</item>\r\n				</section>\r\n				<category>\r\n					<item handle=\"technology\" id=\"15\">Technology</item>\r\n				</category>\r\n				<date time=\"08:00\" weekday=\"1\">2009-05-04</date>\r\n			</entry>\r\n			<entry id=\"24\" items=\"0\">\r\n				<title handle=\"what-is-this\">What is this?</title>\r\n				<description word-count=\"35\"><h4>It is a live build of Symphony</h4>\r\n	<p>It started out as a <a href=\"http://designprojectx.com/about/\">live build of a Symphony site</a> during <a href=\"http://aneventapart.com/2009/seattle/\">An Event Apart</a>, while listening to Jeffrey Zeldman and Eric Meyer, and many other fascinating people.</p></description>\r\n				<section>\r\n					<item handle=\"about\" id=\"16\">About</item>\r\n				</section>\r\n				<category>\r\n					<item handle=\"technology\" id=\"15\">Technology</item>\r\n				</category>\r\n				<date time=\"00:00\" weekday=\"1\">2009-05-04</date>\r\n				<tags>\r\n					<item handle=\"an-event-apart\">an event apart</item>\r\n					<item handle=\"symphony-cms\">symphony cms</item>\r\n				</tags>\r\n			</entry>\r\n			<entry id=\"26\" items=\"0\">\r\n				<title handle=\"design-project-x\">Design Project X</title>\r\n				<description word-count=\"33\"><h4>A site about learning by doing</h4>\r\n	<p>This is my playground, my sandbox for projects that I am toying with. I learn by doing. So this is where I do some of my stuff.</p></description>\r\n				<section>\r\n					<item handle=\"home\" id=\"4\">Home</item>\r\n				</section>\r\n				<category>\r\n					<item handle=\"technology\" id=\"15\">Technology</item>\r\n				</category>\r\n				<date time=\"09:00\" weekday=\"5\">2009-05-01</date>\r\n			</entry>\r\n		</entries>\r\n		<entry>\r\n			<pagination total-entries=\"1\" total-pages=\"1\" entries-per-page=\"20\" current-page=\"1\" />\r\n			<section id=\"4\" handle=\"entries\">Entries</section>\r\n			<entry id=\"28\" items=\"0\">\r\n				<title handle=\"the-title-of-my-entry\">The Title of My Entry</title>\r\n				<description word-count=\"6\"><p>A brief description of my entry.</p></description>\r\n				<body word-count=\"20\"><p>This is the body of my entry, using <a href=\"http://daringfireball.net/projects/markdown/\">Markdown</a> to format the text as HTML, using the Symphony Markdown extension.</p></body>\r\n				<section>\r\n					<item handle=\"journal\" id=\"17\">Journal</item>\r\n				</section>\r\n				<date time=\"09:00\" weekday=\"2\">2009-05-05</date>\r\n				<publish>Yes</publish>\r\n			</entry>\r\n		</entry>\r\n		<navigation>\r\n			<page handle=\"home\">\r\n				<name>Home</name>\r\n				<types>\r\n					<type>index</type>\r\n				</types>\r\n			</page>\r\n			<page handle=\"journal\">\r\n				<name>Journal</name>\r\n				<page handle=\"xml\">\r\n					<name>XML</name>\r\n					<types>\r\n						<type>XML</type>\r\n					</types>\r\n				</page>\r\n				<page handle=\"text\">\r\n					<name>Text</name>\r\n					<types>\r\n						<type>text</type>\r\n					</types>\r\n				</page>\r\n			</page>\r\n			<page handle=\"tutorials\">\r\n				<name>Tutorials</name>\r\n				<page handle=\"examples\">\r\n					<name>Examples</name>\r\n					<page handle=\"hello\">\r\n						<name>Hello</name>\r\n					</page>\r\n				</page>\r\n			</page>\r\n			<page handle=\"about\">\r\n				<name>About</name>\r\n			</page>\r\n		</navigation>\r\n		<section>\r\n			<section id=\"2\" handle=\"sections\">Sections</section>\r\n			<entry id=\"17\" entries=\"12\" sections=\"0\" categories=\"0\">\r\n				<title handle=\"journal\">Journal</title>\r\n				<description word-count=\"0\" />\r\n				<body word-count=\"0\" />\r\n				<menu>\r\n					<item handle=\"content\">Content</item>\r\n				</menu>\r\n			</entry>\r\n		</section>\r\n		<types>\r\n			<section id=\"1\" handle=\"types\">Types</section>\r\n			<entry id=\"6\" items=\"0\">\r\n				<title handle=\"bookmarks\">Bookmarks</title>\r\n			</entry>\r\n			<entry id=\"7\" items=\"0\">\r\n				<title handle=\"books\">Books</title>\r\n			</entry>\r\n			<entry id=\"8\" items=\"0\">\r\n				<title handle=\"files\">Files</title>\r\n			</entry>\r\n			<entry id=\"9\" items=\"0\">\r\n				<title handle=\"photos\">Photos</title>\r\n			</entry>\r\n			<entry id=\"10\" items=\"0\">\r\n				<title handle=\"sites\">Sites</title>\r\n			</entry>\r\n		</types>\r\n	</data>\r\n	 \r\n\r\nUsing XPath, the values of each element, attribute, and text node can be processed using the XSLT page template to be copied, transformed and output to the result document.\r\n', '<p>The purpose of configuring data sources is to produce the XML output that XSLT page templates can process to create XML, HTML or text to render to the browser. For Symphony, the goal is usually to produce HTML. The smaller the XML data source, the faster it is to build the XML, the sooner the processor can render the HTML and serve the page to the browser. So, it is important to optimize the XML output to include only what is necessary to build the page. The options to filter, sort, limit and paginate the data sources provide several options to optimize the performance of the site. Symphony provides a means of being able to view the XSLT Page Parameters, the XML data, and to analyze performance data by providing debug information in the browser.</p>\n\n<p>If an admin user or Author is logged in to the Symphony admin, front end pages are given the ability to display debug information. Simply add <code>?debug</code> to the page URL to view Page Parameters, XML Output, XSLT page templates and utilities, Result and Profile data. Refer to the <a href=\"http://symphony-cms.com/documentation/templating/#sec-4\">documentation</a> for more information.</p>\n\n<h4>Page Parameters</h4>\n\n<p>The following page parameters are available for use in XSLT page templates to provide information about the current date and time, the selected page, path and URL, and other details about the site and user data.</p>\n\n<ul>\n<li>$today</li>\n<li>$current-time</li>\n<li>$this-year</li>\n<li>$this-month</li>\n<li>$this-day</li>\n<li>$timezone</li>\n<li>$website-name</li>\n<li>$page-title</li>\n<li>$root</li>\n<li>$workspace</li>\n<li>$root-page</li>\n<li>$current-page</li>\n<li>$current-page-id</li>\n<li>$current-path</li>\n<li>$parent-path</li>\n<li>$current-url</li>\n<li>$upload-limit</li>\n<li>$symphony-build</li>\n<li>$entry</li>\n<li>$cookie-username</li>\n<li>$cookie-pass</li>\n</ul>\n\n<p>Custom data source parameters, created when specifying Parameter Output Options for data sources, are added at the bottom of the list. For example, when I created the Section data source, I configured the Parameter Output to use the System ID field. This custom data source parameter will appear at the bottom of the list of parameters in the parameter pool.</p>\n\n<ul>\n<li>$ds-section</li>\n</ul>\n\n<p>By filtering this data source to include only those entries where the Title field matched the $current-page parameter, I ensure that the Data Source Parameter for the Section data source will output a single ID number. I can then use this ID number to filter other data sources.</p>\n\n<h5>Global Parameter Loader Extension</h5>\n\n<p>Using the <a href=\"http://github.com/carsten/globalparamloader/\">Global Parameter Loader</a> extension, it is possible to add sets of parameters to Symphony&#8217;s parameter pool while excluding specified pages. Parameter values can be created by valid PHP code.</p>\n\n<h4>XML</h4>\n\n<p>The XML output is built by Symphony from the data sources attached to a page. Symphony queries the MySQL database and builds the XML with <code>data</code> as the root node. Each section is added as a child node of the <code>data</code> node with an element name equal to the url-encoded string value of the section label. Each section entry is included as a child of the section node with the element name <code>entry</code> and an <code>id</code> attribute indicating the System ID. Each entry node has a child node for every field specified as Included Elements in the data source configuration. Fields with the possibility of multiple values will contain <code>item</code> nodes for each value.</p>\n\n<h5>Example XML Output</h5>\n\n<p>The XML for <a href=\"http://designprojectx.com/journal/the-title-of-my-entry/\">this test entry</a> looks like this:</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n&lt;data&gt;\n    &lt;events /&gt;\n    &lt;categories&gt;\n        &lt;section id=\"3\" handle=\"categories\"&gt;Categories&lt;/section&gt;\n        &lt;entry id=\"11\" entries=\"0\" items=\"0\"&gt;\n            &lt;title handle=\"applications\"&gt;Applications&lt;/title&gt;\n        &lt;/entry&gt;\n        &lt;entry id=\"12\" entries=\"0\" items=\"0\"&gt;\n            &lt;title handle=\"design\"&gt;Design&lt;/title&gt;\n        &lt;/entry&gt;\n        &lt;entry id=\"13\" entries=\"0\" items=\"0\"&gt;\n            &lt;title handle=\"history\"&gt;History&lt;/title&gt;\n        &lt;/entry&gt;\n        &lt;entry id=\"14\" entries=\"0\" items=\"0\"&gt;\n            &lt;title handle=\"ideas\"&gt;Ideas&lt;/title&gt;\n        &lt;/entry&gt;\n        &lt;entry id=\"15\" entries=\"20\" items=\"0\"&gt;\n            &lt;title handle=\"technology\"&gt;Technology&lt;/title&gt;\n        &lt;/entry&gt;\n    &lt;/categories&gt;\n    &lt;entries&gt;\n        &lt;pagination total-entries=\"21\" total-pages=\"1\" entries-per-page=\"50\" current-page=\"1\" /&gt;\n        &lt;section id=\"4\" handle=\"entries\"&gt;Entries&lt;/section&gt;\n        &lt;entry id=\"40\" items=\"0\"&gt;\n            &lt;title handle=\"xml-output-and-the-debug-page\"&gt;XML Output and the Debug Page&lt;/title&gt;\n            &lt;description word-count=\"50\"&gt;&lt;p&gt;Once the sections have been set up and the data sources have been configured in Symphony, XML output can be attached to a page to be processed using the XSLT page template specified in the Body field of the page configuration. The result document can be XML, HTML or text.&lt;/p&gt;&lt;/description&gt;\n            &lt;section&gt;\n                &lt;item handle=\"tutorials\" id=\"37\"&gt;Tutorials&lt;/item&gt;\n            &lt;/section&gt;\n            &lt;category&gt;\n                &lt;item handle=\"technology\" id=\"15\"&gt;Technology&lt;/item&gt;\n            &lt;/category&gt;\n            &lt;date time=\"20:31\" weekday=\"3\"&gt;2009-05-20&lt;/date&gt;\n            &lt;tags&gt;\n                &lt;item handle=\"symphony-cms\"&gt;symphony cms&lt;/item&gt;\n                &lt;item handle=\"xslt\"&gt;xslt&lt;/item&gt;\n            &lt;/tags&gt;\n        &lt;/entry&gt;\n        &lt;entry id=\"39\" items=\"0\"&gt;\n            &lt;title handle=\"symphony-data-sources\"&gt;Symphony Data Sources&lt;/title&gt;\n            &lt;description word-count=\"43\"&gt;&lt;p&gt;Once the sections have been set up in Symphony, data sources can be configured to output XML that can be used by the XSLT page templates to output HTML pages. These are the data sources that have been used to create this site.&lt;/p&gt;&lt;/description&gt;\n            &lt;section&gt;\n                &lt;item handle=\"tutorials\" id=\"37\"&gt;Tutorials&lt;/item&gt;\n            &lt;/section&gt;\n            &lt;category&gt;\n                &lt;item handle=\"technology\" id=\"15\"&gt;Technology&lt;/item&gt;\n            &lt;/category&gt;\n            &lt;date time=\"14:47\" weekday=\"3\"&gt;2009-05-20&lt;/date&gt;\n            &lt;tags&gt;\n                &lt;item handle=\"symphony-cms\"&gt;symphony cms&lt;/item&gt;\n            &lt;/tags&gt;\n        &lt;/entry&gt;\n        &lt;entry id=\"38\" items=\"0\"&gt;\n            &lt;title handle=\"symphony-sections\"&gt;Symphony Sections&lt;/title&gt;\n            &lt;description word-count=\"45\"&gt;&lt;p&gt;In Symphony, creating Sections is a way of dynamically creating the database structure for your site and the navigation system of the Symphony admin area. This tutorial assumes that you have installed the integration branch of Symphony 2.0.2 from Github (although, this is not essential).&lt;/p&gt;&lt;/description&gt;\n            &lt;section&gt;\n                &lt;item handle=\"tutorials\" id=\"37\"&gt;Tutorials&lt;/item&gt;\n            &lt;/section&gt;\n            &lt;category&gt;\n                &lt;item handle=\"technology\" id=\"15\"&gt;Technology&lt;/item&gt;\n            &lt;/category&gt;\n            &lt;date time=\"09:45\" weekday=\"3\"&gt;2009-05-20&lt;/date&gt;\n            &lt;tags&gt;\n                &lt;item handle=\"symphony-cms\"&gt;symphony cms&lt;/item&gt;\n            &lt;/tags&gt;\n        &lt;/entry&gt;\n        &lt;entry id=\"36\" items=\"0\"&gt;\n            &lt;title handle=\"beyond-hello-an-xslt-page-template\"&gt;Beyond Hello: An XSLT Page Template&lt;/title&gt;\n            &lt;description word-count=\"43\"&gt;&lt;p&gt;I started with the basic &lt;a href=\"http://www.designprojectx.com/tutorials/hello-world-a-basic-xsl-stylesheet/\"&gt;Hello World&lt;/a&gt; example. This tutorial assumes that &lt;a href=\"http://www.designprojectx.com/tutorials/symphony-sections/\"&gt;sections&lt;/a&gt; have been created in Symphony and &lt;a href=\"http://www.designprojectx.com/tutorials/symphony-data-sources/\"&gt;data sources&lt;/a&gt; attached to a page. This example shows how I developed the page template that displays the entries that you are currently reading.&lt;/p&gt;&lt;/description&gt;\n            &lt;section&gt;\n                &lt;item handle=\"tutorials\" id=\"37\"&gt;Tutorials&lt;/item&gt;\n            &lt;/section&gt;\n            &lt;category&gt;\n                &lt;item handle=\"technology\" id=\"15\"&gt;Technology&lt;/item&gt;\n            &lt;/category&gt;\n            &lt;date time=\"08:14\" weekday=\"3\"&gt;2009-05-20&lt;/date&gt;\n            &lt;tags&gt;\n                &lt;item handle=\"symphony-cms\"&gt;symphony cms&lt;/item&gt;\n                &lt;item handle=\"xslt\"&gt;xslt&lt;/item&gt;\n            &lt;/tags&gt;\n        &lt;/entry&gt;\n        &lt;entry id=\"35\" items=\"0\"&gt;\n            &lt;title handle=\"xslt-glossary\"&gt;XSLT Glossary&lt;/title&gt;\n            &lt;description word-count=\"47\"&gt;&lt;p&gt;&lt;a href=\"http://symphony-cms.com/members/TheJester12/\"&gt;Jesse Sutherland&lt;/a&gt; raised some questions about &lt;a href=\"http://symphony-cms.com/forum/discussions/21437/\"&gt;learning symphony&lt;/a&gt; on the Symphony forum. It seems to be a good time to further develop the documentation and add some tutorials to help beginners get acquainted with the system. A glossary of terms might be a good place to start.&lt;/p&gt;&lt;/description&gt;\n            &lt;section&gt;\n                &lt;item handle=\"journal\" id=\"17\"&gt;Journal&lt;/item&gt;\n            &lt;/section&gt;\n            &lt;category&gt;\n                &lt;item handle=\"technology\" id=\"15\"&gt;Technology&lt;/item&gt;\n            &lt;/category&gt;\n            &lt;date time=\"07:53\" weekday=\"3\"&gt;2009-05-20&lt;/date&gt;\n            &lt;tags&gt;\n                &lt;item handle=\"xslt\"&gt;xslt&lt;/item&gt;\n            &lt;/tags&gt;\n        &lt;/entry&gt;\n        &lt;entry id=\"34\" items=\"0\"&gt;\n            &lt;title handle=\"viewing-entries-as-xml\"&gt;Viewing Entries as XML&lt;/title&gt;\n            &lt;description word-count=\"47\"&gt;&lt;p&gt;To make the process of saving XML files of each entry a little easier, I thought I could create an XSL stylesheet that would output the XML of a single entry. I ended up using Marc Liyanage&amp;#8217;s XML Pretty Printer template to create nicely indented XML files.&lt;/p&gt;&lt;/description&gt;\n            &lt;section&gt;\n                &lt;item handle=\"journal\" id=\"17\"&gt;Journal&lt;/item&gt;\n            &lt;/section&gt;\n            &lt;category&gt;\n                &lt;item handle=\"technology\" id=\"15\"&gt;Technology&lt;/item&gt;\n            &lt;/category&gt;\n            &lt;date time=\"08:59\" weekday=\"1\"&gt;2009-05-18&lt;/date&gt;\n            &lt;tags&gt;\n                &lt;item handle=\"xslt\"&gt;xslt&lt;/item&gt;\n            &lt;/tags&gt;\n        &lt;/entry&gt;\n        &lt;entry id=\"33\" items=\"0\"&gt;\n            &lt;title handle=\"symphony-utilities\"&gt;Symphony Utilities&lt;/title&gt;\n            &lt;description word-count=\"30\"&gt;&lt;p&gt;Utilities are XSLT templates that can be used for a number of different applications. XML can be transformed into text, html, or xml, so the applications can be virtually limitless.&lt;/p&gt;&lt;/description&gt;\n            &lt;section&gt;\n                &lt;item handle=\"journal\" id=\"17\"&gt;Journal&lt;/item&gt;\n            &lt;/section&gt;\n            &lt;category&gt;\n                &lt;item handle=\"technology\" id=\"15\"&gt;Technology&lt;/item&gt;\n            &lt;/category&gt;\n            &lt;date time=\"17:48\" weekday=\"7\"&gt;2009-05-17&lt;/date&gt;\n            &lt;tags&gt;\n                &lt;item handle=\"symphony-cms\"&gt;symphony cms&lt;/item&gt;\n            &lt;/tags&gt;\n        &lt;/entry&gt;\n        &lt;entry id=\"27\" items=\"0\"&gt;\n            &lt;title handle=\"maintaining-a-simple-backup-system-in-symphony\"&gt;Maintaining a Simple Backup System in Symphony&lt;/title&gt;\n            &lt;description word-count=\"48\"&gt;&lt;p&gt;I want to be able to have easy access to all my site content. I also want to be able to write the content in a text editor so that I can use the features that help the writing process go a lot smoother, such as multiple undos.&lt;/p&gt;&lt;/description&gt;\n            &lt;section&gt;\n                &lt;item handle=\"journal\" id=\"17\"&gt;Journal&lt;/item&gt;\n            &lt;/section&gt;\n            &lt;category&gt;\n                &lt;item handle=\"technology\" id=\"15\"&gt;Technology&lt;/item&gt;\n            &lt;/category&gt;\n            &lt;date time=\"08:18\" weekday=\"7\"&gt;2009-05-17&lt;/date&gt;\n        &lt;/entry&gt;\n        &lt;entry id=\"23\" items=\"0\"&gt;\n            &lt;title handle=\"symphony-extensions\"&gt;Symphony Extensions&lt;/title&gt;\n            &lt;description word-count=\"49\"&gt;&lt;p&gt;To get the most out of Symphony, we&amp;#8217;re going to need to extend the core system using extensions. Out of the box, Symphony provides some very powerful features. But it assumes nothing about the type of site that we create. To extend the system, let&amp;#8217;s explore the available extensions.&lt;/p&gt;&lt;/description&gt;\n            &lt;section&gt;\n                &lt;item handle=\"tutorials\" id=\"37\"&gt;Tutorials&lt;/item&gt;\n            &lt;/section&gt;\n            &lt;category&gt;\n                &lt;item handle=\"technology\" id=\"15\"&gt;Technology&lt;/item&gt;\n            &lt;/category&gt;\n            &lt;date time=\"13:46\" weekday=\"6\"&gt;2009-05-16&lt;/date&gt;\n            &lt;tags&gt;\n                &lt;item handle=\"extensions\"&gt;extensions&lt;/item&gt;\n                &lt;item handle=\"symphony-cms\"&gt;symphony cms&lt;/item&gt;\n            &lt;/tags&gt;\n        &lt;/entry&gt;\n        &lt;entry id=\"21\" items=\"0\"&gt;\n            &lt;title handle=\"spreading-myself-too-thin\"&gt;Spreading Myself Too Thin&lt;/title&gt;\n            &lt;description word-count=\"23\"&gt;&lt;p&gt;So, I&amp;#8217;ve got failed, half-finished, barely started web development / social media experiments scattered all over the web. Let&amp;#8217;s see if I can remember:&lt;/p&gt;&lt;/description&gt;\n            &lt;section&gt;\n                &lt;item handle=\"journal\" id=\"17\"&gt;Journal&lt;/item&gt;\n            &lt;/section&gt;\n            &lt;category&gt;\n                &lt;item handle=\"technology\" id=\"15\"&gt;Technology&lt;/item&gt;\n            &lt;/category&gt;\n            &lt;date time=\"11:19\" weekday=\"6\"&gt;2009-05-16&lt;/date&gt;\n        &lt;/entry&gt;\n        &lt;entry id=\"20\" items=\"0\"&gt;\n            &lt;title handle=\"under-construction\"&gt;Under Construction&lt;/title&gt;\n            &lt;description word-count=\"9\"&gt;&lt;p&gt;Continuing with my live build of a Symphony site&lt;/p&gt;&lt;/description&gt;\n            &lt;section&gt;\n                &lt;item handle=\"journal\" id=\"17\"&gt;Journal&lt;/item&gt;\n            &lt;/section&gt;\n            &lt;category&gt;\n                &lt;item handle=\"technology\" id=\"15\"&gt;Technology&lt;/item&gt;\n            &lt;/category&gt;\n            &lt;date time=\"09:40\" weekday=\"6\"&gt;2009-05-16&lt;/date&gt;\n        &lt;/entry&gt;\n        &lt;entry id=\"19\" items=\"0\"&gt;\n            &lt;title handle=\"rapid-interactive-prototyping\"&gt;Rapid Interactive Prototyping&lt;/title&gt;\n            &lt;description word-count=\"36\"&gt;&lt;p&gt;I credit Andy Clarke with the idea of improving the approach of working with wireframes by using the Grey Box Method. I highly recommend his book, Trancending CSS, for both the fantastic content and beautiful design.&lt;/p&gt;&lt;/description&gt;\n            &lt;section&gt;\n                &lt;item handle=\"journal\" id=\"17\"&gt;Journal&lt;/item&gt;\n            &lt;/section&gt;\n            &lt;category&gt;\n                &lt;item handle=\"technology\" id=\"15\"&gt;Technology&lt;/item&gt;\n            &lt;/category&gt;\n            &lt;date time=\"08:46\" weekday=\"4\"&gt;2009-05-07&lt;/date&gt;\n        &lt;/entry&gt;\n        &lt;entry id=\"5\" items=\"0\"&gt;\n            &lt;title handle=\"building-a-blog-with-symphony\"&gt;Building a Blog with Symphony&lt;/title&gt;\n            &lt;description word-count=\"14\"&gt;&lt;p&gt;A step-by-step tutorial to build a blog with XML and XSLT, using Symphony CMS&lt;/p&gt;&lt;/description&gt;\n            &lt;section&gt;\n                &lt;item handle=\"journal\" id=\"17\"&gt;Journal&lt;/item&gt;\n            &lt;/section&gt;\n            &lt;category&gt;\n                &lt;item handle=\"technology\" id=\"15\"&gt;Technology&lt;/item&gt;\n            &lt;/category&gt;\n            &lt;date time=\"14:33\" weekday=\"3\"&gt;2009-05-06&lt;/date&gt;\n        &lt;/entry&gt;\n        &lt;entry id=\"29\" items=\"0\"&gt;\n            &lt;title handle=\"hello-world-a-basic-xsl-stylesheet\"&gt;Hello World: A Basic XSL Stylesheet&lt;/title&gt;\n            &lt;description word-count=\"19\"&gt;&lt;p&gt;Developing a site with Symphony CMS starts with a basic XSL stylesheet. This is the traditional &amp;#8220;Hello, world&amp;#8221; example.&lt;/p&gt;&lt;/description&gt;\n            &lt;section&gt;\n                &lt;item handle=\"tutorials\" id=\"37\"&gt;Tutorials&lt;/item&gt;\n            &lt;/section&gt;\n            &lt;category&gt;\n                &lt;item handle=\"technology\" id=\"15\"&gt;Technology&lt;/item&gt;\n            &lt;/category&gt;\n            &lt;date time=\"18:00\" weekday=\"2\"&gt;2009-05-05&lt;/date&gt;\n            &lt;tags&gt;\n                &lt;item handle=\"symphony-cms\"&gt;symphony cms&lt;/item&gt;\n            &lt;/tags&gt;\n        &lt;/entry&gt;\n        &lt;entry id=\"31\" items=\"0\"&gt;\n            &lt;title handle=\"fluid-960-grid-system\"&gt;Fluid 960 Grid System&lt;/title&gt;\n            &lt;description word-count=\"44\"&gt;&lt;p&gt;Nathan Smith created the &lt;a href=\"http://960.gs/\"&gt;960 Grid System&lt;/a&gt; as a CSS framework that provides classes to easily create web pages that can be designed with a 12-column or 16-column grid. I decided to extend his grids as the &lt;a href=\"http://www.designinfluences.com/fluid960gs/\"&gt;Fluid 960 Grid System&lt;/a&gt; for fluid layouts.&lt;/p&gt;&lt;/description&gt;\n            &lt;section&gt;\n                &lt;item handle=\"journal\" id=\"17\"&gt;Journal&lt;/item&gt;\n            &lt;/section&gt;\n            &lt;category&gt;\n                &lt;item handle=\"technology\" id=\"15\"&gt;Technology&lt;/item&gt;\n            &lt;/category&gt;\n            &lt;date time=\"16:07\" weekday=\"2\"&gt;2009-05-05&lt;/date&gt;\n            &lt;tags&gt;\n                &lt;item handle=\"960-grid-system\"&gt;960 grid system&lt;/item&gt;\n                &lt;item handle=\"css\"&gt;css&lt;/item&gt;\n                &lt;item handle=\"framework\"&gt;framework&lt;/item&gt;\n            &lt;/tags&gt;\n        &lt;/entry&gt;\n        &lt;entry id=\"22\" items=\"0\"&gt;\n            &lt;title handle=\"creating-a-data-structure-in-symphony\"&gt;Creating a Data Structure in Symphony&lt;/title&gt;\n            &lt;description word-count=\"54\"&gt;&lt;p&gt;Symphony CMS allows the developer the freedom to create a data structure that suits the content of the site. I won&amp;#8217;t be straying far from the usual, to demonstrate the basics. We can always extend these data structures at any time, although, it&amp;#8217;s better to have a clear idea in mind at the outset.&lt;/p&gt;&lt;/description&gt;\n            &lt;section&gt;\n                &lt;item handle=\"journal\" id=\"17\"&gt;Journal&lt;/item&gt;\n            &lt;/section&gt;\n            &lt;category&gt;\n                &lt;item handle=\"technology\" id=\"15\"&gt;Technology&lt;/item&gt;\n            &lt;/category&gt;\n            &lt;date time=\"15:00\" weekday=\"2\"&gt;2009-05-05&lt;/date&gt;\n            &lt;tags&gt;\n                &lt;item handle=\"symphony-cms\"&gt;symphony cms&lt;/item&gt;\n            &lt;/tags&gt;\n        &lt;/entry&gt;\n        &lt;entry id=\"28\" items=\"0\"&gt;\n            &lt;title handle=\"the-title-of-my-entry\"&gt;The Title of My Entry&lt;/title&gt;\n            &lt;description word-count=\"6\"&gt;&lt;p&gt;A brief description of my entry.&lt;/p&gt;&lt;/description&gt;\n            &lt;section&gt;\n                &lt;item handle=\"journal\" id=\"17\"&gt;Journal&lt;/item&gt;\n            &lt;/section&gt;\n            &lt;date time=\"09:00\" weekday=\"2\"&gt;2009-05-05&lt;/date&gt;\n        &lt;/entry&gt;\n        &lt;entry id=\"32\" items=\"0\"&gt;\n            &lt;title handle=\"lets-get-started-again\"&gt;Let\'s Get Started ... Again&lt;/title&gt;\n            &lt;description word-count=\"41\"&gt;&lt;h4&gt;Then, let&amp;#8217;s see if I can finish&lt;/h4&gt;\n&lt;p&gt;The thing is, when is something really finished on the web? The web is fluid. It is constantly evolving. There&amp;#8217;s always more to learn. So, I think &amp;#8220;finished&amp;#8221; will always be an elusive goal.&lt;/p&gt;&lt;/description&gt;\n            &lt;section&gt;\n                &lt;item handle=\"about\" id=\"16\"&gt;About&lt;/item&gt;\n            &lt;/section&gt;\n            &lt;date time=\"13:00\" weekday=\"1\"&gt;2009-05-04&lt;/date&gt;\n        &lt;/entry&gt;\n        &lt;entry id=\"25\" items=\"0\"&gt;\n            &lt;title handle=\"this-looks-broken\"&gt;This Looks Broken&lt;/title&gt;\n            &lt;description word-count=\"14\"&gt;&lt;h4&gt;Expect things to be broken here.&lt;/h4&gt;\n&lt;p&gt;I would be surprised if they are not.&lt;/p&gt;&lt;/description&gt;\n            &lt;section&gt;\n                &lt;item handle=\"about\" id=\"16\"&gt;About&lt;/item&gt;\n            &lt;/section&gt;\n            &lt;category&gt;\n                &lt;item handle=\"technology\" id=\"15\"&gt;Technology&lt;/item&gt;\n            &lt;/category&gt;\n            &lt;date time=\"08:00\" weekday=\"1\"&gt;2009-05-04&lt;/date&gt;\n        &lt;/entry&gt;\n        &lt;entry id=\"24\" items=\"0\"&gt;\n            &lt;title handle=\"what-is-this\"&gt;What is this?&lt;/title&gt;\n            &lt;description word-count=\"35\"&gt;&lt;h4&gt;It is a live build of Symphony&lt;/h4&gt;\n&lt;p&gt;It started out as a &lt;a href=\"http://designprojectx.com/about/\"&gt;live build of a Symphony site&lt;/a&gt; during &lt;a href=\"http://aneventapart.com/2009/seattle/\"&gt;An Event Apart&lt;/a&gt;, while listening to Jeffrey Zeldman and Eric Meyer, and many other fascinating people.&lt;/p&gt;&lt;/description&gt;\n            &lt;section&gt;\n                &lt;item handle=\"about\" id=\"16\"&gt;About&lt;/item&gt;\n            &lt;/section&gt;\n            &lt;category&gt;\n                &lt;item handle=\"technology\" id=\"15\"&gt;Technology&lt;/item&gt;\n            &lt;/category&gt;\n            &lt;date time=\"00:00\" weekday=\"1\"&gt;2009-05-04&lt;/date&gt;\n            &lt;tags&gt;\n                &lt;item handle=\"an-event-apart\"&gt;an event apart&lt;/item&gt;\n                &lt;item handle=\"symphony-cms\"&gt;symphony cms&lt;/item&gt;\n            &lt;/tags&gt;\n        &lt;/entry&gt;\n        &lt;entry id=\"26\" items=\"0\"&gt;\n            &lt;title handle=\"design-project-x\"&gt;Design Project X&lt;/title&gt;\n            &lt;description word-count=\"33\"&gt;&lt;h4&gt;A site about learning by doing&lt;/h4&gt;\n&lt;p&gt;This is my playground, my sandbox for projects that I am toying with. I learn by doing. So this is where I do some of my stuff.&lt;/p&gt;&lt;/description&gt;\n            &lt;section&gt;\n                &lt;item handle=\"home\" id=\"4\"&gt;Home&lt;/item&gt;\n            &lt;/section&gt;\n            &lt;category&gt;\n                &lt;item handle=\"technology\" id=\"15\"&gt;Technology&lt;/item&gt;\n            &lt;/category&gt;\n            &lt;date time=\"09:00\" weekday=\"5\"&gt;2009-05-01&lt;/date&gt;\n        &lt;/entry&gt;\n    &lt;/entries&gt;\n    &lt;entry&gt;\n        &lt;pagination total-entries=\"1\" total-pages=\"1\" entries-per-page=\"20\" current-page=\"1\" /&gt;\n        &lt;section id=\"4\" handle=\"entries\"&gt;Entries&lt;/section&gt;\n        &lt;entry id=\"28\" items=\"0\"&gt;\n            &lt;title handle=\"the-title-of-my-entry\"&gt;The Title of My Entry&lt;/title&gt;\n            &lt;description word-count=\"6\"&gt;&lt;p&gt;A brief description of my entry.&lt;/p&gt;&lt;/description&gt;\n            &lt;body word-count=\"20\"&gt;&lt;p&gt;This is the body of my entry, using &lt;a href=\"http://daringfireball.net/projects/markdown/\"&gt;Markdown&lt;/a&gt; to format the text as HTML, using the Symphony Markdown extension.&lt;/p&gt;&lt;/body&gt;\n            &lt;section&gt;\n                &lt;item handle=\"journal\" id=\"17\"&gt;Journal&lt;/item&gt;\n            &lt;/section&gt;\n            &lt;date time=\"09:00\" weekday=\"2\"&gt;2009-05-05&lt;/date&gt;\n            &lt;publish&gt;Yes&lt;/publish&gt;\n        &lt;/entry&gt;\n    &lt;/entry&gt;\n    &lt;navigation&gt;\n        &lt;page handle=\"home\"&gt;\n            &lt;name&gt;Home&lt;/name&gt;\n            &lt;types&gt;\n                &lt;type&gt;index&lt;/type&gt;\n            &lt;/types&gt;\n        &lt;/page&gt;\n        &lt;page handle=\"journal\"&gt;\n            &lt;name&gt;Journal&lt;/name&gt;\n            &lt;page handle=\"xml\"&gt;\n                &lt;name&gt;XML&lt;/name&gt;\n                &lt;types&gt;\n                    &lt;type&gt;XML&lt;/type&gt;\n                &lt;/types&gt;\n            &lt;/page&gt;\n            &lt;page handle=\"text\"&gt;\n                &lt;name&gt;Text&lt;/name&gt;\n                &lt;types&gt;\n                    &lt;type&gt;text&lt;/type&gt;\n                &lt;/types&gt;\n            &lt;/page&gt;\n        &lt;/page&gt;\n        &lt;page handle=\"tutorials\"&gt;\n            &lt;name&gt;Tutorials&lt;/name&gt;\n            &lt;page handle=\"examples\"&gt;\n                &lt;name&gt;Examples&lt;/name&gt;\n                &lt;page handle=\"hello\"&gt;\n                    &lt;name&gt;Hello&lt;/name&gt;\n                &lt;/page&gt;\n            &lt;/page&gt;\n        &lt;/page&gt;\n        &lt;page handle=\"about\"&gt;\n            &lt;name&gt;About&lt;/name&gt;\n        &lt;/page&gt;\n    &lt;/navigation&gt;\n    &lt;section&gt;\n        &lt;section id=\"2\" handle=\"sections\"&gt;Sections&lt;/section&gt;\n        &lt;entry id=\"17\" entries=\"12\" sections=\"0\" categories=\"0\"&gt;\n            &lt;title handle=\"journal\"&gt;Journal&lt;/title&gt;\n            &lt;description word-count=\"0\" /&gt;\n            &lt;body word-count=\"0\" /&gt;\n            &lt;menu&gt;\n                &lt;item handle=\"content\"&gt;Content&lt;/item&gt;\n            &lt;/menu&gt;\n        &lt;/entry&gt;\n    &lt;/section&gt;\n    &lt;types&gt;\n        &lt;section id=\"1\" handle=\"types\"&gt;Types&lt;/section&gt;\n        &lt;entry id=\"6\" items=\"0\"&gt;\n            &lt;title handle=\"bookmarks\"&gt;Bookmarks&lt;/title&gt;\n        &lt;/entry&gt;\n        &lt;entry id=\"7\" items=\"0\"&gt;\n            &lt;title handle=\"books\"&gt;Books&lt;/title&gt;\n        &lt;/entry&gt;\n        &lt;entry id=\"8\" items=\"0\"&gt;\n            &lt;title handle=\"files\"&gt;Files&lt;/title&gt;\n        &lt;/entry&gt;\n        &lt;entry id=\"9\" items=\"0\"&gt;\n            &lt;title handle=\"photos\"&gt;Photos&lt;/title&gt;\n        &lt;/entry&gt;\n        &lt;entry id=\"10\" items=\"0\"&gt;\n            &lt;title handle=\"sites\"&gt;Sites&lt;/title&gt;\n        &lt;/entry&gt;\n    &lt;/types&gt;\n&lt;/data&gt;\n</code></pre>\n\n<p>Using XPath, the values of each element, attribute, and text node can be processed using the XSLT page template to be copied, transformed and output to the result document.</p>\n');
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (194, 36, 'The [Hello World](http://designprojectx.com/tutorials/hello-world-a-basic-xsl-stylesheet/) example used a skeleton XSL stylesheet to provide the minimum necessary to create a web page with an XHTML 1.0 Strict doctype. For this tutorial, we will be recreating the Journal overview page. We can refer to the XML output shown in the previous entry on [XML Output and the Debug Page](http://designprojectx.com/tutorials/xml-output-and-the-debug-page/) for the XML data that will be processed by the XSLT template.\r\n\r\n##### The Journal Page\r\n\r\nFirst, create the Journal page. Use the following settings to configure the page:\r\n\r\n###### URL Settings\r\n\r\n* Parent Page: /\r\n* URL Handle: journal\r\n* URL Parameters: entry\r\n\r\n###### Page Metadata\r\n\r\n* Events: (none)\r\n* Data Sources: Entries, Entry, Navigation, Section\r\n* Page Type: (none)\r\n\r\n###### Page Data\r\n\r\n* Title: Journal\r\n* Body: (see the page template below)\r\n* Utilities: (none)\r\n\r\n##### The Page Template\r\n\r\nUsing a couple of the available page parameters, `$website-name` and `$page-title`, we can add a page title to the template use an `xsl:value-of` instruction.\r\n\r\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n    <xsl:stylesheet version=\"1.0\"\r\n        xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n    \r\n    <xsl:output method=\"xml\"\r\n        doctype-public=\"-//W3C//DTD XHTML 1.0 Strict//EN\"\r\n        doctype-system=\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\r\n        omit-xml-declaration=\"yes\"\r\n        encoding=\"UTF-8\"\r\n        indent=\"yes\" />\r\n    \r\n    <xsl:template match=\"/\">\r\n    <html>\r\n    <head>\r\n        <title><xsl:value-of select=\"$page-title\"/> | <xsl:value-of select=\"$website-name\"/></title>\r\n    </head>\r\n    <body>\r\n        <h1><xsl:value-of select=\"$website-name\"/></h1>\r\n        <h2><xsl:value-of select=\"$page-title\"/></h2>\r\n    </body>\r\n    </html>\r\n    </xsl:template>\r\n    \r\n    </xsl:stylesheet>\r\n	\r\n#### Adding Data from the XML to the Result Document\r\n\r\nUsing an XPath expression, the value of an entry title can be output to the result document. To find the title of every entry in our list of entries, we can use the Entries data source and an `xsl:for-each` instruction to select every entry node and output the entry Title field value with an `xsl:value-of` instruction.\r\n\r\n	<xsl:for-each select=\"data/entries/entry\">\r\n		<h3><xsl:value-of select=\"title\"/></h3>\r\n	</xsl:for-each>\r\n\r\nTo include the date the entry was posted, we can add a paragraph element with another `xsl:value-of` instruction.\r\n\r\n	<xsl:for-each select=\"data/entries/entry\">\r\n		<h3><xsl:value-of select=\"title\"/></h3>\r\n		<p class=\"meta\">Posted <xsl:value-of select=\"date\"/></p>\r\n	</xsl:for-each>\r\n\r\nTo include the category assigned to the entry, we can test whether a value exists for the category field and add the value to the output if it does.\r\n\r\n	<xsl:for-each select=\"data/entries/entry\">\r\n		<h3><xsl:value-of select=\"title\"/></h3>\r\n		<p class=\"meta\">Posted <xsl:value-of select=\"date\"/>\r\n			<xsl:if test=\"category\">\r\n				<xsl:text> in </xsl:text>\r\n				<xsl:value-of select=\"category/item\"/>\r\n			</xsl:if>\r\n		</p>\r\n	</xsl:for-each>\r\n\r\nTo include the value of the `description` field, we can use a different instruction that includes not only the text value of a node but also the XML nodes contained by the `description` node. Since Markdown is being used to format the entries, the `description` node of the XML will contain at least `<p>` elements, and possibly several different HTML elements. The `xsl:copy-of` instruction will output a copy of the selected XML node including the selected element. To select all the child elements of the `description` element, without including the body element node itself, use the wildcard selector `*` to select all child elements.\r\n\r\n	<xsl:for-each select=\"data/entries/entry\">\r\n		<h3><xsl:value-of select=\"title\"/></h3>\r\n		<p class=\"meta\">Posted <xsl:value-of select=\"date\"/>\r\n			<xsl:if test=\"category\">\r\n				<xsl:text> in </xsl:text>\r\n				<xsl:value-of select=\"category/item\"/>\r\n			</xsl:if>\r\n		</p>\r\n		<xsl:copy-of select=\"description/*\"/>\r\n	</xsl:for-each>\r\n\r\n\r\n#### The Overview Page Template\r\n\r\nThe completed overview page will display the list of available Journal entries with a title, date, category and a brief description of the entry. \r\n\r\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n    <xsl:stylesheet version=\"1.0\"\r\n        xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n    \r\n    <xsl:output method=\"xml\"\r\n        doctype-public=\"-//W3C//DTD XHTML 1.0 Strict//EN\"\r\n        doctype-system=\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\r\n        omit-xml-declaration=\"yes\"\r\n        encoding=\"UTF-8\"\r\n        indent=\"yes\" />\r\n    \r\n    <xsl:template match=\"/\">\r\n    <html>\r\n    <head>\r\n        <title><xsl:value-of select=\"$page-title\"/> | <xsl:value-of select=\"$website-name\"/></title>\r\n    </head>\r\n    <body>\r\n        <h1><xsl:value-of select=\"$website-name\"/></h1>\r\n        <h2><xsl:value-of select=\"$page-title\"/></h2>\r\n		<xsl:for-each select=\"data/entries/entry\">\r\n			<h3><xsl:value-of select=\"title\"/></h3>\r\n			<p class=\"meta\">Posted <xsl:value-of select=\"date\"/>\r\n				<xsl:if test=\"category\">\r\n					<xsl:text> in </xsl:text>\r\n					<xsl:value-of select=\"category/item\"/>\r\n				</xsl:if>\r\n			</p>\r\n			<xsl:copy-of select=\"description/*\"/>\r\n		</xsl:for-each>\r\n    </body>\r\n    </html>\r\n    </xsl:template>\r\n    \r\n    </xsl:stylesheet>\r\n\r\nThe completed overview page will display the list of available Journal entries with a title, date, category and brief description of the entry. \r\n\r\n#### Filtering Entries with XSLT\r\n\r\nTo limit the number of entries that is output by the template, the selected node set can be filtered by using a predicate on the `xsl:for-each` instruction. The following instruction will select the first entry.\r\n\r\n	<xsl:for-each select=\"data/entries/entry[position() = 1]\">\r\n \r\nThe shorthand version omits the need for the equality operator. For example, to select the fourth entry: \r\n\r\n	<xsl:for-each select=\"data/entries/entry[4]\">\r\n\r\nTo select the first 4 entries: \r\n\r\n	<xsl:for-each select=\"data/entries/entry[position() &lt;= 4]\">\r\n \r\nTo select the last entry:\r\n\r\n	<xsl:for-each select=\"data/entries/entry[position() = last()]\">\r\n \r\nTo select an entry by its `id` attribute use the attribute selector, `@`:\r\n\r\n	<xsl:for-each select=\"data/entries/entry[@id = 36]\">\r\n \r\n#### Sorting Entries with XSLT\r\n\r\nTo sort the entries that are output by the template, the selected node set can be sorted by using an `xsl:sort` instruction. To avoid throwing an XSLT processor error, the `xsl:sort` instruction must immediately follow the opening tag of the `xsl:for-each` instruction. It is always expressed as a self-closing XML element. The following XSL instructions will sort the entries by the text value of the date field.\r\n\r\n	<xsl:for-each select=\"data/entries/entry\">\r\n		<xsl:sort select=\"date\" order=\"ascending\"/>\r\n		<h3><xsl:value-of select=\"title\"/></h3>\r\n	</xsl:for-each>\r\n \r\nIf more than one entry has been posted on the same day, you might also want to sort the entries by the time to keep the entries in correct chronological order. Use the `@` selector to select attributes of an XML element. In this case, we are selecting the `time` attribute of the `date` element. The following instructions will sort first by the `date` field, then by the `time` field.\r\n\r\n	<xsl:for-each select=\"data/entries/entry\">\r\n		<xsl:sort select=\"date\" order=\"ascending\"/>\r\n		<xsl:sort select=\"date/@time\" order=\"ascending\"/>\r\n		<h3><xsl:value-of select=\"title\"/></h3>\r\n	</xsl:for-each>\r\n\r\nNote that sorting by the date field works correctly here, even though the default sort mode evaluates a value as string data type, only because the ISO format of the date can correctly be sorted as a string value. The default sort order is also `ascending`, so we could have omitted the order attribute of the `xsl:sort` instruction. To sort by System ID, it is possible to change the sort mode:\r\n\r\n	<xsl:for-each select=\"data/entries/entry\">\r\n		<xsl:sort select=\"@id\" data-type=\"number\"/>\r\n		<h3><xsl:value-of select=\"title\"/></h3>\r\n	</xsl:for-each>\r\n\r\n#### Data Source Filtering and Sorting\r\n\r\nTo keep the XML efficient and optimized, it is often best to filter and sort entries when configuring data sources. Refer to the Data Sources section in the [documentation](http://symphony-cms.com/documentation/interface/#sec-2) for more information.\r\n\r\nThe [Symphony Data Sources](http://designprojectx.com/tutorials/symphony-data-sources/) tutorial describes how to configure the Entry data source to filter the Entries section by the Title field and sort by the Date field.\r\n\r\n##### Managing Views with URL Parameters\r\n\r\nSymphony uses URL parameters to manage different views of the same data set, or to dynamically modify the XML data set based on page parameters or data source parameters. Using XSLT conditional instructions, it is possible to serve different views using the same page template. When creating pages, URL parameters can be configured. Instead of using traditional PHP GET strings with name/value pairs, such as `?name=value&foo=bar`, Symphony uses clean URLs that are mapped to XSL page parameters configured in the page template. The drawback is that the values have to appear in the order specified by the page template. So, with the GET example, we could configure a page with the URL parameters `name/foo`. Then to navigate to a page that is filtered by these two parameters, we could express the values in the URL:\r\n\r\n	http://www.example.com/journal/value/bar/\r\n\r\nYou can specify any valid XSL parameter name for each URL parameter. Since Symphony entry handles are created with lowercase characters and hyphens, it\'s generally best to stick to this character set. As with any XSL parameter, never begin the name with a number. You could potential use the following as your URL Parameters in the page template: `a/b/c/d/e/f/g` and these would be mapped to the following XSL parameters:\r\n\r\n* $a\r\n* $b\r\n* $c\r\n* $d\r\n* $e\r\n* $f\r\n* $g\r\n\r\nTo manage different views, however, this would require at least the following logic to display different results for each parameter:\r\n\r\n	<xsl:choose>\r\n		<xsl:when test=\"$g\">\r\n			<!-- Do something when $g has a value -->\r\n		</xsl:when>\r\n		<xsl:when test=\"$f\">\r\n			<!-- Do something when $f has a value -->\r\n		</xsl:when>\r\n		<xsl:when test=\"$e\">\r\n			<!-- Do something when $e has a value -->\r\n		</xsl:when>\r\n		<xsl:when test=\"$d\">\r\n			<!-- Do something when $d has a value -->\r\n		</xsl:when>\r\n		<xsl:when test=\"$c\">\r\n			<!-- Do something when $c has a value -->\r\n		</xsl:when>\r\n		<xsl:when test=\"$b\">\r\n			<!-- Do something when $b has a value -->\r\n		</xsl:when>\r\n		<xsl:otherwise>\r\n			<!-- Do something when $a has a value -->\r\n		</xsl:otherwise>\r\n	</xsl:choose>\r\n\r\n\r\nThe `xsl:choose` instruction is the XSLT version of a switch statement or if/else conditionals in procedural programming languages.\r\n\r\nThe Journal page has been configured with a single URL parameter: `entry`. To create a page template that will display an overview when the `$entry` parameter has no value, that is, when the browser has navigated to the Journal page at `http://www.example.com/journal/`, we can use the Entries data source. When the browser has navigated to a specific entry, `http://www.example.com/journal/entry-title/`, we can use the Entry data source. An `xsl:choose` instruction provides the logic to display an overview of entries or the full selected entry.\r\n\r\n	<xsl:choose>\r\n		<xsl:when test=\"$entry\">\r\n			<!-- Do something when $entry has a value -->\r\n		</xsl:when>\r\n		<xsl:otherwise>\r\n			<!-- Do something when $entry has no value -->\r\n		</xsl:otherwise>\r\n	</xsl:choose>\r\n\r\n\r\n#### The Journal Page Using a Single Data Source\r\n\r\nApply this logic to the Journal page template, where we filter the entry using XSLT. Notice the predicate in the `xsl:for-each` instruction:\r\n\r\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n    <xsl:stylesheet version=\"1.0\"\r\n        xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n    \r\n    <xsl:output method=\"xml\"\r\n        doctype-public=\"-//W3C//DTD XHTML 1.0 Strict//EN\"\r\n        doctype-system=\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\r\n        omit-xml-declaration=\"yes\"\r\n        encoding=\"UTF-8\"\r\n        indent=\"yes\" />\r\n    \r\n    <xsl:template match=\"/\">\r\n    <html>\r\n    <head>\r\n        <title><xsl:value-of select=\"$page-title\"/> | <xsl:value-of select=\"$website-name\"/></title>\r\n    </head>\r\n    <body>\r\n        <h1><xsl:value-of select=\"$website-name\"/></h1>\r\n        <h2><xsl:value-of select=\"$page-title\"/></h2>\r\n		<xsl:choose>\r\n			<xsl:when test=\"$entry\">\r\n				<xsl:for-each select=\"data/entries/entry[title/@handle = $entry]\">\r\n					<h3><xsl:value-of select=\"title\"/></h3>\r\n					<p class=\"meta\">Posted <xsl:value-of select=\"date\"/>\r\n						<xsl:if test=\"category\">\r\n							<xsl:text> in </xsl:text>\r\n							<xsl:value-of select=\"category/item\"/>\r\n						</xsl:if>\r\n					</p>\r\n					<xsl:copy-of select=\"description/*\"/>\r\n				</xsl:for-each>\r\n			</xsl:when>\r\n			<xsl:otherwise>\r\n				<xsl:for-each select=\"data/entries/entry\">\r\n					<h3><xsl:value-of select=\"title\"/></h3>\r\n					<p class=\"meta\">Posted <xsl:value-of select=\"date\"/>\r\n						<xsl:if test=\"category\">\r\n							<xsl:text> in </xsl:text>\r\n							<xsl:value-of select=\"category/item\"/>\r\n						</xsl:if>\r\n					</p>\r\n					<xsl:copy-of select=\"description/*\"/>\r\n				</xsl:for-each>\r\n			</xsl:otherwise>\r\n		</xsl:choose>\r\n    </body>\r\n    </html>\r\n    </xsl:template>\r\n    \r\n    </xsl:stylesheet>\r\n\r\n#### The Journal Page Using Two Data Sources\r\n\r\nThe problem with this is that the Entries data source does not include all the elements required to display the full entry. We could include all the elements in the XML, but this would not be efficient to have all the data for every entry included in the XML output for the page. The most efficient way to display the full entry would be to prevent the entry from being included in the XML output if the `$entry` parameter has no value, but to include the full entry data in the XML output when the `$entry` parameter does have a value. To display the entry, simply select the entry node set in the `xsl:for-each` instruction.\r\n\r\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n    <xsl:stylesheet version=\"1.0\"\r\n        xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n    \r\n    <xsl:output method=\"xml\"\r\n        doctype-public=\"-//W3C//DTD XHTML 1.0 Strict//EN\"\r\n        doctype-system=\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\r\n        omit-xml-declaration=\"yes\"\r\n        encoding=\"UTF-8\"\r\n        indent=\"yes\" />\r\n    \r\n    <xsl:template match=\"/\">\r\n    <html>\r\n    <head>\r\n        <title><xsl:value-of select=\"$page-title\"/> | <xsl:value-of select=\"$website-name\"/></title>\r\n    </head>\r\n    <body>\r\n        <h1><xsl:value-of select=\"$website-name\"/></h1>\r\n        <h2><xsl:value-of select=\"$page-title\"/></h2>\r\n		<xsl:choose>\r\n			<xsl:when test=\"$entry\">\r\n				<xsl:for-each select=\"data/entry/entry\">\r\n					<h3><xsl:value-of select=\"title\"/></h3>\r\n					<p class=\"meta\">Posted <xsl:value-of select=\"date\"/>\r\n						<xsl:if test=\"category\">\r\n							<xsl:text> in </xsl:text>\r\n							<xsl:value-of select=\"category/item\"/>\r\n						</xsl:if>\r\n					</p>\r\n					<xsl:copy-of select=\"description/*\"/>\r\n				</xsl:for-each>\r\n			</xsl:when>\r\n			<xsl:otherwise>\r\n				<xsl:for-each select=\"data/entries/entry\">\r\n					<h3><xsl:value-of select=\"title\"/></h3>\r\n					<p class=\"meta\">Posted <xsl:value-of select=\"date\"/>\r\n						<xsl:if test=\"category\">\r\n							<xsl:text> in </xsl:text>\r\n							<xsl:value-of select=\"category/item\"/>\r\n						</xsl:if>\r\n					</p>\r\n					<xsl:copy-of select=\"description/*\"/>\r\n				</xsl:for-each>\r\n			</xsl:otherwise>\r\n		</xsl:choose>\r\n    </body>\r\n    </html>\r\n    </xsl:template>\r\n    \r\n    </xsl:stylesheet>\r\n\r\nSo, in this case, the data source does the filtering for us.\r\n\r\nOnce you understand the basics of configuring sections, data sources and pages, and building templates with XSLT, you should be well on your way to discovering just how flexible Symphony can be for developing sites that go far beyond the traditional blog or brochure site.\r\n', '<p>The <a href=\"http://designprojectx.com/tutorials/hello-world-a-basic-xsl-stylesheet/\">Hello World</a> example used a skeleton XSL stylesheet to provide the minimum necessary to create a web page with an XHTML 1.0 Strict doctype. For this tutorial, we will be recreating the Journal overview page. We can refer to the XML output shown in the previous entry on <a href=\"http://designprojectx.com/tutorials/xml-output-and-the-debug-page/\">XML Output and the Debug Page</a> for the XML data that will be processed by the XSLT template.</p>\n\n<h5>The Journal Page</h5>\n\n<p>First, create the Journal page. Use the following settings to configure the page:</p>\n\n<h6>URL Settings</h6>\n\n<ul>\n<li>Parent Page: /</li>\n<li>URL Handle: journal</li>\n<li>URL Parameters: entry</li>\n</ul>\n\n<h6>Page Metadata</h6>\n\n<ul>\n<li>Events: (none)</li>\n<li>Data Sources: Entries, Entry, Navigation, Section</li>\n<li>Page Type: (none)</li>\n</ul>\n\n<h6>Page Data</h6>\n\n<ul>\n<li>Title: Journal</li>\n<li>Body: (see the page template below)</li>\n<li>Utilities: (none)</li>\n</ul>\n\n<h5>The Page Template</h5>\n\n<p>Using a couple of the available page parameters, <code>$website-name</code> and <code>$page-title</code>, we can add a page title to the template use an <code>xsl:value-of</code> instruction.</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;xsl:stylesheet version=\"1.0\"\n    xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;\n\n&lt;xsl:output method=\"xml\"\n    doctype-public=\"-//W3C//DTD XHTML 1.0 Strict//EN\"\n    doctype-system=\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\n    omit-xml-declaration=\"yes\"\n    encoding=\"UTF-8\"\n    indent=\"yes\" /&gt;\n\n&lt;xsl:template match=\"/\"&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;&lt;xsl:value-of select=\"$page-title\"/&gt; | &lt;xsl:value-of select=\"$website-name\"/&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;&lt;xsl:value-of select=\"$website-name\"/&gt;&lt;/h1&gt;\n    &lt;h2&gt;&lt;xsl:value-of select=\"$page-title\"/&gt;&lt;/h2&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;/xsl:template&gt;\n\n&lt;/xsl:stylesheet&gt;\n</code></pre>\n\n<h4>Adding Data from the XML to the Result Document</h4>\n\n<p>Using an XPath expression, the value of an entry title can be output to the result document. To find the title of every entry in our list of entries, we can use the Entries data source and an <code>xsl:for-each</code> instruction to select every entry node and output the entry Title field value with an <code>xsl:value-of</code> instruction.</p>\n\n<pre><code>&lt;xsl:for-each select=\"data/entries/entry\"&gt;\n    &lt;h3&gt;&lt;xsl:value-of select=\"title\"/&gt;&lt;/h3&gt;\n&lt;/xsl:for-each&gt;\n</code></pre>\n\n<p>To include the date the entry was posted, we can add a paragraph element with another <code>xsl:value-of</code> instruction.</p>\n\n<pre><code>&lt;xsl:for-each select=\"data/entries/entry\"&gt;\n    &lt;h3&gt;&lt;xsl:value-of select=\"title\"/&gt;&lt;/h3&gt;\n    &lt;p class=\"meta\"&gt;Posted &lt;xsl:value-of select=\"date\"/&gt;&lt;/p&gt;\n&lt;/xsl:for-each&gt;\n</code></pre>\n\n<p>To include the category assigned to the entry, we can test whether a value exists for the category field and add the value to the output if it does.</p>\n\n<pre><code>&lt;xsl:for-each select=\"data/entries/entry\"&gt;\n    &lt;h3&gt;&lt;xsl:value-of select=\"title\"/&gt;&lt;/h3&gt;\n    &lt;p class=\"meta\"&gt;Posted &lt;xsl:value-of select=\"date\"/&gt;\n        &lt;xsl:if test=\"category\"&gt;\n            &lt;xsl:text&gt; in &lt;/xsl:text&gt;\n            &lt;xsl:value-of select=\"category/item\"/&gt;\n        &lt;/xsl:if&gt;\n    &lt;/p&gt;\n&lt;/xsl:for-each&gt;\n</code></pre>\n\n<p>To include the value of the <code>description</code> field, we can use a different instruction that includes not only the text value of a node but also the XML nodes contained by the <code>description</code> node. Since Markdown is being used to format the entries, the <code>description</code> node of the XML will contain at least <code>&lt;p&gt;</code> elements, and possibly several different HTML elements. The <code>xsl:copy-of</code> instruction will output a copy of the selected XML node including the selected element. To select all the child elements of the <code>description</code> element, without including the body element node itself, use the wildcard selector <code>*</code> to select all child elements.</p>\n\n<pre><code>&lt;xsl:for-each select=\"data/entries/entry\"&gt;\n    &lt;h3&gt;&lt;xsl:value-of select=\"title\"/&gt;&lt;/h3&gt;\n    &lt;p class=\"meta\"&gt;Posted &lt;xsl:value-of select=\"date\"/&gt;\n        &lt;xsl:if test=\"category\"&gt;\n            &lt;xsl:text&gt; in &lt;/xsl:text&gt;\n            &lt;xsl:value-of select=\"category/item\"/&gt;\n        &lt;/xsl:if&gt;\n    &lt;/p&gt;\n    &lt;xsl:copy-of select=\"description/*\"/&gt;\n&lt;/xsl:for-each&gt;\n</code></pre>\n\n<h4>The Overview Page Template</h4>\n\n<p>The completed overview page will display the list of available Journal entries with a title, date, category and a brief description of the entry.</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;xsl:stylesheet version=\"1.0\"\n    xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;\n\n&lt;xsl:output method=\"xml\"\n    doctype-public=\"-//W3C//DTD XHTML 1.0 Strict//EN\"\n    doctype-system=\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\n    omit-xml-declaration=\"yes\"\n    encoding=\"UTF-8\"\n    indent=\"yes\" /&gt;\n\n&lt;xsl:template match=\"/\"&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;&lt;xsl:value-of select=\"$page-title\"/&gt; | &lt;xsl:value-of select=\"$website-name\"/&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;&lt;xsl:value-of select=\"$website-name\"/&gt;&lt;/h1&gt;\n    &lt;h2&gt;&lt;xsl:value-of select=\"$page-title\"/&gt;&lt;/h2&gt;\n    &lt;xsl:for-each select=\"data/entries/entry\"&gt;\n        &lt;h3&gt;&lt;xsl:value-of select=\"title\"/&gt;&lt;/h3&gt;\n        &lt;p class=\"meta\"&gt;Posted &lt;xsl:value-of select=\"date\"/&gt;\n            &lt;xsl:if test=\"category\"&gt;\n                &lt;xsl:text&gt; in &lt;/xsl:text&gt;\n                &lt;xsl:value-of select=\"category/item\"/&gt;\n            &lt;/xsl:if&gt;\n        &lt;/p&gt;\n        &lt;xsl:copy-of select=\"description/*\"/&gt;\n    &lt;/xsl:for-each&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;/xsl:template&gt;\n\n&lt;/xsl:stylesheet&gt;\n</code></pre>\n\n<p>The completed overview page will display the list of available Journal entries with a title, date, category and brief description of the entry.</p>\n\n<h4>Filtering Entries with XSLT</h4>\n\n<p>To limit the number of entries that is output by the template, the selected node set can be filtered by using a predicate on the <code>xsl:for-each</code> instruction. The following instruction will select the first entry.</p>\n\n<pre><code>&lt;xsl:for-each select=\"data/entries/entry[position() = 1]\"&gt;\n</code></pre>\n\n<p>The shorthand version omits the need for the equality operator. For example, to select the fourth entry:</p>\n\n<pre><code>&lt;xsl:for-each select=\"data/entries/entry[4]\"&gt;\n</code></pre>\n\n<p>To select the first 4 entries:</p>\n\n<pre><code>&lt;xsl:for-each select=\"data/entries/entry[position() &amp;lt;= 4]\"&gt;\n</code></pre>\n\n<p>To select the last entry:</p>\n\n<pre><code>&lt;xsl:for-each select=\"data/entries/entry[position() = last()]\"&gt;\n</code></pre>\n\n<p>To select an entry by its <code>id</code> attribute use the attribute selector, <code>@</code>:</p>\n\n<pre><code>&lt;xsl:for-each select=\"data/entries/entry[@id = 36]\"&gt;\n</code></pre>\n\n<h4>Sorting Entries with XSLT</h4>\n\n<p>To sort the entries that are output by the template, the selected node set can be sorted by using an <code>xsl:sort</code> instruction. To avoid throwing an XSLT processor error, the <code>xsl:sort</code> instruction must immediately follow the opening tag of the <code>xsl:for-each</code> instruction. It is always expressed as a self-closing XML element. The following XSL instructions will sort the entries by the text value of the date field.</p>\n\n<pre><code>&lt;xsl:for-each select=\"data/entries/entry\"&gt;\n    &lt;xsl:sort select=\"date\" order=\"ascending\"/&gt;\n    &lt;h3&gt;&lt;xsl:value-of select=\"title\"/&gt;&lt;/h3&gt;\n&lt;/xsl:for-each&gt;\n</code></pre>\n\n<p>If more than one entry has been posted on the same day, you might also want to sort the entries by the time to keep the entries in correct chronological order. Use the <code>@</code> selector to select attributes of an XML element. In this case, we are selecting the <code>time</code> attribute of the <code>date</code> element. The following instructions will sort first by the <code>date</code> field, then by the <code>time</code> field.</p>\n\n<pre><code>&lt;xsl:for-each select=\"data/entries/entry\"&gt;\n    &lt;xsl:sort select=\"date\" order=\"ascending\"/&gt;\n    &lt;xsl:sort select=\"date/@time\" order=\"ascending\"/&gt;\n    &lt;h3&gt;&lt;xsl:value-of select=\"title\"/&gt;&lt;/h3&gt;\n&lt;/xsl:for-each&gt;\n</code></pre>\n\n<p>Note that sorting by the date field works correctly here, even though the default sort mode evaluates a value as string data type, only because the ISO format of the date can correctly be sorted as a string value. The default sort order is also <code>ascending</code>, so we could have omitted the order attribute of the <code>xsl:sort</code> instruction. To sort by System ID, it is possible to change the sort mode:</p>\n\n<pre><code>&lt;xsl:for-each select=\"data/entries/entry\"&gt;\n    &lt;xsl:sort select=\"@id\" data-type=\"number\"/&gt;\n    &lt;h3&gt;&lt;xsl:value-of select=\"title\"/&gt;&lt;/h3&gt;\n&lt;/xsl:for-each&gt;\n</code></pre>\n\n<h4>Data Source Filtering and Sorting</h4>\n\n<p>To keep the XML efficient and optimized, it is often best to filter and sort entries when configuring data sources. Refer to the Data Sources section in the <a href=\"http://symphony-cms.com/documentation/interface/#sec-2\">documentation</a> for more information.</p>\n\n<p>The <a href=\"http://designprojectx.com/tutorials/symphony-data-sources/\">Symphony Data Sources</a> tutorial describes how to configure the Entry data source to filter the Entries section by the Title field and sort by the Date field.</p>\n\n<h5>Managing Views with URL Parameters</h5>\n\n<p>Symphony uses URL parameters to manage different views of the same data set, or to dynamically modify the XML data set based on page parameters or data source parameters. Using XSLT conditional instructions, it is possible to serve different views using the same page template. When creating pages, URL parameters can be configured. Instead of using traditional PHP GET strings with name/value pairs, such as <code>?name=value&amp;foo=bar</code>, Symphony uses clean URLs that are mapped to XSL page parameters configured in the page template. The drawback is that the values have to appear in the order specified by the page template. So, with the GET example, we could configure a page with the URL parameters <code>name/foo</code>. Then to navigate to a page that is filtered by these two parameters, we could express the values in the URL:</p>\n\n<pre><code>http://www.example.com/journal/value/bar/\n</code></pre>\n\n<p>You can specify any valid XSL parameter name for each URL parameter. Since Symphony entry handles are created with lowercase characters and hyphens, it&#8217;s generally best to stick to this character set. As with any XSL parameter, never begin the name with a number. You could potential use the following as your URL Parameters in the page template: <code>a/b/c/d/e/f/g</code> and these would be mapped to the following XSL parameters:</p>\n\n<ul>\n<li>$a</li>\n<li>$b</li>\n<li>$c</li>\n<li>$d</li>\n<li>$e</li>\n<li>$f</li>\n<li>$g</li>\n</ul>\n\n<p>To manage different views, however, this would require at least the following logic to display different results for each parameter:</p>\n\n<pre><code>&lt;xsl:choose&gt;\n    &lt;xsl:when test=\"$g\"&gt;\n        &lt;!-- Do something when $g has a value --&gt;\n    &lt;/xsl:when&gt;\n    &lt;xsl:when test=\"$f\"&gt;\n        &lt;!-- Do something when $f has a value --&gt;\n    &lt;/xsl:when&gt;\n    &lt;xsl:when test=\"$e\"&gt;\n        &lt;!-- Do something when $e has a value --&gt;\n    &lt;/xsl:when&gt;\n    &lt;xsl:when test=\"$d\"&gt;\n        &lt;!-- Do something when $d has a value --&gt;\n    &lt;/xsl:when&gt;\n    &lt;xsl:when test=\"$c\"&gt;\n        &lt;!-- Do something when $c has a value --&gt;\n    &lt;/xsl:when&gt;\n    &lt;xsl:when test=\"$b\"&gt;\n        &lt;!-- Do something when $b has a value --&gt;\n    &lt;/xsl:when&gt;\n    &lt;xsl:otherwise&gt;\n        &lt;!-- Do something when $a has a value --&gt;\n    &lt;/xsl:otherwise&gt;\n&lt;/xsl:choose&gt;\n</code></pre>\n\n<p>The <code>xsl:choose</code> instruction is the XSLT version of a switch statement or if/else conditionals in procedural programming languages.</p>\n\n<p>The Journal page has been configured with a single URL parameter: <code>entry</code>. To create a page template that will display an overview when the <code>$entry</code> parameter has no value, that is, when the browser has navigated to the Journal page at <code>http://www.example.com/journal/</code>, we can use the Entries data source. When the browser has navigated to a specific entry, <code>http://www.example.com/journal/entry-title/</code>, we can use the Entry data source. An <code>xsl:choose</code> instruction provides the logic to display an overview of entries or the full selected entry.</p>\n\n<pre><code>&lt;xsl:choose&gt;\n    &lt;xsl:when test=\"$entry\"&gt;\n        &lt;!-- Do something when $entry has a value --&gt;\n    &lt;/xsl:when&gt;\n    &lt;xsl:otherwise&gt;\n        &lt;!-- Do something when $entry has no value --&gt;\n    &lt;/xsl:otherwise&gt;\n&lt;/xsl:choose&gt;\n</code></pre>\n\n<h4>The Journal Page Using a Single Data Source</h4>\n\n<p>Apply this logic to the Journal page template, where we filter the entry using XSLT. Notice the predicate in the <code>xsl:for-each</code> instruction:</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;xsl:stylesheet version=\"1.0\"\n    xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;\n\n&lt;xsl:output method=\"xml\"\n    doctype-public=\"-//W3C//DTD XHTML 1.0 Strict//EN\"\n    doctype-system=\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\n    omit-xml-declaration=\"yes\"\n    encoding=\"UTF-8\"\n    indent=\"yes\" /&gt;\n\n&lt;xsl:template match=\"/\"&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;&lt;xsl:value-of select=\"$page-title\"/&gt; | &lt;xsl:value-of select=\"$website-name\"/&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;&lt;xsl:value-of select=\"$website-name\"/&gt;&lt;/h1&gt;\n    &lt;h2&gt;&lt;xsl:value-of select=\"$page-title\"/&gt;&lt;/h2&gt;\n    &lt;xsl:choose&gt;\n        &lt;xsl:when test=\"$entry\"&gt;\n            &lt;xsl:for-each select=\"data/entries/entry[title/@handle = $entry]\"&gt;\n                &lt;h3&gt;&lt;xsl:value-of select=\"title\"/&gt;&lt;/h3&gt;\n                &lt;p class=\"meta\"&gt;Posted &lt;xsl:value-of select=\"date\"/&gt;\n                    &lt;xsl:if test=\"category\"&gt;\n                        &lt;xsl:text&gt; in &lt;/xsl:text&gt;\n                        &lt;xsl:value-of select=\"category/item\"/&gt;\n                    &lt;/xsl:if&gt;\n                &lt;/p&gt;\n                &lt;xsl:copy-of select=\"description/*\"/&gt;\n            &lt;/xsl:for-each&gt;\n        &lt;/xsl:when&gt;\n        &lt;xsl:otherwise&gt;\n            &lt;xsl:for-each select=\"data/entries/entry\"&gt;\n                &lt;h3&gt;&lt;xsl:value-of select=\"title\"/&gt;&lt;/h3&gt;\n                &lt;p class=\"meta\"&gt;Posted &lt;xsl:value-of select=\"date\"/&gt;\n                    &lt;xsl:if test=\"category\"&gt;\n                        &lt;xsl:text&gt; in &lt;/xsl:text&gt;\n                        &lt;xsl:value-of select=\"category/item\"/&gt;\n                    &lt;/xsl:if&gt;\n                &lt;/p&gt;\n                &lt;xsl:copy-of select=\"description/*\"/&gt;\n            &lt;/xsl:for-each&gt;\n        &lt;/xsl:otherwise&gt;\n    &lt;/xsl:choose&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;/xsl:template&gt;\n\n&lt;/xsl:stylesheet&gt;\n</code></pre>\n\n<h4>The Journal Page Using Two Data Sources</h4>\n\n<p>The problem with this is that the Entries data source does not include all the elements required to display the full entry. We could include all the elements in the XML, but this would not be efficient to have all the data for every entry included in the XML output for the page. The most efficient way to display the full entry would be to prevent the entry from being included in the XML output if the <code>$entry</code> parameter has no value, but to include the full entry data in the XML output when the <code>$entry</code> parameter does have a value. To display the entry, simply select the entry node set in the <code>xsl:for-each</code> instruction.</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;xsl:stylesheet version=\"1.0\"\n    xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;\n\n&lt;xsl:output method=\"xml\"\n    doctype-public=\"-//W3C//DTD XHTML 1.0 Strict//EN\"\n    doctype-system=\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\n    omit-xml-declaration=\"yes\"\n    encoding=\"UTF-8\"\n    indent=\"yes\" /&gt;\n\n&lt;xsl:template match=\"/\"&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;&lt;xsl:value-of select=\"$page-title\"/&gt; | &lt;xsl:value-of select=\"$website-name\"/&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;&lt;xsl:value-of select=\"$website-name\"/&gt;&lt;/h1&gt;\n    &lt;h2&gt;&lt;xsl:value-of select=\"$page-title\"/&gt;&lt;/h2&gt;\n    &lt;xsl:choose&gt;\n        &lt;xsl:when test=\"$entry\"&gt;\n            &lt;xsl:for-each select=\"data/entry/entry\"&gt;\n                &lt;h3&gt;&lt;xsl:value-of select=\"title\"/&gt;&lt;/h3&gt;\n                &lt;p class=\"meta\"&gt;Posted &lt;xsl:value-of select=\"date\"/&gt;\n                    &lt;xsl:if test=\"category\"&gt;\n                        &lt;xsl:text&gt; in &lt;/xsl:text&gt;\n                        &lt;xsl:value-of select=\"category/item\"/&gt;\n                    &lt;/xsl:if&gt;\n                &lt;/p&gt;\n                &lt;xsl:copy-of select=\"description/*\"/&gt;\n            &lt;/xsl:for-each&gt;\n        &lt;/xsl:when&gt;\n        &lt;xsl:otherwise&gt;\n            &lt;xsl:for-each select=\"data/entries/entry\"&gt;\n                &lt;h3&gt;&lt;xsl:value-of select=\"title\"/&gt;&lt;/h3&gt;\n                &lt;p class=\"meta\"&gt;Posted &lt;xsl:value-of select=\"date\"/&gt;\n                    &lt;xsl:if test=\"category\"&gt;\n                        &lt;xsl:text&gt; in &lt;/xsl:text&gt;\n                        &lt;xsl:value-of select=\"category/item\"/&gt;\n                    &lt;/xsl:if&gt;\n                &lt;/p&gt;\n                &lt;xsl:copy-of select=\"description/*\"/&gt;\n            &lt;/xsl:for-each&gt;\n        &lt;/xsl:otherwise&gt;\n    &lt;/xsl:choose&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;/xsl:template&gt;\n\n&lt;/xsl:stylesheet&gt;\n</code></pre>\n\n<p>So, in this case, the data source does the filtering for us.</p>\n\n<p>Once you understand the basics of configuring sections, data sources and pages, and building templates with XSLT, you should be well on your way to discovering just how flexible Symphony can be for developing sites that go far beyond the traditional blog or brochure site.</p>\n');
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (207, 41, 'The question was about how to manage a page that needed to distinguish between categories of entries, such a series of campaigns organized into three categories: \"type\", \"industry\" and \"client\". The page URLs might look like this:\r\n\r\n    http://www.example.com/casestudies/a-type-name/a-specific-campaign/\r\n    http://www.example.com/casestudies/a-industry-name/a-specific-campaign/\r\n    http://www.example.com/casestudies/a-client-name/a-specific-campaign/\r\n\r\nIf the URL parameters were `a/b` you could use these parameters to filter the data sources:\r\n\r\n * $a\r\n * $b\r\n\r\nThen the page template could look something like this:\r\n\r\n	<xsl:choose>\r\n		<xsl:when test=\"$b\">\r\n			<!-- Do something when $b has a value, \r\n				such as display entries that have a title handle\r\n				that matches the $b parameter -->\r\n			<xsl:choose>\r\n				<xsl:when test=\"$a = \'type\'\">\r\n					<xsl:for-each select=\"/data/casestudy/entry[category/item/@handle = $a and title/@handle = $b]\">\r\n						<!-- A case study from the type category -->\r\n					</xsl:for-each>\r\n				</xsl:when>\r\n				<xsl:when test=\"$a = \'industry\'\">\r\n					<xsl:for-each select=\"/data/casestudy/entry[category/item/@handle = $a and title/@handle = $b]\">\r\n						<!-- A case study from the industry category -->\r\n					</xsl:for-each>\r\n				</xsl:when>\r\n				<xsl:when test=\"$a = \'client\'\">\r\n					<xsl:for-each select=\"/data/casestudy/entry[category/item/@handle = $a and title/@handle = $b]\">\r\n						<!-- A case study from the client category -->\r\n					</xsl:for-each>\r\n				</xsl:when>\r\n			</xsl:choose>\r\n		</xsl:when>\r\n		<xsl:when test=\"$a\">\r\n			<!-- Do something when $a has a value and $b has no value, \r\n				such as display an overview of all entries \r\n				of a particular category -->\r\n			<xsl:choose>\r\n				<xsl:when test=\"$a = \'type\'\">\r\n					<xsl:for-each select=\"/data/casestudies/entry[category/item/@handle = $a]\">\r\n						<!-- A case study from the type category -->\r\n					</xsl:for-each>\r\n				</xsl:when>\r\n				<xsl:when test=\"$a = \'industry\'\">\r\n					<xsl:for-each select=\"/data/casestudies/entry[category/item/@handle = $a]\">\r\n						<!-- A case study from the industry category -->\r\n					</xsl:for-each>\r\n				</xsl:when>\r\n				<xsl:when test=\"$a = \'client\'\">\r\n					<xsl:for-each select=\"/data/casestudies/entry[category/item/@handle = $a]\">\r\n						<!-- A case study from the client category -->\r\n					</xsl:for-each>\r\n				</xsl:when>\r\n			</xsl:choose>\r\n		</xsl:when>\r\n		<xsl:otherwise>\r\n			<!-- Do something when neither $a nor $b has a value, \r\n				such as an introduction to case studies -->\r\n		</xsl:otherwise>\r\n	</xsl:choose>\r\n\r\nUse two data sources: `Case Studies` and `Case Study`. Select the `casestudies` node for the overview data source. Select the `casestudy` node for the complete entry. Filter the `Case Study` data source to include the entry with the Title field that matches `$a` with a required URL parameter `$b`.\r\n\r\n#### The Same Result: Simplified Code\r\n\r\nThis can actually be simplified to the following, since it accomplishes the same thing:\r\n\r\n	<xsl:choose>\r\n		<xsl:when test=\"$b\">\r\n			<xsl:for-each select=\"/data/casestudy/entry[category/item/@handle = $a and title/@handle = $b]\">\r\n				<!-- A case study: full entry -->\r\n			</xsl:for-each>\r\n		</xsl:when>\r\n		<xsl:when test=\"$a\">\r\n			<xsl:for-each select=\"/data/casestudies/entry[category/item/@handle = $a]\">\r\n				<!-- A case study: excerpt -->\r\n			</xsl:for-each>\r\n		</xsl:when>\r\n		<xsl:otherwise>\r\n			<!-- Do something when neither $a nor $b has a value, \r\n				such as an introduction to case studies -->\r\n		</xsl:otherwise>\r\n	</xsl:choose>\r\n\r\nBut this doesn\'t demonstrate the concept of nested conditionals. It does demonstrate a rather elegant solution to a problem that might be much more difficult to accomplish using another templating system.\r\n\r\n#### Testing Node Values\r\n\r\nPerhaps, the question was a little more complex than I first thought. The goal was not to specify a category, but a particular subcategory of a parent category. Then, it would be necessary to test the value of the items in each category field. Assuming that each category is a select box or select box link with its own field, then we can use the first example with some node selection in the conditionals. More than likely, the entry title will be unique for each entry, so the full case study requires very basic logic. The overviews might be a little different, since the value of the `$a` parameter needs to match the title handle of the item in each category.\r\n\r\n    <xsl:choose>\r\n        <xsl:when test=\"$b\">\r\n            <!-- Do something when $b has a value, \r\n                such as display entries that have a title handle\r\n                that matches the $b parameter -->\r\n            <xsl:for-each select=\"/data/casestudy/entry[title/@handle = $b]\">\r\n                <!-- A case study selected by type -->\r\n            </xsl:for-each>\r\n        </xsl:when>\r\n        <xsl:when test=\"$a\">\r\n            <!-- Do something when $a has a value and $b has no value, \r\n                such as display an overview of all entries \r\n                of a particular category -->\r\n            <xsl:choose>\r\n                <xsl:when test=\"$a = /data/casestudies/entry/type/item/@handle\">\r\n                    <xsl:for-each select=\"/data/casestudies/entry[type/item/@handle = $a]\">\r\n                        <!-- A case study with an type title handle equal to $a -->\r\n                    </xsl:for-each>\r\n                </xsl:when>\r\n                <xsl:when test=\"$a = /data/casestudies/entry/industry/item/@handle\">\r\n                    <xsl:for-each select=\"/data/casestudies/entry[industry/item/@handle = $a]\">\r\n                        <!-- A case study with an industry title handle equal to $a -->\r\n                    </xsl:for-each>\r\n                </xsl:when>\r\n                <xsl:when test=\"$a = /data/casestudies/entry/client/item/@handle\">\r\n                    <xsl:for-each select=\"/data/casestudies/entry[client/item/@handle = $a]\">\r\n                        <!-- A case study with an client title handle equal to $a -->\r\n                    </xsl:for-each>\r\n                </xsl:when>\r\n            </xsl:choose>\r\n        </xsl:when>\r\n        <xsl:otherwise>\r\n            <!-- Do something when neither $a nor $b has a value, \r\n                such as an introduction to case studies -->\r\n        </xsl:otherwise>\r\n    </xsl:choose>\r\n\r\n##### Simplified\r\n\r\nAgain, this could probably be simplified:\r\n\r\n    <xsl:choose>\r\n        <xsl:when test=\"$b\">\r\n            <xsl:for-each select=\"/data/casestudy/entry[title/@handle = $b]\">\r\n                <!-- A case study selected by type -->\r\n            </xsl:for-each>\r\n        </xsl:when>\r\n        <xsl:when test=\"$a\">\r\n            <xsl:for-each select=\"/data/casestudies/entry[type/item/@handle = $a]\">\r\n                <!-- A case study with a type title handle equal to $a -->\r\n            </xsl:for-each>\r\n            <xsl:for-each select=\"/data/casestudies/entry[industry/item/@handle = $a]\">\r\n                <!-- A case study with an industry title handle equal to $a -->\r\n            </xsl:for-each>\r\n            <xsl:for-each select=\"/data/casestudies/entry[client/item/@handle = $a]\">\r\n                <!-- A case study with a client title handle equal to $a -->\r\n            </xsl:for-each>\r\n        </xsl:when>\r\n        <xsl:otherwise>\r\n            <!-- Do something when neither $a nor $b has a value, \r\n                such as an introduction to case studies -->\r\n        </xsl:otherwise>\r\n    </xsl:choose>\r\n\r\nFor more information about data source filtering and URL parameters, read the discussion, [Do you speak DS Editor v2?](http://symphony-cms.com/forum/discussions/268/#position-4) on the Symphony forum and the Symphony [Documentation about Data Sources](http://symphony-cms.com/documentation/interface/).', '<p>The question was about how to manage a page that needed to distinguish between categories of entries, such a series of campaigns organized into three categories: &#8220;type&#8221;, &#8220;industry&#8221; and &#8220;client&#8221;. The page URLs might look like this:</p>\n\n<pre><code>http://www.example.com/casestudies/a-type-name/a-specific-campaign/\nhttp://www.example.com/casestudies/a-industry-name/a-specific-campaign/\nhttp://www.example.com/casestudies/a-client-name/a-specific-campaign/\n</code></pre>\n\n<p>If the URL parameters were <code>a/b</code> you could use these parameters to filter the data sources:</p>\n\n<ul>\n<li>$a</li>\n<li>$b</li>\n</ul>\n\n<p>Then the page template could look something like this:</p>\n\n<pre><code>&lt;xsl:choose&gt;\n    &lt;xsl:when test=\"$b\"&gt;\n        &lt;!-- Do something when $b has a value, \n            such as display entries that have a title handle\n            that matches the $b parameter --&gt;\n        &lt;xsl:choose&gt;\n            &lt;xsl:when test=\"$a = \'type\'\"&gt;\n                &lt;xsl:for-each select=\"/data/casestudy/entry[category/item/@handle = $a and title/@handle = $b]\"&gt;\n                    &lt;!-- A case study from the type category --&gt;\n                &lt;/xsl:for-each&gt;\n            &lt;/xsl:when&gt;\n            &lt;xsl:when test=\"$a = \'industry\'\"&gt;\n                &lt;xsl:for-each select=\"/data/casestudy/entry[category/item/@handle = $a and title/@handle = $b]\"&gt;\n                    &lt;!-- A case study from the industry category --&gt;\n                &lt;/xsl:for-each&gt;\n            &lt;/xsl:when&gt;\n            &lt;xsl:when test=\"$a = \'client\'\"&gt;\n                &lt;xsl:for-each select=\"/data/casestudy/entry[category/item/@handle = $a and title/@handle = $b]\"&gt;\n                    &lt;!-- A case study from the client category --&gt;\n                &lt;/xsl:for-each&gt;\n            &lt;/xsl:when&gt;\n        &lt;/xsl:choose&gt;\n    &lt;/xsl:when&gt;\n    &lt;xsl:when test=\"$a\"&gt;\n        &lt;!-- Do something when $a has a value and $b has no value, \n            such as display an overview of all entries \n            of a particular category --&gt;\n        &lt;xsl:choose&gt;\n            &lt;xsl:when test=\"$a = \'type\'\"&gt;\n                &lt;xsl:for-each select=\"/data/casestudies/entry[category/item/@handle = $a]\"&gt;\n                    &lt;!-- A case study from the type category --&gt;\n                &lt;/xsl:for-each&gt;\n            &lt;/xsl:when&gt;\n            &lt;xsl:when test=\"$a = \'industry\'\"&gt;\n                &lt;xsl:for-each select=\"/data/casestudies/entry[category/item/@handle = $a]\"&gt;\n                    &lt;!-- A case study from the industry category --&gt;\n                &lt;/xsl:for-each&gt;\n            &lt;/xsl:when&gt;\n            &lt;xsl:when test=\"$a = \'client\'\"&gt;\n                &lt;xsl:for-each select=\"/data/casestudies/entry[category/item/@handle = $a]\"&gt;\n                    &lt;!-- A case study from the client category --&gt;\n                &lt;/xsl:for-each&gt;\n            &lt;/xsl:when&gt;\n        &lt;/xsl:choose&gt;\n    &lt;/xsl:when&gt;\n    &lt;xsl:otherwise&gt;\n        &lt;!-- Do something when neither $a nor $b has a value, \n            such as an introduction to case studies --&gt;\n    &lt;/xsl:otherwise&gt;\n&lt;/xsl:choose&gt;\n</code></pre>\n\n<p>Use two data sources: <code>Case Studies</code> and <code>Case Study</code>. Select the <code>casestudies</code> node for the overview data source. Select the <code>casestudy</code> node for the complete entry. Filter the <code>Case Study</code> data source to include the entry with the Title field that matches <code>$a</code> with a required URL parameter <code>$b</code>.</p>\n\n<h4>The Same Result: Simplified Code</h4>\n\n<p>This can actually be simplified to the following, since it accomplishes the same thing:</p>\n\n<pre><code>&lt;xsl:choose&gt;\n    &lt;xsl:when test=\"$b\"&gt;\n        &lt;xsl:for-each select=\"/data/casestudy/entry[category/item/@handle = $a and title/@handle = $b]\"&gt;\n            &lt;!-- A case study: full entry --&gt;\n        &lt;/xsl:for-each&gt;\n    &lt;/xsl:when&gt;\n    &lt;xsl:when test=\"$a\"&gt;\n        &lt;xsl:for-each select=\"/data/casestudies/entry[category/item/@handle = $a]\"&gt;\n            &lt;!-- A case study: excerpt --&gt;\n        &lt;/xsl:for-each&gt;\n    &lt;/xsl:when&gt;\n    &lt;xsl:otherwise&gt;\n        &lt;!-- Do something when neither $a nor $b has a value, \n            such as an introduction to case studies --&gt;\n    &lt;/xsl:otherwise&gt;\n&lt;/xsl:choose&gt;\n</code></pre>\n\n<p>But this doesn&#8217;t demonstrate the concept of nested conditionals. It does demonstrate a rather elegant solution to a problem that might be much more difficult to accomplish using another templating system.</p>\n\n<h4>Testing Node Values</h4>\n\n<p>Perhaps, the question was a little more complex than I first thought. The goal was not to specify a category, but a particular subcategory of a parent category. Then, it would be necessary to test the value of the items in each category field. Assuming that each category is a select box or select box link with its own field, then we can use the first example with some node selection in the conditionals. More than likely, the entry title will be unique for each entry, so the full case study requires very basic logic. The overviews might be a little different, since the value of the <code>$a</code> parameter needs to match the title handle of the item in each category.</p>\n\n<pre><code>&lt;xsl:choose&gt;\n    &lt;xsl:when test=\"$b\"&gt;\n        &lt;!-- Do something when $b has a value, \n            such as display entries that have a title handle\n            that matches the $b parameter --&gt;\n        &lt;xsl:for-each select=\"/data/casestudy/entry[title/@handle = $b]\"&gt;\n            &lt;!-- A case study selected by type --&gt;\n        &lt;/xsl:for-each&gt;\n    &lt;/xsl:when&gt;\n    &lt;xsl:when test=\"$a\"&gt;\n        &lt;!-- Do something when $a has a value and $b has no value, \n            such as display an overview of all entries \n            of a particular category --&gt;\n        &lt;xsl:choose&gt;\n            &lt;xsl:when test=\"$a = /data/casestudies/entry/type/item/@handle\"&gt;\n                &lt;xsl:for-each select=\"/data/casestudies/entry[type/item/@handle = $a]\"&gt;\n                    &lt;!-- A case study with an type title handle equal to $a --&gt;\n                &lt;/xsl:for-each&gt;\n            &lt;/xsl:when&gt;\n            &lt;xsl:when test=\"$a = /data/casestudies/entry/industry/item/@handle\"&gt;\n                &lt;xsl:for-each select=\"/data/casestudies/entry[industry/item/@handle = $a]\"&gt;\n                    &lt;!-- A case study with an industry title handle equal to $a --&gt;\n                &lt;/xsl:for-each&gt;\n            &lt;/xsl:when&gt;\n            &lt;xsl:when test=\"$a = /data/casestudies/entry/client/item/@handle\"&gt;\n                &lt;xsl:for-each select=\"/data/casestudies/entry[client/item/@handle = $a]\"&gt;\n                    &lt;!-- A case study with an client title handle equal to $a --&gt;\n                &lt;/xsl:for-each&gt;\n            &lt;/xsl:when&gt;\n        &lt;/xsl:choose&gt;\n    &lt;/xsl:when&gt;\n    &lt;xsl:otherwise&gt;\n        &lt;!-- Do something when neither $a nor $b has a value, \n            such as an introduction to case studies --&gt;\n    &lt;/xsl:otherwise&gt;\n&lt;/xsl:choose&gt;\n</code></pre>\n\n<h5>Simplified</h5>\n\n<p>Again, this could probably be simplified:</p>\n\n<pre><code>&lt;xsl:choose&gt;\n    &lt;xsl:when test=\"$b\"&gt;\n        &lt;xsl:for-each select=\"/data/casestudy/entry[title/@handle = $b]\"&gt;\n            &lt;!-- A case study selected by type --&gt;\n        &lt;/xsl:for-each&gt;\n    &lt;/xsl:when&gt;\n    &lt;xsl:when test=\"$a\"&gt;\n        &lt;xsl:for-each select=\"/data/casestudies/entry[type/item/@handle = $a]\"&gt;\n            &lt;!-- A case study with a type title handle equal to $a --&gt;\n        &lt;/xsl:for-each&gt;\n        &lt;xsl:for-each select=\"/data/casestudies/entry[industry/item/@handle = $a]\"&gt;\n            &lt;!-- A case study with an industry title handle equal to $a --&gt;\n        &lt;/xsl:for-each&gt;\n        &lt;xsl:for-each select=\"/data/casestudies/entry[client/item/@handle = $a]\"&gt;\n            &lt;!-- A case study with a client title handle equal to $a --&gt;\n        &lt;/xsl:for-each&gt;\n    &lt;/xsl:when&gt;\n    &lt;xsl:otherwise&gt;\n        &lt;!-- Do something when neither $a nor $b has a value, \n            such as an introduction to case studies --&gt;\n    &lt;/xsl:otherwise&gt;\n&lt;/xsl:choose&gt;\n</code></pre>\n\n<p>For more information about data source filtering and URL parameters, read the discussion, <a href=\"http://symphony-cms.com/forum/discussions/268/#position-4\">Do you speak DS Editor v2?</a> on the Symphony forum and the Symphony <a href=\"http://symphony-cms.com/documentation/interface/\">Documentation about Data Sources</a>.</p>\n');
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (209, 42, 'When creating a page template, specify URL parameters to be able to control different page views, depending on the value of each URL parameter. If the URL Parameters `a/b` have been specified in the page template, you could display a couple links to select two different overviews.\r\n\r\n	<ul>\r\n		<li><a href=\"{$root}/products/categories/\">View Products by Category</a></li>\r\n		<li><a href=\"{$root}/products/materials/\">View Products by Material</a></li>\r\n	</ul>\r\n\r\nLet\'s assume that a site needs to display a list of products which can be viewed by category or by material. One strategy might be to create three sections: one for Categories and another for Materials, then a separate section for Products. The Products section could include two Select Box Link fields: one called Category linked to the Title field of the Categories section, and one called Material linked to the Title field of the Materials section. Create three data sources for the overviews that include the elements that would display on an overview page: Products, Categories and Materials.\r\n\r\n#### Creating Lists with XSLT\r\n\r\nList the products by category by first creating a list of the categories:\r\n\r\n	<h3><a href=\"{$root}/products/categories/\">Categories</a></h3>\r\n	<ul>\r\n		<xsl:for-each select=\"/data/categories/entry\">\r\n			<li><a href=\"{$root}/products/{title/@handle}/\"><xsl:value-of select=\"title\"/></a></li>\r\n		</xsl:for-each>\r\n	</ul>\r\n\r\nA list of the materials would be similar:\r\n\r\n	<h3><a href=\"{$root}/products/materials/\">Materials</a></h3>\r\n	<ul>\r\n		<xsl:for-each select=\"/data/materials/entry\">\r\n			<li><a href=\"{$root}/products/{title/@handle}/\"><xsl:value-of select=\"title\"/></a></li>\r\n		</xsl:for-each>\r\n	</ul>\r\n\r\n##### Lists of Lists\r\n\r\nUse a named template to call a list of products for each category, and another to call a list of products for each material:\r\n\r\n	<xsl:template name=\"products-by-category\">\r\n		<xsl:param name=\"category\"/>\r\n		<xsl:for-each select=\"/data/products/entry[category/item/@handle = $category]\">\r\n			<li><a href=\"{$root}/products/{$category}/{title/@handle}/\"><xsl:value-of select=\"title\"/></a></li>\r\n		</xsl:for-each>\r\n	</xsl:template>\r\n\r\n	<xsl:template name=\"products-by-material\">\r\n		<xsl:param name=\"material\"/>\r\n		<xsl:for-each select=\"/data/products/entry[material/item/@handle = $material]\">\r\n			<li><a href=\"{$root}/products/{$category}/{title/@handle}/\"><xsl:value-of select=\"title\"/></a></li>\r\n		</xsl:for-each>\r\n	</xsl:template>\r\n\r\n##### Products by Category\r\n\r\nCall the \"products-by-category\" template to create a list of products organized by category:\r\n\r\n	<xsl:template name=\"products-categories\">\r\n		<h3><a href=\"{$root}/products/categories/\">Categories</a></h3>\r\n		<ul>\r\n			<xsl:for-each select=\"/data/categories/entry\">\r\n				<li>\r\n					<a href=\"{$root}/products/{title/@handle}/\"><xsl:value-of select=\"title\"/></a>\r\n					<ul>\r\n						<xsl:call-template name=\"products-by-category\">\r\n							<xsl:with-param name=\"category\" select=\"title/@handle\"/>\r\n						</xsl:call-template>\r\n					</ul>\r\n				</li>\r\n			</xsl:for-each>\r\n		</ul>\r\n	</xsl:template>\r\n\r\n##### Products by Material\r\n\r\nCall the \"products-by-material\" template to create a list of products organized by material:\r\n\r\n	<xsl:template name=\"products-materials\">\r\n		<h3><a href=\"{$root}/products/materials/\">Materials</a></h3>\r\n		<ul>\r\n			<xsl:for-each select=\"/data/materials/entry\">\r\n				<li>\r\n					<a href=\"{$root}/products/{title/@handle}/\"><xsl:value-of select=\"title\"/></a>\r\n					<ul>\r\n						<xsl:call-template name=\"products-by-material\">\r\n							<xsl:with-param name=\"material\" select=\"title/@handle\"/>\r\n						</xsl:call-template>\r\n					</ul>\r\n				</li>\r\n			</xsl:for-each>\r\n		</ul>\r\n	</xsl:template>\r\n\r\n#### A Named Template to Display Entries \r\n\r\nCreate a named template for displaying each product entry:\r\n\r\n	<xsl:template name=\"product-entry\">\r\n		<h4><a href=\"{$root}/products/{$a}/{title/@handle}/\"><xsl:value-of select=\"title\"/></a></h4>\r\n		<xsl:copy-of select=\"description/*\"/>\r\n	</xsl:template>\r\n\r\n#### Managing Page Views \r\n\r\nThen, create the logic to display each view by using an `xsl:choose` instruction:\r\n\r\n	<xsl:choose>\r\n		<xsl:when test=\"$b\">\r\n			<xsl:for-each select=\"/data/products/entry[title/@handle = $b]\">\r\n				<xsl:call-template name=\"product-entry\"/>\r\n			</xsl:for-each>\r\n		</xsl:when>\r\n		<xsl:when test=\"$a = \'materials\'\">\r\n			<!-- Display a list of materials when the URL is \r\n				http://www.example.com/products/materials/ -->\r\n			<xsl:call-template name=\"products-materials\">\r\n		</xsl:when>\r\n		<xsl:when test=\"$a\">\r\n			<h3>\r\n				<!-- Assuming no category will be identical to a name for a material, \r\n					this should display a single value for the matching material/category -->\r\n				<xsl:value-of select=\"/data/materials/entry[title/@handle = $a]/title\"/>\r\n				<xsl:value-of select=\"/data/catgories/entry[title/@handle = $a]/title\"/>\r\n			</h3>\r\n			<xsl:for-each select=\"/data/products/entry[materials/item/@handle = $a]\">\r\n				<!-- Display products with a material that matches $a -->\r\n				<xsl:call-template name=\"product-entry\"/>\r\n			</xsl:for-each>\r\n			<xsl:for-each select=\"/data/products/entry[category/item/@handle = $a]\">\r\n				<!-- Display products with a category that matches $a -->\r\n				<xsl:call-template name=\"product-entry\"/>\r\n			</xsl:for-each>\r\n		</xsl:when>\r\n		<xsl:otherwise>\r\n			<!-- Display a list of categories when the URL is \r\n				http://www.example.com/products/ -->\r\n			<xsl:call-template name=\"products-categories\">\r\n		</xsl:otherwise>\r\n	</xsl:choose>\r\n\r\n#### Data Source Optimization \r\n\r\nThese templates use XSLT to filter entries. To be able to display full entries for each product, it would be best to use data source filtering to ensure that the XML output is optimized in order to keep page load times as fast as possible. With different data sources, adjust the XPath expressions to select the appropriate XML nodes.\r\n\r\nRead more about [Symphony Data Sources](http://www.designprojectx.com/tutorials/symphony-data-sources/) or refer to the [Symphony documentation](http://symphony-cms.com/documentation/interface/).', '<p>When creating a page template, specify URL parameters to be able to control different page views, depending on the value of each URL parameter. If the URL Parameters <code>a/b</code> have been specified in the page template, you could display a couple links to select two different overviews.</p>\n\n<pre><code>&lt;ul&gt;\n    &lt;li&gt;&lt;a href=\"{$root}/products/categories/\"&gt;View Products by Category&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"{$root}/products/materials/\"&gt;View Products by Material&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>Let&#8217;s assume that a site needs to display a list of products which can be viewed by category or by material. One strategy might be to create three sections: one for Categories and another for Materials, then a separate section for Products. The Products section could include two Select Box Link fields: one called Category linked to the Title field of the Categories section, and one called Material linked to the Title field of the Materials section. Create three data sources for the overviews that include the elements that would display on an overview page: Products, Categories and Materials.</p>\n\n<h4>Creating Lists with XSLT</h4>\n\n<p>List the products by category by first creating a list of the categories:</p>\n\n<pre><code>&lt;h3&gt;&lt;a href=\"{$root}/products/categories/\"&gt;Categories&lt;/a&gt;&lt;/h3&gt;\n&lt;ul&gt;\n    &lt;xsl:for-each select=\"/data/categories/entry\"&gt;\n        &lt;li&gt;&lt;a href=\"{$root}/products/{title/@handle}/\"&gt;&lt;xsl:value-of select=\"title\"/&gt;&lt;/a&gt;&lt;/li&gt;\n    &lt;/xsl:for-each&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>A list of the materials would be similar:</p>\n\n<pre><code>&lt;h3&gt;&lt;a href=\"{$root}/products/materials/\"&gt;Materials&lt;/a&gt;&lt;/h3&gt;\n&lt;ul&gt;\n    &lt;xsl:for-each select=\"/data/materials/entry\"&gt;\n        &lt;li&gt;&lt;a href=\"{$root}/products/{title/@handle}/\"&gt;&lt;xsl:value-of select=\"title\"/&gt;&lt;/a&gt;&lt;/li&gt;\n    &lt;/xsl:for-each&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<h5>Lists of Lists</h5>\n\n<p>Use a named template to call a list of products for each category, and another to call a list of products for each material:</p>\n\n<pre><code>&lt;xsl:template name=\"products-by-category\"&gt;\n    &lt;xsl:param name=\"category\"/&gt;\n    &lt;xsl:for-each select=\"/data/products/entry[category/item/@handle = $category]\"&gt;\n        &lt;li&gt;&lt;a href=\"{$root}/products/{$category}/{title/@handle}/\"&gt;&lt;xsl:value-of select=\"title\"/&gt;&lt;/a&gt;&lt;/li&gt;\n    &lt;/xsl:for-each&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:template name=\"products-by-material\"&gt;\n    &lt;xsl:param name=\"material\"/&gt;\n    &lt;xsl:for-each select=\"/data/products/entry[material/item/@handle = $material]\"&gt;\n        &lt;li&gt;&lt;a href=\"{$root}/products/{$category}/{title/@handle}/\"&gt;&lt;xsl:value-of select=\"title\"/&gt;&lt;/a&gt;&lt;/li&gt;\n    &lt;/xsl:for-each&gt;\n&lt;/xsl:template&gt;\n</code></pre>\n\n<h5>Products by Category</h5>\n\n<p>Call the &#8220;products-by-category&#8221; template to create a list of products organized by category:</p>\n\n<pre><code>&lt;xsl:template name=\"products-categories\"&gt;\n    &lt;h3&gt;&lt;a href=\"{$root}/products/categories/\"&gt;Categories&lt;/a&gt;&lt;/h3&gt;\n    &lt;ul&gt;\n        &lt;xsl:for-each select=\"/data/categories/entry\"&gt;\n            &lt;li&gt;\n                &lt;a href=\"{$root}/products/{title/@handle}/\"&gt;&lt;xsl:value-of select=\"title\"/&gt;&lt;/a&gt;\n                &lt;ul&gt;\n                    &lt;xsl:call-template name=\"products-by-category\"&gt;\n                        &lt;xsl:with-param name=\"category\" select=\"title/@handle\"/&gt;\n                    &lt;/xsl:call-template&gt;\n                &lt;/ul&gt;\n            &lt;/li&gt;\n        &lt;/xsl:for-each&gt;\n    &lt;/ul&gt;\n&lt;/xsl:template&gt;\n</code></pre>\n\n<h5>Products by Material</h5>\n\n<p>Call the &#8220;products-by-material&#8221; template to create a list of products organized by material:</p>\n\n<pre><code>&lt;xsl:template name=\"products-materials\"&gt;\n    &lt;h3&gt;&lt;a href=\"{$root}/products/materials/\"&gt;Materials&lt;/a&gt;&lt;/h3&gt;\n    &lt;ul&gt;\n        &lt;xsl:for-each select=\"/data/materials/entry\"&gt;\n            &lt;li&gt;\n                &lt;a href=\"{$root}/products/{title/@handle}/\"&gt;&lt;xsl:value-of select=\"title\"/&gt;&lt;/a&gt;\n                &lt;ul&gt;\n                    &lt;xsl:call-template name=\"products-by-material\"&gt;\n                        &lt;xsl:with-param name=\"material\" select=\"title/@handle\"/&gt;\n                    &lt;/xsl:call-template&gt;\n                &lt;/ul&gt;\n            &lt;/li&gt;\n        &lt;/xsl:for-each&gt;\n    &lt;/ul&gt;\n&lt;/xsl:template&gt;\n</code></pre>\n\n<h4>A Named Template to Display Entries</h4>\n\n<p>Create a named template for displaying each product entry:</p>\n\n<pre><code>&lt;xsl:template name=\"product-entry\"&gt;\n    &lt;h4&gt;&lt;a href=\"{$root}/products/{$a}/{title/@handle}/\"&gt;&lt;xsl:value-of select=\"title\"/&gt;&lt;/a&gt;&lt;/h4&gt;\n    &lt;xsl:copy-of select=\"description/*\"/&gt;\n&lt;/xsl:template&gt;\n</code></pre>\n\n<h4>Managing Page Views</h4>\n\n<p>Then, create the logic to display each view by using an <code>xsl:choose</code> instruction:</p>\n\n<pre><code>&lt;xsl:choose&gt;\n    &lt;xsl:when test=\"$b\"&gt;\n        &lt;xsl:for-each select=\"/data/products/entry[title/@handle = $b]\"&gt;\n            &lt;xsl:call-template name=\"product-entry\"/&gt;\n        &lt;/xsl:for-each&gt;\n    &lt;/xsl:when&gt;\n    &lt;xsl:when test=\"$a = \'materials\'\"&gt;\n        &lt;!-- Display a list of materials when the URL is \n            http://www.example.com/products/materials/ --&gt;\n        &lt;xsl:call-template name=\"products-materials\"&gt;\n    &lt;/xsl:when&gt;\n    &lt;xsl:when test=\"$a\"&gt;\n        &lt;h3&gt;\n            &lt;!-- Assuming no category will be identical to a name for a material, \n                this should display a single value for the matching material/category --&gt;\n            &lt;xsl:value-of select=\"/data/materials/entry[title/@handle = $a]/title\"/&gt;\n            &lt;xsl:value-of select=\"/data/catgories/entry[title/@handle = $a]/title\"/&gt;\n        &lt;/h3&gt;\n        &lt;xsl:for-each select=\"/data/products/entry[materials/item/@handle = $a]\"&gt;\n            &lt;!-- Display products with a material that matches $a --&gt;\n            &lt;xsl:call-template name=\"product-entry\"/&gt;\n        &lt;/xsl:for-each&gt;\n        &lt;xsl:for-each select=\"/data/products/entry[category/item/@handle = $a]\"&gt;\n            &lt;!-- Display products with a category that matches $a --&gt;\n            &lt;xsl:call-template name=\"product-entry\"/&gt;\n        &lt;/xsl:for-each&gt;\n    &lt;/xsl:when&gt;\n    &lt;xsl:otherwise&gt;\n        &lt;!-- Display a list of categories when the URL is \n            http://www.example.com/products/ --&gt;\n        &lt;xsl:call-template name=\"products-categories\"&gt;\n    &lt;/xsl:otherwise&gt;\n&lt;/xsl:choose&gt;\n</code></pre>\n\n<h4>Data Source Optimization</h4>\n\n<p>These templates use XSLT to filter entries. To be able to display full entries for each product, it would be best to use data source filtering to ensure that the XML output is optimized in order to keep page load times as fast as possible. With different data sources, adjust the XPath expressions to select the appropriate XML nodes.</p>\n\n<p>Read more about <a href=\"http://www.designprojectx.com/tutorials/symphony-data-sources/\">Symphony Data Sources</a> or refer to the <a href=\"http://symphony-cms.com/documentation/interface/\">Symphony documentation</a>.</p>\n');
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (213, 44, 'In the Symphony Utilities tutorial, I touched on using a utility as a master template. This tutorial expands on the concept outlined there.\r\n\r\nThe final template looks like this:\r\n\r\n	<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n	<xsl:stylesheet version=\"1.0\"\r\n		xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n	\r\n	<xsl:import href=\"../utilities/main-navigation.xsl\"/>\r\n	\r\n	<xsl:output method=\"xml\"\r\n		doctype-public=\"-//W3C//DTD XHTML 1.0 Strict//EN\"\r\n		doctype-system=\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\r\n		omit-xml-declaration=\"yes\"\r\n		encoding=\"UTF-8\"\r\n		indent=\"yes\" />\r\n	\r\n	<xsl:param name=\"css-path\" select=\"concat($workspace, \'/assets/css/\')\"/>\r\n	<xsl:param name=\"js-path\" select=\"concat($workspace, \'/assets/js/\')\"/>\r\n	\r\n	<xsl:template match=\"/\">\r\n		<html>\r\n			<xsl:call-template name=\"head\"/>\r\n			<body id=\"www-designprojectx-com\">\r\n				<div class=\"page\">\r\n					<xsl:call-template name=\"header\"/>\r\n					<div class=\"container mod\">\r\n						<h2 id=\"page-heading\"><xsl:value-of select=\"/data/navigation/page[$current-page = @handle]/name\"/></h2>\r\n	\r\n						<xsl:apply-templates/>\r\n						\r\n					</div>\r\n					<xsl:call-template name=\"footer\"/>\r\n				</div>\r\n				<xsl:call-template name=\"js\"/>\r\n			</body>\r\n		</html>\r\n	</xsl:template>\r\n	\r\n	<xsl:template name=\"head\">\r\n		<xsl:param name=\"css\"/>\r\n		<head>\r\n			<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\r\n			<title><xsl:value-of select=\"$page-title\"/> | <xsl:value-of select=\"$website-name\"/></title>\r\n			<xsl:call-template name=\"css\"/>\r\n		</head>\r\n	</xsl:template>\r\n	\r\n	<xsl:template name=\"header\">\r\n		<xsl:call-template name=\"branding\"/>\r\n		<xsl:call-template name=\"main-navigation\"/>\r\n	</xsl:template>\r\n	\r\n	<xsl:template name=\"branding\">\r\n		<div id=\"branding\">\r\n			<h1><a href=\"{$root}/\"><xsl:value-of select=\"$website-name\"/></a></h1>\r\n		</div>\r\n	</xsl:template>\r\n	\r\n	<xsl:template name=\"footer\">\r\n		<div id=\"site_info\">\r\n			<div class=\"box\">\r\n				<p><a href=\"{$root}/\"><xsl:value-of select=\"$website-name\"/></a> | The digital sandbox of Stephen Bau </p>\r\n			</div>\r\n		</div>\r\n	</xsl:template>\r\n	\r\n	<xsl:template name=\"css\">\r\n		<link rel=\"stylesheet\" type=\"text/css\" href=\"{$css-path}reset.css\" media=\"all\" />\r\n		<link rel=\"stylesheet\" type=\"text/css\" href=\"{$css-path}text.css\" media=\"all\" />\r\n		<link rel=\"stylesheet\" type=\"text/css\" href=\"{$css-path}grids.css\" media=\"all\" />\r\n		<link rel=\"stylesheet\" type=\"text/css\" href=\"{$css-path}layout.css\" media=\"all\" />\r\n		<link rel=\"stylesheet\" type=\"text/css\" href=\"{$css-path}nav.css\" media=\"all\" />\r\n	</xsl:template>\r\n	\r\n	<xsl:template name=\"js\">\r\n		<script type=\"text/javascript\" src=\"{$js-path}jquery-1.3.2.min.js\"></script>\r\n		<script type=\"text/javascript\" src=\"{$js-path}jquery-fluid.js\"></script>\r\n	</xsl:template>\r\n	\r\n	</xsl:stylesheet>', '<p>In the Symphony Utilities tutorial, I touched on using a utility as a master template. This tutorial expands on the concept outlined there.</p>\n\n<p>The final template looks like this:</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;xsl:stylesheet version=\"1.0\"\n    xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;\n\n&lt;xsl:import href=\"../utilities/main-navigation.xsl\"/&gt;\n\n&lt;xsl:output method=\"xml\"\n    doctype-public=\"-//W3C//DTD XHTML 1.0 Strict//EN\"\n    doctype-system=\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\n    omit-xml-declaration=\"yes\"\n    encoding=\"UTF-8\"\n    indent=\"yes\" /&gt;\n\n&lt;xsl:param name=\"css-path\" select=\"concat($workspace, \'/assets/css/\')\"/&gt;\n&lt;xsl:param name=\"js-path\" select=\"concat($workspace, \'/assets/js/\')\"/&gt;\n\n&lt;xsl:template match=\"/\"&gt;\n    &lt;html&gt;\n        &lt;xsl:call-template name=\"head\"/&gt;\n        &lt;body id=\"www-designprojectx-com\"&gt;\n            &lt;div class=\"page\"&gt;\n                &lt;xsl:call-template name=\"header\"/&gt;\n                &lt;div class=\"container mod\"&gt;\n                    &lt;h2 id=\"page-heading\"&gt;&lt;xsl:value-of select=\"/data/navigation/page[$current-page = @handle]/name\"/&gt;&lt;/h2&gt;\n\n                    &lt;xsl:apply-templates/&gt;\n\n                &lt;/div&gt;\n                &lt;xsl:call-template name=\"footer\"/&gt;\n            &lt;/div&gt;\n            &lt;xsl:call-template name=\"js\"/&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:template name=\"head\"&gt;\n    &lt;xsl:param name=\"css\"/&gt;\n    &lt;head&gt;\n        &lt;meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" /&gt;\n        &lt;title&gt;&lt;xsl:value-of select=\"$page-title\"/&gt; | &lt;xsl:value-of select=\"$website-name\"/&gt;&lt;/title&gt;\n        &lt;xsl:call-template name=\"css\"/&gt;\n    &lt;/head&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:template name=\"header\"&gt;\n    &lt;xsl:call-template name=\"branding\"/&gt;\n    &lt;xsl:call-template name=\"main-navigation\"/&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:template name=\"branding\"&gt;\n    &lt;div id=\"branding\"&gt;\n        &lt;h1&gt;&lt;a href=\"{$root}/\"&gt;&lt;xsl:value-of select=\"$website-name\"/&gt;&lt;/a&gt;&lt;/h1&gt;\n    &lt;/div&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:template name=\"footer\"&gt;\n    &lt;div id=\"site_info\"&gt;\n        &lt;div class=\"box\"&gt;\n            &lt;p&gt;&lt;a href=\"{$root}/\"&gt;&lt;xsl:value-of select=\"$website-name\"/&gt;&lt;/a&gt; | The digital sandbox of Stephen Bau &lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:template name=\"css\"&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"{$css-path}reset.css\" media=\"all\" /&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"{$css-path}text.css\" media=\"all\" /&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"{$css-path}grids.css\" media=\"all\" /&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"{$css-path}layout.css\" media=\"all\" /&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"{$css-path}nav.css\" media=\"all\" /&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:template name=\"js\"&gt;\n    &lt;script type=\"text/javascript\" src=\"{$js-path}jquery-1.3.2.min.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"{$js-path}jquery-fluid.js\"&gt;&lt;/script&gt;\n&lt;/xsl:template&gt;\n\n&lt;/xsl:stylesheet&gt;\n</code></pre>\n');
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (216, 43, 'Starting with the XML for the entries data, we can build the XSLT template to display a list of entries in descending chronological order. This is not very different from creating a list of entries excerpts. In fact, it\'s really a simplified version of that list.\r\n\r\n	<ul class=\"menu\">\r\n		<xsl:for-each select=\"entries/entry\">\r\n			<xsl:call-template name=\"entries-menu-items\"/>\r\n		</xsl:for-each>\r\n	</ul>\r\n\r\nThe entries menu items template would look something like this:\r\n\r\n	<xsl:template name=\"entries-menu-items\">\r\n		<li><a href=\"{$root}/{$root-page}/{title/@handle}/\"><xsl:value-of select=\"title\"/></a></li>\r\n	</xsl:template>\r\n\r\nThen, to indicate the currently selected article, simply add a conditional to test whether the entry title matches the currently selected entry handle, which is passed to the $entry parameter configured in the page template as a URL parameter. Using an `xsl:attribute` instruction, a class of \"current\" is added to the currently selected list item element with the following `xsl:if` conditional:\r\n\r\n	<xsl:if test=\"$entry = title/@handle\">\r\n		<xsl:attribute name=\"class\">current</xsl:attribute>\r\n	</xsl:if>\r\n\r\nThen, the list items template would look like this:\r\n\r\n	<xsl:template name=\"entries-menu-items\">\r\n		<li>\r\n			<xsl:if test=\"$entry = title/@handle\">\r\n				<xsl:attribute name=\"class\">current</xsl:attribute>\r\n			</xsl:if>\r\n			<a href=\"{$root}/{$root-page}/{title/@handle}/\"><xsl:value-of select=\"title\"/></a>\r\n		</li>\r\n	</xsl:template>\r\n	\r\nAdd the appropriate CSS rule to style current links.\r\n\r\n	ul.menu li.current a {\r\n		color:#000;\r\n		background:#fff;\r\n	}\r\n', '<p>Starting with the XML for the entries data, we can build the XSLT template to display a list of entries in descending chronological order. This is not very different from creating a list of entries excerpts. In fact, it&#8217;s really a simplified version of that list.</p>\n\n<pre><code>&lt;ul class=\"menu\"&gt;\n    &lt;xsl:for-each select=\"entries/entry\"&gt;\n        &lt;xsl:call-template name=\"entries-menu-items\"/&gt;\n    &lt;/xsl:for-each&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>The entries menu items template would look something like this:</p>\n\n<pre><code>&lt;xsl:template name=\"entries-menu-items\"&gt;\n    &lt;li&gt;&lt;a href=\"{$root}/{$root-page}/{title/@handle}/\"&gt;&lt;xsl:value-of select=\"title\"/&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;/xsl:template&gt;\n</code></pre>\n\n<p>Then, to indicate the currently selected article, simply add a conditional to test whether the entry title matches the currently selected entry handle, which is passed to the $entry parameter configured in the page template as a URL parameter. Using an <code>xsl:attribute</code> instruction, a class of &#8220;current&#8221; is added to the currently selected list item element with the following <code>xsl:if</code> conditional:</p>\n\n<pre><code>&lt;xsl:if test=\"$entry = title/@handle\"&gt;\n    &lt;xsl:attribute name=\"class\"&gt;current&lt;/xsl:attribute&gt;\n&lt;/xsl:if&gt;\n</code></pre>\n\n<p>Then, the list items template would look like this:</p>\n\n<pre><code>&lt;xsl:template name=\"entries-menu-items\"&gt;\n    &lt;li&gt;\n        &lt;xsl:if test=\"$entry = title/@handle\"&gt;\n            &lt;xsl:attribute name=\"class\"&gt;current&lt;/xsl:attribute&gt;\n        &lt;/xsl:if&gt;\n        &lt;a href=\"{$root}/{$root-page}/{title/@handle}/\"&gt;&lt;xsl:value-of select=\"title\"/&gt;&lt;/a&gt;\n    &lt;/li&gt;\n&lt;/xsl:template&gt;\n</code></pre>\n\n<p>Add the appropriate CSS rule to style current links.</p>\n\n<pre><code>ul.menu li.current a {\n    color:#000;\n    background:#fff;\n}\n</code></pre>\n');
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (218, 33, 'XSLT templates need not necessarily be imported into an XSL stylesheet to be used by the page template. Multiple templates can exist in a single stylesheet. An `xsl:template` can have either a `match` attribute or a `name` attribute. \r\n\r\n#### XSLT Match Templates\r\n\r\nA match template matches the XML data node set selected by the `select` attribute. An `xsl:apply-templates` instruction is used to process the XML data source by applying any match templates that match the XPath expression specified by the `select` attribute.\r\n\r\nThe following match template selects the root of the XML document and defines the template for the entire XML document.\r\n\r\n	<xsl:template match=\"/\">\r\n		<xsl:apply-templates/>\r\n	</xsl:template>\r\n	\r\nThe following match template selects the data node of the XML document and processes the XSL instructions for the `data` node set. This `data` match template would be called by the `xsl:apply-templates` instruction contained within the root match template. This match template uses an `xsl:apply-templates` instruction to call any templates that match the `navigation` node that is a child of the `data` XML node.\r\n\r\n	<xsl:template match=\"data\">\r\n		<xsl:apply-templates match=\"navigation\"/>\r\n	</xsl:template>\r\n\r\n##### A Navigation Match Template\r\n\r\nThe default Symphony theme, Spectrum, uses the following template to match the navigation node: \r\n\r\n	<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n	<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n	\r\n	<xsl:template match=\"navigation\">\r\n	  <ul id=\"menu\">\r\n		<xsl:apply-templates select=\"page[not(types/type = \'hidden\') and not(types/type = \'admin\')]\"/>\r\n	\r\n		<xsl:if test=\"/data/events/login-info/@logged-in = \'true\'\">\r\n		  <li><a href=\"{$root}/drafts/\">Drafts</a></li>\r\n		  <li><a href=\"{$root}/symphony/\">Admin</a></li>\r\n		  <li><a href=\"?debug\">Debug</a></li>\r\n		</xsl:if>\r\n	\r\n	  </ul>\r\n	</xsl:template>\r\n	\r\n	<xsl:template match=\"page\">\r\n	  <li>\r\n		<a href=\"{$root}/{@handle}/\">\r\n		  <xsl:if test=\"@handle = $current-page\">\r\n			<xsl:attribute name=\"class\">active</xsl:attribute>\r\n		  </xsl:if>\r\n		  <xsl:value-of select=\"name\"/>\r\n		</a>\r\n	  </li>\r\n	</xsl:template>\r\n	\r\n	</xsl:stylesheet>\r\n	\r\nThere\'s a lot going on here, and it\'s sometimes difficult to figure out exactly what is happening with these match templates at first glance. Match templates are very powerful, but difficult to comprehend at first. Rather than delve too deeply into match templates right away, we\'ll start with a simpler example.\r\n\r\n#### XSLT Named Templates\r\n\r\nA named template is called by an `xsl:call-template` instruction with a `name` attribute that matches the name attribute of the `xsl:template`. The name attribute value must be unique for all XSL templates called or imported by an XSL stylesheet.\r\n\r\nThe following root match template uses an `xsl:call-template` instruction to call a template named \"navigation\".\r\n\r\n	<xsl:template match=\"/\">\r\n		<xsl:call-template name=\"navigation\"/>\r\n	</xsl:template>\r\n\r\n	<xsl:template name=\"navigation\">\r\n		<ul>\r\n			<li><a href=\"http://www.example.com/\">Home</a></li>\r\n			<li><a href=\"http://www.example.com/journal/\">Journal</a></li>\r\n			<li><a href=\"http://www.example.com/tutorials/\">Tutorials</a></li>\r\n			<li><a href=\"http://www.example.com/about/\">About</a></li>\r\n		</ul>\r\n	</xsl:template>\r\n\r\nA named template can be used to store frequently used snippets of HTML code, such as the navigation, the contents of the head element, and common layout elements. For example, named templates could be used as utilities that can be called by every page of the site. This allows for the ability to modify these snippets of code on a site-wide basis by modifying a single template file. For example, the title element, CSS links and scripts contained in the head element could be managed by a single XSL template.\r\n\r\n	<xsl:template name=\"head\">\r\n		<head>\r\n			<title>The Title of My Site</title>\r\n			<link rel=\"stylesheet\" type=\"text/css\" href=\"http://www.example.com/workspace/css/screen.css\" media=\"screen\"/>\r\n			<script type=\"text/javascript\" src=\"http://www.example.com/workspace/js/jquery.js\"></script>\r\n		</head>\r\n	</xsl:template>\r\n\r\n	<xsl:template name=\"header\">\r\n		<h1>My Site</h1>\r\n	</xsl:template>\r\n\r\n	<xsl:template name=\"footer\">\r\n		<p class=\"footer\">Copyright 2009. My Site Name. All rights reserved.</p>\r\n	</xsl:template>\r\n\r\n#### A Navigation Utility\r\n\r\nTo build the navigation for this site, I used the following named template:\r\n\r\n	<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n	<xsl:stylesheet version=\"1.0\"\r\n		xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n	\r\n	<xsl:template name=\"main-navigation\">\r\n		<ul class=\"nav\">\r\n			<xsl:for-each select=\"/data/navigation/page\">\r\n				<li>\r\n					<xsl:if test=\"$current-page = @handle\">\r\n						<xsl:attribute name=\"class\">current</xsl:attribute>\r\n					</xsl:if>\r\n					<a href=\"{$root}/{@handle}/\">\r\n						<xsl:if test=\"types/type = \'index\'\">\r\n							<xsl:attribute name=\"href\">\r\n								<xsl:value-of select=\"concat($root, \'/\')\"/>\r\n							</xsl:attribute>\r\n						</xsl:if>\r\n						<xsl:value-of select=\"name\"/>\r\n					</a>\r\n				</li>\r\n			</xsl:for-each>\r\n		</ul>\r\n	</xsl:template>\r\n	\r\n	</xsl:stylesheet>\r\n\r\nThe main navigation template is created as a utility in Symphony. Then, it is imported into the XSL style sheet with an `xsl:import` instruction at the beginning of the document.\r\n\r\n#### A Master Template\r\n\r\nThe following template could be saved as a utility and imported into a Symphony page template as a master template. This template demonstrates the use of the `xsl:import` instruction to import the main navigation template:\r\n\r\n	<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n	<xsl:stylesheet version=\"1.0\"\r\n		xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n	\r\n	<xsl:import href=\"../utilities/main-navigation.xsl\"/>\r\n	\r\n	<xsl:template match=\"/\">\r\n		<xsl:call-template name=\"head\"/>\r\n		<xsl:call-template name=\"header\"/>\r\n		<xsl:call-template name=\"main-navigation\"/>\r\n		<xsl:apply-templates/>\r\n		<xsl:call-template name=\"footer\"/>\r\n	</xsl:template>\r\n\r\n	</xsl:stylesheet>\r\n	\r\n#### A Page Template\r\n\r\nBy importing the master template, the page template could be as simple as the following:\r\n\r\n	<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n	<xsl:stylesheet version=\"1.0\"\r\n		xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n	\r\n	<xsl:import href=\"../utilities/master.xsl\"/>\r\n	\r\n	<xsl:template match=\"data\">\r\n		<h2>The Title of My Page</h2>\r\n		<p>This is the content of my page</p>\r\n	</xsl:template>\r\n\r\n	</xsl:stylesheet>\r\n	\r\nThis pretty much covers all the basics of using Symphony. From this point on, there is still more to learn about Symphony events and developing extensions. I would recommend learning as much as you can about XSLT to take full advantage of all the powerful features that Symphony makes possible by its XSLT-based approach to content management.\r\n\r\n#### Symphony Downloads: XSLT Utilities\r\n\r\nThe community is always busy discovering, sharing and developing code snippets to help each other build finely crafted site designs. As of this writing, there are 15 [XSLT utilities](http://symphony-cms.com/downloads/xslt/) available on the Downloads area of the Symphony CMS site:\r\n\r\n* [Basic Tumblr.com API Utility](http://symphony-cms.com/downloads/xslt/file/20746/)\r\n* [Calendar generation](http://symphony-cms.com/downloads/xslt/file/21812/)\r\n* [Data Source Pagination](http://symphony-cms.com/downloads/xslt/file/20482/)\r\n* [E-mail Obfuscator](http://symphony-cms.com/downloads/xslt/file/20574/)\r\n* [Format Date/Time](http://symphony-cms.com/downloads/xslt/file/20506/)\r\n* [Format Date/Time Advanced](http://symphony-cms.com/downloads/xslt/file/20744/)\r\n* [Form Controls](http://symphony-cms.com/downloads/xslt/file/21550/)\r\n* [HTML Manipulation](http://symphony-cms.com/downloads/xslt/file/20035/)\r\n* [HTML To Markdown Text](http://symphony-cms.com/downloads/xslt/file/20573/)\r\n* [HTML Truncate](http://symphony-cms.com/downloads/xslt/file/20036/)\r\n* [HTML Truncate Advanced](http://symphony-cms.com/downloads/xslt/file/20816/)\r\n* [IE Conditional Comments in XSLT](http://symphony-cms.com/downloads/xslt/file/21798/)\r\n* [Number To Words](http://symphony-cms.com/downloads/xslt/file/20486/)\r\n* [RSS feed RFC date format to ISO date format](http://symphony-cms.com/downloads/xslt/file/20457/)\r\n* [Time Ago](http://symphony-cms.com/downloads/xslt/file/20484/)\r\n', '<p>XSLT templates need not necessarily be imported into an XSL stylesheet to be used by the page template. Multiple templates can exist in a single stylesheet. An <code>xsl:template</code> can have either a <code>match</code> attribute or a <code>name</code> attribute.</p>\n\n<h4>XSLT Match Templates</h4>\n\n<p>A match template matches the XML data node set selected by the <code>select</code> attribute. An <code>xsl:apply-templates</code> instruction is used to process the XML data source by applying any match templates that match the XPath expression specified by the <code>select</code> attribute.</p>\n\n<p>The following match template selects the root of the XML document and defines the template for the entire XML document.</p>\n\n<pre><code>&lt;xsl:template match=\"/\"&gt;\n    &lt;xsl:apply-templates/&gt;\n&lt;/xsl:template&gt;\n</code></pre>\n\n<p>The following match template selects the data node of the XML document and processes the XSL instructions for the <code>data</code> node set. This <code>data</code> match template would be called by the <code>xsl:apply-templates</code> instruction contained within the root match template. This match template uses an <code>xsl:apply-templates</code> instruction to call any templates that match the <code>navigation</code> node that is a child of the <code>data</code> XML node.</p>\n\n<pre><code>&lt;xsl:template match=\"data\"&gt;\n    &lt;xsl:apply-templates match=\"navigation\"/&gt;\n&lt;/xsl:template&gt;\n</code></pre>\n\n<h5>A Navigation Match Template</h5>\n\n<p>The default Symphony theme, Spectrum, uses the following template to match the navigation node:</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;\n\n&lt;xsl:template match=\"navigation\"&gt;\n  &lt;ul id=\"menu\"&gt;\n    &lt;xsl:apply-templates select=\"page[not(types/type = \'hidden\') and not(types/type = \'admin\')]\"/&gt;\n\n    &lt;xsl:if test=\"/data/events/login-info/@logged-in = \'true\'\"&gt;\n      &lt;li&gt;&lt;a href=\"{$root}/drafts/\"&gt;Drafts&lt;/a&gt;&lt;/li&gt;\n      &lt;li&gt;&lt;a href=\"{$root}/symphony/\"&gt;Admin&lt;/a&gt;&lt;/li&gt;\n      &lt;li&gt;&lt;a href=\"?debug\"&gt;Debug&lt;/a&gt;&lt;/li&gt;\n    &lt;/xsl:if&gt;\n\n  &lt;/ul&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:template match=\"page\"&gt;\n  &lt;li&gt;\n    &lt;a href=\"{$root}/{@handle}/\"&gt;\n      &lt;xsl:if test=\"@handle = $current-page\"&gt;\n        &lt;xsl:attribute name=\"class\"&gt;active&lt;/xsl:attribute&gt;\n      &lt;/xsl:if&gt;\n      &lt;xsl:value-of select=\"name\"/&gt;\n    &lt;/a&gt;\n  &lt;/li&gt;\n&lt;/xsl:template&gt;\n\n&lt;/xsl:stylesheet&gt;\n</code></pre>\n\n<p>There&#8217;s a lot going on here, and it&#8217;s sometimes difficult to figure out exactly what is happening with these match templates at first glance. Match templates are very powerful, but difficult to comprehend at first. Rather than delve too deeply into match templates right away, we&#8217;ll start with a simpler example.</p>\n\n<h4>XSLT Named Templates</h4>\n\n<p>A named template is called by an <code>xsl:call-template</code> instruction with a <code>name</code> attribute that matches the name attribute of the <code>xsl:template</code>. The name attribute value must be unique for all XSL templates called or imported by an XSL stylesheet.</p>\n\n<p>The following root match template uses an <code>xsl:call-template</code> instruction to call a template named &#8220;navigation&#8221;.</p>\n\n<pre><code>&lt;xsl:template match=\"/\"&gt;\n    &lt;xsl:call-template name=\"navigation\"/&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:template name=\"navigation\"&gt;\n    &lt;ul&gt;\n        &lt;li&gt;&lt;a href=\"http://www.example.com/\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=\"http://www.example.com/journal/\"&gt;Journal&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=\"http://www.example.com/tutorials/\"&gt;Tutorials&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=\"http://www.example.com/about/\"&gt;About&lt;/a&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/xsl:template&gt;\n</code></pre>\n\n<p>A named template can be used to store frequently used snippets of HTML code, such as the navigation, the contents of the head element, and common layout elements. For example, named templates could be used as utilities that can be called by every page of the site. This allows for the ability to modify these snippets of code on a site-wide basis by modifying a single template file. For example, the title element, CSS links and scripts contained in the head element could be managed by a single XSL template.</p>\n\n<pre><code>&lt;xsl:template name=\"head\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;The Title of My Site&lt;/title&gt;\n        &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"http://www.example.com/workspace/css/screen.css\" media=\"screen\"/&gt;\n        &lt;script type=\"text/javascript\" src=\"http://www.example.com/workspace/js/jquery.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:template name=\"header\"&gt;\n    &lt;h1&gt;My Site&lt;/h1&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:template name=\"footer\"&gt;\n    &lt;p class=\"footer\"&gt;Copyright 2009. My Site Name. All rights reserved.&lt;/p&gt;\n&lt;/xsl:template&gt;\n</code></pre>\n\n<h4>A Navigation Utility</h4>\n\n<p>To build the navigation for this site, I used the following named template:</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;xsl:stylesheet version=\"1.0\"\n    xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;\n\n&lt;xsl:template name=\"main-navigation\"&gt;\n    &lt;ul class=\"nav\"&gt;\n        &lt;xsl:for-each select=\"/data/navigation/page\"&gt;\n            &lt;li&gt;\n                &lt;xsl:if test=\"$current-page = @handle\"&gt;\n                    &lt;xsl:attribute name=\"class\"&gt;current&lt;/xsl:attribute&gt;\n                &lt;/xsl:if&gt;\n                &lt;a href=\"{$root}/{@handle}/\"&gt;\n                    &lt;xsl:if test=\"types/type = \'index\'\"&gt;\n                        &lt;xsl:attribute name=\"href\"&gt;\n                            &lt;xsl:value-of select=\"concat($root, \'/\')\"/&gt;\n                        &lt;/xsl:attribute&gt;\n                    &lt;/xsl:if&gt;\n                    &lt;xsl:value-of select=\"name\"/&gt;\n                &lt;/a&gt;\n            &lt;/li&gt;\n        &lt;/xsl:for-each&gt;\n    &lt;/ul&gt;\n&lt;/xsl:template&gt;\n\n&lt;/xsl:stylesheet&gt;\n</code></pre>\n\n<p>The main navigation template is created as a utility in Symphony. Then, it is imported into the XSL style sheet with an <code>xsl:import</code> instruction at the beginning of the document.</p>\n\n<h4>A Master Template</h4>\n\n<p>The following template could be saved as a utility and imported into a Symphony page template as a master template. This template demonstrates the use of the <code>xsl:import</code> instruction to import the main navigation template:</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;xsl:stylesheet version=\"1.0\"\n    xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;\n\n&lt;xsl:import href=\"../utilities/main-navigation.xsl\"/&gt;\n\n&lt;xsl:template match=\"/\"&gt;\n    &lt;xsl:call-template name=\"head\"/&gt;\n    &lt;xsl:call-template name=\"header\"/&gt;\n    &lt;xsl:call-template name=\"main-navigation\"/&gt;\n    &lt;xsl:apply-templates/&gt;\n    &lt;xsl:call-template name=\"footer\"/&gt;\n&lt;/xsl:template&gt;\n\n&lt;/xsl:stylesheet&gt;\n</code></pre>\n\n<h4>A Page Template</h4>\n\n<p>By importing the master template, the page template could be as simple as the following:</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;xsl:stylesheet version=\"1.0\"\n    xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;\n\n&lt;xsl:import href=\"../utilities/master.xsl\"/&gt;\n\n&lt;xsl:template match=\"data\"&gt;\n    &lt;h2&gt;The Title of My Page&lt;/h2&gt;\n    &lt;p&gt;This is the content of my page&lt;/p&gt;\n&lt;/xsl:template&gt;\n\n&lt;/xsl:stylesheet&gt;\n</code></pre>\n\n<p>This pretty much covers all the basics of using Symphony. From this point on, there is still more to learn about Symphony events and developing extensions. I would recommend learning as much as you can about XSLT to take full advantage of all the powerful features that Symphony makes possible by its XSLT-based approach to content management.</p>\n\n<h4>Symphony Downloads: XSLT Utilities</h4>\n\n<p>The community is always busy discovering, sharing and developing code snippets to help each other build finely crafted site designs. As of this writing, there are 15 <a href=\"http://symphony-cms.com/downloads/xslt/\">XSLT utilities</a> available on the Downloads area of the Symphony CMS site:</p>\n\n<ul>\n<li><a href=\"http://symphony-cms.com/downloads/xslt/file/20746/\">Basic Tumblr.com API Utility</a></li>\n<li><a href=\"http://symphony-cms.com/downloads/xslt/file/21812/\">Calendar generation</a></li>\n<li><a href=\"http://symphony-cms.com/downloads/xslt/file/20482/\">Data Source Pagination</a></li>\n<li><a href=\"http://symphony-cms.com/downloads/xslt/file/20574/\">E-mail Obfuscator</a></li>\n<li><a href=\"http://symphony-cms.com/downloads/xslt/file/20506/\">Format Date/Time</a></li>\n<li><a href=\"http://symphony-cms.com/downloads/xslt/file/20744/\">Format Date/Time Advanced</a></li>\n<li><a href=\"http://symphony-cms.com/downloads/xslt/file/21550/\">Form Controls</a></li>\n<li><a href=\"http://symphony-cms.com/downloads/xslt/file/20035/\">HTML Manipulation</a></li>\n<li><a href=\"http://symphony-cms.com/downloads/xslt/file/20573/\">HTML To Markdown Text</a></li>\n<li><a href=\"http://symphony-cms.com/downloads/xslt/file/20036/\">HTML Truncate</a></li>\n<li><a href=\"http://symphony-cms.com/downloads/xslt/file/20816/\">HTML Truncate Advanced</a></li>\n<li><a href=\"http://symphony-cms.com/downloads/xslt/file/21798/\">IE Conditional Comments in XSLT</a></li>\n<li><a href=\"http://symphony-cms.com/downloads/xslt/file/20486/\">Number To Words</a></li>\n<li><a href=\"http://symphony-cms.com/downloads/xslt/file/20457/\">RSS feed RFC date format to ISO date format</a></li>\n<li><a href=\"http://symphony-cms.com/downloads/xslt/file/20484/\">Time Ago</a></li>\n</ul>\n');
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (257, 46, 'The first step would be to grab some XML to import. I have a blog I set up just for this purpose. I combined two learning opportunities into a WordPress blog. I had [a long neglected account](http://bauhouse.wordpress.com/) on WordPress.com, so I figured I would revive it to store ActionScript 3.0 / Flex 3.0 SDK code snippets as I learned how to build open source ActionScript code to build SWF files with nothing more than a command line terminal and a text editor. I also thought it would be a good exercise in getting to know WordPress, plus a means to build up a library of blog entries to use as an XML import data source for Symphony. People are asking for working examples of the ActionScript experiments, but WordPress.com doesn\'t seem to allow uploading of SWF files, so I figured it\'s time to decommission WordPress and import data into Symphony.\r\n\r\n#### Export XML from WordPress\r\n\r\nGrabbing the XML is as easy as navigating to Tools : Export and clicking on the \"Download Export File\" button in WordPress. Kudos to the WordPress crew for implementing this feature. I ended up with [this XML file](/workspace/assets/xml/wordpress.2009-05-11.xml), which amounts to 5515 lines of XML.\r\n\r\n#### Import XML into Symphony\r\n\r\nWe could do this a few different ways. We could import the RSS feed as a Dynamic XML data source. We could paste the code into Symphony and save it as a Static XML data source. Or we could use the `document()` function to import the XML file and save the XML as a node-set in an XSL variable. I decided on the latter.\r\n\r\n##### Create the Import Page\r\n\r\nSo, I first created a page called \"Import\" with a page type of \"admin\" and modified the navigation utility to exclude this page from the navigation:\r\n\r\n	<xsl:for-each select=\"/data/navigation/page[not(types/type = \'admin\')]\">\r\n	\r\nThe \"admin\" page type is a special type of page that cannot be viewed on the front end by anyone who is not logged in as an admin user. This is very handy for pages that will require some front end forms that could otherwise be content spammed by unauthorized users. It works as a nice safeguard for any pages that might be in development. Just remove the \"admin\" page type when you are ready to go live.\r\n\r\n##### XML Namespace Declarations\r\n\r\nThen, I took a look at the XML file generated by the WordPress Export and found several different XML namespaces being used. To avoid undeclared namespace errors, I added the namespace declarations to the XSL style sheet by copying them from the XML file generated by the WordPress export, which is actually a RSS file.\r\n\r\n	<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n	<xsl:stylesheet version=\"1.0\"\r\n		xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\r\n		xmlns:excerpt=\"http://wordpress.org/export/1.0/excerpt/\"\r\n		xmlns:content=\"http://purl.org/rss/1.0/modules/content/\"\r\n		xmlns:wfw=\"http://wellformedweb.org/CommentAPI/\"\r\n		xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\r\n		xmlns:wp=\"http://wordpress.org/export/1.0/\">\r\n\r\n##### Import XML with the document() Function\r\n\r\nThen, the document is imported into the XSLT page template for the Import page as an XSL parameter:\r\n\r\n	<xsl:param name=\"wordpress-xml\" select=\"document(\'../assets/xml/wordpress.2009-05-11.xml\')\"/>\r\n\r\n##### Access Node-Set Values with XPath\r\n\r\nNow, any contents of the document are accessible to Symphony by using the appropriate XPath expressions:\r\n\r\n	<xsl:for-each select=\"$wordpress-xml/rss/channel\">\r\n		<h3><xsl:value-of select=\"title\"/></h3>\r\n		<p>WordPress Base Blog URL: <xsl:value-of select=\"wp:base_blog_url\"/></p>\r\n	</xsl:for-each>\r\n\r\nTo save entries in Symphony, we\'ll need to create some [events](/tutorials/symphony-events/) and some front end forms.', '<p>The first step would be to grab some XML to import. I have a blog I set up just for this purpose. I combined two learning opportunities into a WordPress blog. I had <a href=\"http://bauhouse.wordpress.com/\">a long neglected account</a> on WordPress.com, so I figured I would revive it to store ActionScript 3.0 / Flex 3.0 SDK code snippets as I learned how to build open source ActionScript code to build SWF files with nothing more than a command line terminal and a text editor. I also thought it would be a good exercise in getting to know WordPress, plus a means to build up a library of blog entries to use as an XML import data source for Symphony. People are asking for working examples of the ActionScript experiments, but WordPress.com doesn&#8217;t seem to allow uploading of SWF files, so I figured it&#8217;s time to decommission WordPress and import data into Symphony.</p>\n\n<h4>Export XML from WordPress</h4>\n\n<p>Grabbing the XML is as easy as navigating to Tools : Export and clicking on the &#8220;Download Export File&#8221; button in WordPress. Kudos to the WordPress crew for implementing this feature. I ended up with <a href=\"/workspace/assets/xml/wordpress.2009-05-11.xml\">this XML file</a>, which amounts to 5515 lines of XML.</p>\n\n<h4>Import XML into Symphony</h4>\n\n<p>We could do this a few different ways. We could import the RSS feed as a Dynamic XML data source. We could paste the code into Symphony and save it as a Static XML data source. Or we could use the <code>document()</code> function to import the XML file and save the XML as a node-set in an XSL variable. I decided on the latter.</p>\n\n<h5>Create the Import Page</h5>\n\n<p>So, I first created a page called &#8220;Import&#8221; with a page type of &#8220;admin&#8221; and modified the navigation utility to exclude this page from the navigation:</p>\n\n<pre><code>&lt;xsl:for-each select=\"/data/navigation/page[not(types/type = \'admin\')]\"&gt;\n</code></pre>\n\n<p>The &#8220;admin&#8221; page type is a special type of page that cannot be viewed on the front end by anyone who is not logged in as an admin user. This is very handy for pages that will require some front end forms that could otherwise be content spammed by unauthorized users. It works as a nice safeguard for any pages that might be in development. Just remove the &#8220;admin&#8221; page type when you are ready to go live.</p>\n\n<h5>XML Namespace Declarations</h5>\n\n<p>Then, I took a look at the XML file generated by the WordPress Export and found several different XML namespaces being used. To avoid undeclared namespace errors, I added the namespace declarations to the XSL style sheet by copying them from the XML file generated by the WordPress export, which is actually a RSS file.</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;xsl:stylesheet version=\"1.0\"\n    xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n    xmlns:excerpt=\"http://wordpress.org/export/1.0/excerpt/\"\n    xmlns:content=\"http://purl.org/rss/1.0/modules/content/\"\n    xmlns:wfw=\"http://wellformedweb.org/CommentAPI/\"\n    xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n    xmlns:wp=\"http://wordpress.org/export/1.0/\"&gt;\n</code></pre>\n\n<h5>Import XML with the document() Function</h5>\n\n<p>Then, the document is imported into the XSLT page template for the Import page as an XSL parameter:</p>\n\n<pre><code>&lt;xsl:param name=\"wordpress-xml\" select=\"document(\'../assets/xml/wordpress.2009-05-11.xml\')\"/&gt;\n</code></pre>\n\n<h5>Access Node-Set Values with XPath</h5>\n\n<p>Now, any contents of the document are accessible to Symphony by using the appropriate XPath expressions:</p>\n\n<pre><code>&lt;xsl:for-each select=\"$wordpress-xml/rss/channel\"&gt;\n    &lt;h3&gt;&lt;xsl:value-of select=\"title\"/&gt;&lt;/h3&gt;\n    &lt;p&gt;WordPress Base Blog URL: &lt;xsl:value-of select=\"wp:base_blog_url\"/&gt;&lt;/p&gt;\n&lt;/xsl:for-each&gt;\n</code></pre>\n\n<p>To save entries in Symphony, we&#8217;ll need to create some <a href=\"/tutorials/symphony-events/\">events</a> and some front end forms.</p>\n');
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (301, 48, '### Getting Started\r\n\r\nFirst, I need a compiler. For whatever reason, I cannot use Adobe Flash CS3 at home, even though I have a license that allows having Flash installed at home and at work. For whatever reason, the CS3 install I have at home just stopped working. Strange. I’ll have to reinstall at some point. For now, I’m going to use the [Flex 3 SDK](http://opensource.adobe.com/wiki/display/flexsdk/Flex+SDK) to compile ActionScript from source. I have a previous version of Flex, the Flex 2 SDK, but I’m going to download the latest Software Developers Kit to see how compatible Colin’s book will be with the latest version of Flex. ActionScript 3.0 has not changed, so I don’t foresee a problem.\r\n\r\nAdobe has provided some documentation on [Getting Started with Flex 3 SDK](http://www.adobe.com/devnet/flex/?tab:quickstart=1) in the Adobe Flex Developer Center. The [Developer Documentation for Adobe Flex](http://opensource.adobe.com/wiki/display/flexsdk/Developer+Documentation) is also available at [Adobe Open Source](http://opensource.adobe.com/).\r\n\r\nTo start with, I have downloaded the Flex 3 SDK and installed it where I can easily access it on the command line:\r\n\r\n    ~/flex_sdk_3\r\n\r\nI’m using Mac OS X 10.5.3, so that means I have installed the Flex 3 SDK at the root of my user directory:\r\n\r\n    /Users/stephen/flex_sdk_3\r\n\r\nI also followed the [recommendation](http://www.adobe.com/support/documentation/en/flex/3/releasenotes_flex3_sdk.html) to [uninstall the Flash Player](http://www.adobe.com/cfusion/knowledgebase/index.cfm?id=tn_14157) before installing the player supplied with the SDK.\r\n\r\n    ~/flex_sdk_3/runtimes/player/mac/Install Flash Player 9 UB.dmg\r\n\r\nI have chosen to use [Panic’s Coda](http://www.panic.com/coda/ \"One-Window Web Development for Mac OS X\") as my IDE for developing ActionScript. It is a text editor with some nice extras, including a built in Terminal and web browser based on Apples’s [WebKit](http://webkit.org/) project used to build Safari. There’s no reason you couldn’t use free tools: Terminal, Safari and [TextWrangler](http://barebones.com/products/textwrangler/), for instance. But I love working with Panic’s well-designed tools, such as Coda and Transmit.\r\n\r\n### Chapter 1: Core Concepts\r\n\r\nIn the first chapter, Colin provides an overview of the tools for writing ActionScript code: text editor, Adobe Flex Builder, and Adobe Flash; describes the Flash Client Runtime Environment, Compilation. Then, he jumps right into a step-by-step process of creating a virtual zoo example program to teach the core concepts about:\r\n\r\n* Packages\r\n* Classes\r\n* Access Control Modifiers\r\n* Constructor Methods\r\n* Objects\r\n* Variables and Values\r\n* Constructor Parameters and Arguments\r\n* Expressions\r\n* Instance Variables\r\n* Instance Methods\r\n* Method Return Values\r\n', '<h3>Getting Started</h3>\n\n<p>First, I need a compiler. For whatever reason, I cannot use Adobe Flash CS3 at home, even though I have a license that allows having Flash installed at home and at work. For whatever reason, the CS3 install I have at home just stopped working. Strange. I’ll have to reinstall at some point. For now, I’m going to use the <a href=\"http://opensource.adobe.com/wiki/display/flexsdk/Flex+SDK\">Flex 3 SDK</a> to compile ActionScript from source. I have a previous version of Flex, the Flex 2 SDK, but I’m going to download the latest Software Developers Kit to see how compatible Colin’s book will be with the latest version of Flex. ActionScript 3.0 has not changed, so I don’t foresee a problem.</p>\n\n<p>Adobe has provided some documentation on <a href=\"http://www.adobe.com/devnet/flex/?tab:quickstart=1\">Getting Started with Flex 3 SDK</a> in the Adobe Flex Developer Center. The <a href=\"http://opensource.adobe.com/wiki/display/flexsdk/Developer+Documentation\">Developer Documentation for Adobe Flex</a> is also available at <a href=\"http://opensource.adobe.com/\">Adobe Open Source</a>.</p>\n\n<p>To start with, I have downloaded the Flex 3 SDK and installed it where I can easily access it on the command line:</p>\n\n<pre><code>~/flex_sdk_3\n</code></pre>\n\n<p>I’m using Mac OS X 10.5.3, so that means I have installed the Flex 3 SDK at the root of my user directory:</p>\n\n<pre><code>/Users/stephen/flex_sdk_3\n</code></pre>\n\n<p>I also followed the <a href=\"http://www.adobe.com/support/documentation/en/flex/3/releasenotes_flex3_sdk.html\">recommendation</a> to <a href=\"http://www.adobe.com/cfusion/knowledgebase/index.cfm?id=tn_14157\">uninstall the Flash Player</a> before installing the player supplied with the SDK.</p>\n\n<pre><code>~/flex_sdk_3/runtimes/player/mac/Install Flash Player 9 UB.dmg\n</code></pre>\n\n<p>I have chosen to use <a href=\"http://www.panic.com/coda/\" title=\"One-Window Web Development for Mac OS X\">Panic’s Coda</a> as my IDE for developing ActionScript. It is a text editor with some nice extras, including a built in Terminal and web browser based on Apples’s <a href=\"http://webkit.org/\">WebKit</a> project used to build Safari. There’s no reason you couldn’t use free tools: Terminal, Safari and <a href=\"http://barebones.com/products/textwrangler/\">TextWrangler</a>, for instance. But I love working with Panic’s well-designed tools, such as Coda and Transmit.</p>\n\n<h3>Chapter 1: Core Concepts</h3>\n\n<p>In the first chapter, Colin provides an overview of the tools for writing ActionScript code: text editor, Adobe Flex Builder, and Adobe Flash; describes the Flash Client Runtime Environment, Compilation. Then, he jumps right into a step-by-step process of creating a virtual zoo example program to teach the core concepts about:</p>\n\n<ul>\n<li>Packages</li>\n<li>Classes</li>\n<li>Access Control Modifiers</li>\n<li>Constructor Methods</li>\n<li>Objects</li>\n<li>Variables and Values</li>\n<li>Constructor Parameters and Arguments</li>\n<li>Expressions</li>\n<li>Instance Variables</li>\n<li>Instance Methods</li>\n<li>Method Return Values</li>\n</ul>\n');
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (269, 49, 'Now that we know how to import XML into Symphony, and we have created an event to save data to the database through a front-end form, we can use that form to import data from WordPress by populating the fields with the appropriate data. If we can do this from WordPress, we can certainly do the same thing from Symphony. The tricky thing with WordPress is that it allows data that is not valid XML, whereas Symphony requires valid XML for all data entry. So, for WordPress entries the process may not be seamless in many cases, since validation errors may occur. A Symphony XML import should cause no problems at all.\r\n\r\nAt any rate, here\'s the template that makes this work. You can see this in action by navigating to the [Import demo page](/import/), where I\'ve added \"Next\" and \"Previous\" links and a list of available entries from the XML file, which will display the selected entry. A class of \"current\" is applied to the list item that matches the entry node position indicated by the `$a` parameter, specified as a URL parameter in the Import page configuration.\r\n\r\n	<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n	<xsl:stylesheet version=\"1.0\"\r\n		xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\r\n		xmlns:excerpt=\"http://wordpress.org/export/1.0/excerpt/\"\r\n		xmlns:content=\"http://purl.org/rss/1.0/modules/content/\"\r\n		xmlns:wfw=\"http://wellformedweb.org/CommentAPI/\"\r\n		xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\r\n		xmlns:wp=\"http://wordpress.org/export/1.0/\">\r\n	\r\n	<xsl:import href=\"../utilities/master.xsl\"/>\r\n	\r\n	<xsl:output method=\"xml\"\r\n		doctype-public=\"-//W3C//DTD XHTML 1.0 Strict//EN\"\r\n		doctype-system=\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\r\n		omit-xml-declaration=\"yes\"\r\n		encoding=\"UTF-8\"\r\n		indent=\"yes\" />\r\n	\r\n	<xsl:param name=\"wordpress-xml\" select=\"document(\'../assets/xml/wordpress.2009-05-11.xml\')\"/>\r\n	\r\n	<xsl:template match=\"data\">\r\n		<xsl:param name=\"sym-data\" select=\"/\"/>\r\n		<xsl:param name=\"selected-entry\">\r\n			<xsl:choose>\r\n				<xsl:when test=\"$a\"><xsl:value-of select=\"$a\"/></xsl:when>\r\n				<xsl:otherwise>1</xsl:otherwise>\r\n			</xsl:choose>\r\n		</xsl:param>\r\n		<xsl:param name=\"total-entries\" select=\"count($wordpress-xml/rss/channel/item)\"/>\r\n		<div class=\"line\">\r\n			<div class=\"unit size2of3\">\r\n				<div class=\"mod\">\r\n					<div class=\"box\">\r\n						<h2><a>Import a WordPress Entry</a></h2>\r\n						<div class=\"block\">\r\n							<xsl:for-each select=\"events/save-entry\">\r\n								<p class=\"{@result}\"><strong><xsl:value-of select=\"message\"/></strong></p>\r\n							</xsl:for-each>\r\n							<xsl:for-each select=\"$wordpress-xml/rss/channel/item[number($selected-entry)]\">\r\n								<form method=\"post\" action=\"\" enctype=\"multipart/form-data\">\r\n									<fieldset>\r\n										<legend>Import Fields</legend>\r\n										<input name=\"MAX_FILE_SIZE\" type=\"hidden\" value=\"5242880\" />\r\n										<p>\r\n											<label>Title</label>\r\n											<input name=\"fields[title]\" type=\"text\" value=\"{title}\"/>\r\n										</p>\r\n										<p>\r\n											<label>Description</label>\r\n											<textarea name=\"fields[description]\" rows=\"6\" cols=\"50\">\r\n												<xsl:copy-of select=\"excerpt:encoded/text()\"/>\r\n											</textarea>\r\n										</p>\r\n										<p>\r\n											<label>Body</label>\r\n											<textarea name=\"fields[body]\" rows=\"30\" cols=\"50\">\r\n												<xsl:copy-of select=\"content:encoded/text()\"/>\r\n											</textarea>\r\n										</p>\r\n										<p>\r\n											<label>Section</label>\r\n											<select name=\"fields[section]\">\r\n												<option value=\"\"></option>\r\n												<xsl:for-each select=\"$sym-data/data/sections/entry\">\r\n													<option value=\"{@id}\">\r\n														<xsl:if test=\"@id = 17\">\r\n															<xsl:attribute name=\"selected\">selected</xsl:attribute>\r\n														</xsl:if>\r\n														<xsl:value-of select=\"title\"/>\r\n													</option>\r\n												</xsl:for-each>\r\n											</select>\r\n										</p>\r\n										<p>\r\n											<label>Category</label>\r\n											<select name=\"fields[category]\">\r\n												<option value=\"\"></option>\r\n												<xsl:for-each select=\"$sym-data/data/categories/entry\">\r\n													<option value=\"{@id}\">\r\n														<xsl:if test=\"@id = 15\">\r\n															<xsl:attribute name=\"selected\">selected</xsl:attribute>\r\n														</xsl:if>\r\n														<xsl:value-of select=\"title\"/>\r\n													</option>\r\n												</xsl:for-each>\r\n											</select>\r\n										</p>\r\n										<p>\r\n											<label>Tags</label>\r\n											<xsl:call-template name=\"csv-tags-input\">\r\n												<xsl:with-param name=\"tags\" select=\"category[@domain = \'tag\' and @nicename]\"/>\r\n											</xsl:call-template>\r\n										</p>\r\n										<p>\r\n											<label>Date</label>\r\n											<input name=\"fields[date]\" type=\"text\" value=\"{wp:post_date}\" />\r\n										</p>\r\n										<!--p>\r\n											<input name=\"fields[publish]\" type=\"checkbox\" />\r\n											<label>Publish</label>\r\n										</p-->\r\n										<!-- input name=\"action[save-entry]\" type=\"submit\" value=\"Submit\" /-->\r\n									</fieldset>\r\n								</form>\r\n							</xsl:for-each>\r\n						</div>\r\n					</div>\r\n				</div>\r\n			</div>\r\n			<div class=\"unit size1of3\">\r\n				<div class=\"mod\">\r\n					<div class=\"box menu\">\r\n						<h2><a>Select an Entry</a></h2>\r\n						<div class=\"block\">\r\n							<ul class=\"menu\">\r\n								<xsl:if test=\"$a and $a &gt; 1\">\r\n									<li><a href=\"{$root}/import/{$a - 1}/\">Previous</a></li>\r\n								</xsl:if>\r\n								<xsl:choose>\r\n									<xsl:when test=\"$a &lt; $total-entries\">\r\n										<li><a href=\"{$root}/import/{$a + 1}/\">Next</a></li>\r\n									</xsl:when>\r\n									<xsl:when test=\"not($a)\">\r\n										<li><a href=\"{$root}/import/{2}/\">Next</a></li>\r\n									</xsl:when>\r\n								</xsl:choose>\r\n							</ul>\r\n						</div>\r\n					</div>\r\n				</div>\r\n				<div class=\"mod\">\r\n					<div class=\"box menu\">\r\n						<h2><a>Select an Entry by Title</a></h2>\r\n						<div class=\"block\">\r\n							<ul class=\"menu\">\r\n								<xsl:for-each select=\"$wordpress-xml/rss/channel/item\">\r\n									<li>\r\n										<xsl:if test=\"$a = position() or not($a) and position() = 1\">\r\n											<xsl:attribute name=\"class\">current</xsl:attribute>\r\n										</xsl:if>\r\n										<a href=\"{$root}/import/{position()}/\"><xsl:value-of select=\"title\"/></a>\r\n									</li>\r\n								</xsl:for-each>\r\n							</ul>\r\n						</div>\r\n					</div>\r\n				</div>\r\n			</div>\r\n		</div>\r\n	</xsl:template>\r\n	\r\n	<xsl:template name=\"csv-tags-input\">\r\n		<xsl:param name=\"tags\"/>\r\n		<xsl:param name=\"csv-tags\">\r\n			<xsl:call-template name=\"csv-values\">\r\n				<xsl:with-param name=\"values\" select=\"$tags\"/>\r\n			</xsl:call-template>\r\n		</xsl:param>\r\n		<input name=\"fields[tags]\" type=\"text\" value=\"{$csv-tags}\"/>\r\n	</xsl:template>\r\n	\r\n	<xsl:template name=\"csv-values\">\r\n		<xsl:param name=\"values\"/>\r\n		<xsl:for-each select=\"$values\">\r\n			<xsl:value-of select=\".\"/><xsl:if test=\"position() != last()\"><xsl:text>, </xsl:text></xsl:if>\r\n		</xsl:for-each>\r\n	</xsl:template>\r\n	\r\n	</xsl:stylesheet>\r\n\r\nThe Section and Category fields pull entry titles and IDs from their respective data sources. I have hard-coded the preferred selections in the template, so that the Journal section and the Technology category are selected by default. It is also possible to configure the template to match the category specified in the WordPress Export File, but in this case, I have chosen to limit the category to a single option for my entries. Multiple categories are handled by the Tags field, where a named template is used to populate the Tags field with a comma separated list of tags.\r\n\r\nI have commented out the submit button and removed the Save Entry event from the page to avoid comment spamming. This allows anyone to view the import demo without the worry that my Entries section will start filling up with garbage. ', '<p>Now that we know how to import XML into Symphony, and we have created an event to save data to the database through a front-end form, we can use that form to import data from WordPress by populating the fields with the appropriate data. If we can do this from WordPress, we can certainly do the same thing from Symphony. The tricky thing with WordPress is that it allows data that is not valid XML, whereas Symphony requires valid XML for all data entry. So, for WordPress entries the process may not be seamless in many cases, since validation errors may occur. A Symphony XML import should cause no problems at all.</p>\n\n<p>At any rate, here&#8217;s the template that makes this work. You can see this in action by navigating to the <a href=\"/import/\">Import demo page</a>, where I&#8217;ve added &#8220;Next&#8221; and &#8220;Previous&#8221; links and a list of available entries from the XML file, which will display the selected entry. A class of &#8220;current&#8221; is applied to the list item that matches the entry node position indicated by the <code>$a</code> parameter, specified as a URL parameter in the Import page configuration.</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;xsl:stylesheet version=\"1.0\"\n    xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n    xmlns:excerpt=\"http://wordpress.org/export/1.0/excerpt/\"\n    xmlns:content=\"http://purl.org/rss/1.0/modules/content/\"\n    xmlns:wfw=\"http://wellformedweb.org/CommentAPI/\"\n    xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n    xmlns:wp=\"http://wordpress.org/export/1.0/\"&gt;\n\n&lt;xsl:import href=\"../utilities/master.xsl\"/&gt;\n\n&lt;xsl:output method=\"xml\"\n    doctype-public=\"-//W3C//DTD XHTML 1.0 Strict//EN\"\n    doctype-system=\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\n    omit-xml-declaration=\"yes\"\n    encoding=\"UTF-8\"\n    indent=\"yes\" /&gt;\n\n&lt;xsl:param name=\"wordpress-xml\" select=\"document(\'../assets/xml/wordpress.2009-05-11.xml\')\"/&gt;\n\n&lt;xsl:template match=\"data\"&gt;\n    &lt;xsl:param name=\"sym-data\" select=\"/\"/&gt;\n    &lt;xsl:param name=\"selected-entry\"&gt;\n        &lt;xsl:choose&gt;\n            &lt;xsl:when test=\"$a\"&gt;&lt;xsl:value-of select=\"$a\"/&gt;&lt;/xsl:when&gt;\n            &lt;xsl:otherwise&gt;1&lt;/xsl:otherwise&gt;\n        &lt;/xsl:choose&gt;\n    &lt;/xsl:param&gt;\n    &lt;xsl:param name=\"total-entries\" select=\"count($wordpress-xml/rss/channel/item)\"/&gt;\n    &lt;div class=\"line\"&gt;\n        &lt;div class=\"unit size2of3\"&gt;\n            &lt;div class=\"mod\"&gt;\n                &lt;div class=\"box\"&gt;\n                    &lt;h2&gt;&lt;a&gt;Import a WordPress Entry&lt;/a&gt;&lt;/h2&gt;\n                    &lt;div class=\"block\"&gt;\n                        &lt;xsl:for-each select=\"events/save-entry\"&gt;\n                            &lt;p class=\"{@result}\"&gt;&lt;strong&gt;&lt;xsl:value-of select=\"message\"/&gt;&lt;/strong&gt;&lt;/p&gt;\n                        &lt;/xsl:for-each&gt;\n                        &lt;xsl:for-each select=\"$wordpress-xml/rss/channel/item[number($selected-entry)]\"&gt;\n                            &lt;form method=\"post\" action=\"\" enctype=\"multipart/form-data\"&gt;\n                                &lt;fieldset&gt;\n                                    &lt;legend&gt;Import Fields&lt;/legend&gt;\n                                    &lt;input name=\"MAX_FILE_SIZE\" type=\"hidden\" value=\"5242880\" /&gt;\n                                    &lt;p&gt;\n                                        &lt;label&gt;Title&lt;/label&gt;\n                                        &lt;input name=\"fields[title]\" type=\"text\" value=\"{title}\"/&gt;\n                                    &lt;/p&gt;\n                                    &lt;p&gt;\n                                        &lt;label&gt;Description&lt;/label&gt;\n                                        &lt;textarea name=\"fields[description]\" rows=\"6\" cols=\"50\"&gt;\n                                            &lt;xsl:copy-of select=\"excerpt:encoded/text()\"/&gt;\n                                        &lt;/textarea&gt;\n                                    &lt;/p&gt;\n                                    &lt;p&gt;\n                                        &lt;label&gt;Body&lt;/label&gt;\n                                        &lt;textarea name=\"fields[body]\" rows=\"30\" cols=\"50\"&gt;\n                                            &lt;xsl:copy-of select=\"content:encoded/text()\"/&gt;\n                                        &lt;/textarea&gt;\n                                    &lt;/p&gt;\n                                    &lt;p&gt;\n                                        &lt;label&gt;Section&lt;/label&gt;\n                                        &lt;select name=\"fields[section]\"&gt;\n                                            &lt;option value=\"\"&gt;&lt;/option&gt;\n                                            &lt;xsl:for-each select=\"$sym-data/data/sections/entry\"&gt;\n                                                &lt;option value=\"{@id}\"&gt;\n                                                    &lt;xsl:if test=\"@id = 17\"&gt;\n                                                        &lt;xsl:attribute name=\"selected\"&gt;selected&lt;/xsl:attribute&gt;\n                                                    &lt;/xsl:if&gt;\n                                                    &lt;xsl:value-of select=\"title\"/&gt;\n                                                &lt;/option&gt;\n                                            &lt;/xsl:for-each&gt;\n                                        &lt;/select&gt;\n                                    &lt;/p&gt;\n                                    &lt;p&gt;\n                                        &lt;label&gt;Category&lt;/label&gt;\n                                        &lt;select name=\"fields[category]\"&gt;\n                                            &lt;option value=\"\"&gt;&lt;/option&gt;\n                                            &lt;xsl:for-each select=\"$sym-data/data/categories/entry\"&gt;\n                                                &lt;option value=\"{@id}\"&gt;\n                                                    &lt;xsl:if test=\"@id = 15\"&gt;\n                                                        &lt;xsl:attribute name=\"selected\"&gt;selected&lt;/xsl:attribute&gt;\n                                                    &lt;/xsl:if&gt;\n                                                    &lt;xsl:value-of select=\"title\"/&gt;\n                                                &lt;/option&gt;\n                                            &lt;/xsl:for-each&gt;\n                                        &lt;/select&gt;\n                                    &lt;/p&gt;\n                                    &lt;p&gt;\n                                        &lt;label&gt;Tags&lt;/label&gt;\n                                        &lt;xsl:call-template name=\"csv-tags-input\"&gt;\n                                            &lt;xsl:with-param name=\"tags\" select=\"category[@domain = \'tag\' and @nicename]\"/&gt;\n                                        &lt;/xsl:call-template&gt;\n                                    &lt;/p&gt;\n                                    &lt;p&gt;\n                                        &lt;label&gt;Date&lt;/label&gt;\n                                        &lt;input name=\"fields[date]\" type=\"text\" value=\"{wp:post_date}\" /&gt;\n                                    &lt;/p&gt;\n                                    &lt;!--p&gt;\n                                        &lt;input name=\"fields[publish]\" type=\"checkbox\" /&gt;\n                                        &lt;label&gt;Publish&lt;/label&gt;\n                                    &lt;/p--&gt;\n                                    &lt;!-- input name=\"action[save-entry]\" type=\"submit\" value=\"Submit\" /--&gt;\n                                &lt;/fieldset&gt;\n                            &lt;/form&gt;\n                        &lt;/xsl:for-each&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=\"unit size1of3\"&gt;\n            &lt;div class=\"mod\"&gt;\n                &lt;div class=\"box menu\"&gt;\n                    &lt;h2&gt;&lt;a&gt;Select an Entry&lt;/a&gt;&lt;/h2&gt;\n                    &lt;div class=\"block\"&gt;\n                        &lt;ul class=\"menu\"&gt;\n                            &lt;xsl:if test=\"$a and $a &amp;gt; 1\"&gt;\n                                &lt;li&gt;&lt;a href=\"{$root}/import/{$a - 1}/\"&gt;Previous&lt;/a&gt;&lt;/li&gt;\n                            &lt;/xsl:if&gt;\n                            &lt;xsl:choose&gt;\n                                &lt;xsl:when test=\"$a &amp;lt; $total-entries\"&gt;\n                                    &lt;li&gt;&lt;a href=\"{$root}/import/{$a + 1}/\"&gt;Next&lt;/a&gt;&lt;/li&gt;\n                                &lt;/xsl:when&gt;\n                                &lt;xsl:when test=\"not($a)\"&gt;\n                                    &lt;li&gt;&lt;a href=\"{$root}/import/{2}/\"&gt;Next&lt;/a&gt;&lt;/li&gt;\n                                &lt;/xsl:when&gt;\n                            &lt;/xsl:choose&gt;\n                        &lt;/ul&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div class=\"mod\"&gt;\n                &lt;div class=\"box menu\"&gt;\n                    &lt;h2&gt;&lt;a&gt;Select an Entry by Title&lt;/a&gt;&lt;/h2&gt;\n                    &lt;div class=\"block\"&gt;\n                        &lt;ul class=\"menu\"&gt;\n                            &lt;xsl:for-each select=\"$wordpress-xml/rss/channel/item\"&gt;\n                                &lt;li&gt;\n                                    &lt;xsl:if test=\"$a = position() or not($a) and position() = 1\"&gt;\n                                        &lt;xsl:attribute name=\"class\"&gt;current&lt;/xsl:attribute&gt;\n                                    &lt;/xsl:if&gt;\n                                    &lt;a href=\"{$root}/import/{position()}/\"&gt;&lt;xsl:value-of select=\"title\"/&gt;&lt;/a&gt;\n                                &lt;/li&gt;\n                            &lt;/xsl:for-each&gt;\n                        &lt;/ul&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:template name=\"csv-tags-input\"&gt;\n    &lt;xsl:param name=\"tags\"/&gt;\n    &lt;xsl:param name=\"csv-tags\"&gt;\n        &lt;xsl:call-template name=\"csv-values\"&gt;\n            &lt;xsl:with-param name=\"values\" select=\"$tags\"/&gt;\n        &lt;/xsl:call-template&gt;\n    &lt;/xsl:param&gt;\n    &lt;input name=\"fields[tags]\" type=\"text\" value=\"{$csv-tags}\"/&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:template name=\"csv-values\"&gt;\n    &lt;xsl:param name=\"values\"/&gt;\n    &lt;xsl:for-each select=\"$values\"&gt;\n        &lt;xsl:value-of select=\".\"/&gt;&lt;xsl:if test=\"position() != last()\"&gt;&lt;xsl:text&gt;, &lt;/xsl:text&gt;&lt;/xsl:if&gt;\n    &lt;/xsl:for-each&gt;\n&lt;/xsl:template&gt;\n\n&lt;/xsl:stylesheet&gt;\n</code></pre>\n\n<p>The Section and Category fields pull entry titles and IDs from their respective data sources. I have hard-coded the preferred selections in the template, so that the Journal section and the Technology category are selected by default. It is also possible to configure the template to match the category specified in the WordPress Export File, but in this case, I have chosen to limit the category to a single option for my entries. Multiple categories are handled by the Tags field, where a named template is used to populate the Tags field with a comma separated list of tags.</p>\n\n<p>I have commented out the submit button and removed the Save Entry event from the page to avoid comment spamming. This allows anyone to view the import demo without the worry that my Entries section will start filling up with garbage.</p>\n');
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (266, 47, 'PHP code cannot be inserted into XSLT, since it is not valid XML. Plus, it might compromise the security of the site if it were possible. Symphony events have been created as a way of enabling pages to take advantage of the PHP classes available in the Symphony core, or to extend these core classes with additional functionality. Continuing on with the tutorial for [Importing XML in Symphony](http://www.designprojectx.com/tutorials/importing-xml-in-symphony/), I will be creating an event to save entries by importing data from an external XML file.\r\n\r\n#### Create an Event\r\n\r\nThe easiest way to create an event is to use the Events Editor by navigating to Blueprints : Components and clicking on the \"Create New\" button beside \"Events\". Use the following preferences to create a new event:\r\n\r\n##### Essentials\r\n\r\n* Name: **Save Entry**\r\n* Source: **Entries**\r\n* Filter Rules: **Admin Only**\r\n\r\n##### Description\r\n\r\nOnce saved, a PHP file will be saved to the events directory in the workspace. Also, a Description will provide instructions for using the event with a front-end form. Here\'s the Description for my new \"Save Entry\" event:\r\n\r\n###### Success and Failure XML Examples\r\n\r\nWhen saved successfully, the following XML will be returned:\r\n\r\n	<save-entries>\r\n	  <entry index=\"0\" result=\"success\" type=\"create | edit\">\r\n	    <message>Entry [created | edited] successfully.</message>\r\n	  </entry>\r\n	</save-entries>\r\n	\r\nWhen an error occurs during saving, due to either missing or invalid fields, the following XML will be returned (Notice that it is possible to get mixtures of success and failure messages when using the \"Allow Multiple\" option):\r\n\r\n	<save-entries>\r\n	  <entry index=\"0\" result=\"error\">\r\n	    <message>Entry encountered errors when saving.</message>\r\n	    <field-name type=\"invalid | missing\" />\r\n	  </entry>\r\n	  <entry index=\"1\" result=\"success\" type=\"create | edit\">\r\n	    <message>Entry [created | edited] successfully.</message>\r\n	  </entry>\r\n	  ...\r\n	</save-entries>\r\n\r\nThe following is an example of what is returned if any filters fail:\r\n\r\n	<save-entries result=\"error\">\r\n	  <message>Entry encountered errors when saving.</message>\r\n	  <filter name=\"admin-only\" status=\"failed\" />\r\n	  <filter name=\"send-email\" status=\"failed\">Recipient username was invalid</filter>\r\n	  ...\r\n	</save-entries>\r\n\r\n###### Example Front-end Form Markup\r\n\r\nThis is an example of the form markup you can use on your frontend:\r\n\r\n	<form method=\"post\" action=\"\" enctype=\"multipart/form-data\">\r\n	  <input name=\"MAX_FILE_SIZE\" type=\"hidden\" value=\"5242880\" />\r\n	  <label>Title\r\n	    <input name=\"fields[title]\" type=\"text\" />\r\n	  </label>\r\n	  <label>Description\r\n	    <textarea name=\"fields[description]\" rows=\"6\" cols=\"50\"></textarea>\r\n	  </label>\r\n	  <label>Body\r\n	    <textarea name=\"fields[body]\" rows=\"15\" cols=\"50\"></textarea>\r\n	  </label>\r\n	  <input name=\"fields[section]\" type=\"hidden\" value=\"...\" />\r\n	  <input name=\"fields[category]\" type=\"hidden\" value=\"...\" />\r\n	  <label>Tags\r\n	    <input name=\"fields[tags]\" type=\"text\" />\r\n	  </label>\r\n	  <label>Date\r\n	    <input name=\"fields[date]\" type=\"text\" />\r\n	  </label>\r\n	  <label>Publish\r\n	    <input name=\"fields[publish]\" type=\"checkbox\" />\r\n	  </label>\r\n	  <input name=\"action[save-entry]\" type=\"submit\" value=\"Submit\" />\r\n	</form>\r\n\r\nTo edit an existing entry, include the entry ID value of the entry in the form. This is best as a hidden field like so:\r\n\r\n	<input name=\"id[0]\" type=\"hidden\" value=\"23\" />\r\n\r\nTo redirect to a different location upon a successful save, include the redirect location in the form. This is best as a hidden field like so, where the value is the URL to redirect to:\r\n\r\n	<input name=\"redirect\" type=\"hidden\" value=\"http://www.designprojectx.com/success/\" />\r\n\r\n#### Allow Multiple Entries\r\n\r\nBy clicking on the \"Allow Multiple\" option under Filter Rules when creating an event, it is possible to save several entries at once.\r\n\r\n##### Essentials\r\n\r\n* Name: **Save Entries**\r\n* Source: **Entries**\r\n* Filter Rules: **Admin Only, Allow Multiple**\r\n\r\n##### Description\r\n\r\nThe front-end form markup will change to allow the mapping of data to a POST array:\r\n\r\n###### Example Front-end Form Markup\r\n\r\nThis is an example of the form markup you can use on your frontend:\r\n\r\n	<form method=\"post\" action=\"\" enctype=\"multipart/form-data\">\r\n	  <input name=\"MAX_FILE_SIZE\" type=\"hidden\" value=\"5242880\" />\r\n	  <label>Title\r\n	    <input name=\"fields[0][title]\" type=\"text\" />\r\n	  </label>\r\n	  <label>Description\r\n	    <textarea name=\"fields[0][description]\" rows=\"6\" cols=\"50\"></textarea>\r\n	  </label>\r\n	  <label>Body\r\n	    <textarea name=\"fields[0][body]\" rows=\"15\" cols=\"50\"></textarea>\r\n	  </label>\r\n	  <input name=\"fields[0][section]\" type=\"hidden\" value=\"...\" />\r\n	  <input name=\"fields[0][category]\" type=\"hidden\" value=\"...\" />\r\n	  <label>Tags\r\n	    <input name=\"fields[0][tags]\" type=\"text\" />\r\n	  </label>\r\n	  <label>Date\r\n	    <input name=\"fields[0][date]\" type=\"text\" />\r\n	  </label>\r\n	  <label>Publish\r\n	    <input name=\"fields[0][publish]\" type=\"checkbox\" />\r\n	  </label>\r\n	  <input name=\"action[save-entries]\" type=\"submit\" value=\"Submit\" />\r\n	</form> \r\n\r\nUsing the Save Entry event, we can now go ahead and create a front-end form that populates the field values from the XML file produced by a WordPress Export File to [Import Entries from WordPress](http://designprojectx.com/tutorials/importing-entries-from-wordpress/) into Symphony.', '<p>PHP code cannot be inserted into XSLT, since it is not valid XML. Plus, it might compromise the security of the site if it were possible. Symphony events have been created as a way of enabling pages to take advantage of the PHP classes available in the Symphony core, or to extend these core classes with additional functionality. Continuing on with the tutorial for <a href=\"http://www.designprojectx.com/tutorials/importing-xml-in-symphony/\">Importing XML in Symphony</a>, I will be creating an event to save entries by importing data from an external XML file.</p>\n\n<h4>Create an Event</h4>\n\n<p>The easiest way to create an event is to use the Events Editor by navigating to Blueprints : Components and clicking on the &#8220;Create New&#8221; button beside &#8220;Events&#8221;. Use the following preferences to create a new event:</p>\n\n<h5>Essentials</h5>\n\n<ul>\n<li>Name: <strong>Save Entry</strong></li>\n<li>Source: <strong>Entries</strong></li>\n<li>Filter Rules: <strong>Admin Only</strong></li>\n</ul>\n\n<h5>Description</h5>\n\n<p>Once saved, a PHP file will be saved to the events directory in the workspace. Also, a Description will provide instructions for using the event with a front-end form. Here&#8217;s the Description for my new &#8220;Save Entry&#8221; event:</p>\n\n<h6>Success and Failure XML Examples</h6>\n\n<p>When saved successfully, the following XML will be returned:</p>\n\n<pre><code>&lt;save-entries&gt;\n  &lt;entry index=\"0\" result=\"success\" type=\"create | edit\"&gt;\n    &lt;message&gt;Entry [created | edited] successfully.&lt;/message&gt;\n  &lt;/entry&gt;\n&lt;/save-entries&gt;\n</code></pre>\n\n<p>When an error occurs during saving, due to either missing or invalid fields, the following XML will be returned (Notice that it is possible to get mixtures of success and failure messages when using the &#8220;Allow Multiple&#8221; option):</p>\n\n<pre><code>&lt;save-entries&gt;\n  &lt;entry index=\"0\" result=\"error\"&gt;\n    &lt;message&gt;Entry encountered errors when saving.&lt;/message&gt;\n    &lt;field-name type=\"invalid | missing\" /&gt;\n  &lt;/entry&gt;\n  &lt;entry index=\"1\" result=\"success\" type=\"create | edit\"&gt;\n    &lt;message&gt;Entry [created | edited] successfully.&lt;/message&gt;\n  &lt;/entry&gt;\n  ...\n&lt;/save-entries&gt;\n</code></pre>\n\n<p>The following is an example of what is returned if any filters fail:</p>\n\n<pre><code>&lt;save-entries result=\"error\"&gt;\n  &lt;message&gt;Entry encountered errors when saving.&lt;/message&gt;\n  &lt;filter name=\"admin-only\" status=\"failed\" /&gt;\n  &lt;filter name=\"send-email\" status=\"failed\"&gt;Recipient username was invalid&lt;/filter&gt;\n  ...\n&lt;/save-entries&gt;\n</code></pre>\n\n<h6>Example Front-end Form Markup</h6>\n\n<p>This is an example of the form markup you can use on your frontend:</p>\n\n<pre><code>&lt;form method=\"post\" action=\"\" enctype=\"multipart/form-data\"&gt;\n  &lt;input name=\"MAX_FILE_SIZE\" type=\"hidden\" value=\"5242880\" /&gt;\n  &lt;label&gt;Title\n    &lt;input name=\"fields[title]\" type=\"text\" /&gt;\n  &lt;/label&gt;\n  &lt;label&gt;Description\n    &lt;textarea name=\"fields[description]\" rows=\"6\" cols=\"50\"&gt;&lt;/textarea&gt;\n  &lt;/label&gt;\n  &lt;label&gt;Body\n    &lt;textarea name=\"fields[body]\" rows=\"15\" cols=\"50\"&gt;&lt;/textarea&gt;\n  &lt;/label&gt;\n  &lt;input name=\"fields[section]\" type=\"hidden\" value=\"...\" /&gt;\n  &lt;input name=\"fields[category]\" type=\"hidden\" value=\"...\" /&gt;\n  &lt;label&gt;Tags\n    &lt;input name=\"fields[tags]\" type=\"text\" /&gt;\n  &lt;/label&gt;\n  &lt;label&gt;Date\n    &lt;input name=\"fields[date]\" type=\"text\" /&gt;\n  &lt;/label&gt;\n  &lt;label&gt;Publish\n    &lt;input name=\"fields[publish]\" type=\"checkbox\" /&gt;\n  &lt;/label&gt;\n  &lt;input name=\"action[save-entry]\" type=\"submit\" value=\"Submit\" /&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>To edit an existing entry, include the entry ID value of the entry in the form. This is best as a hidden field like so:</p>\n\n<pre><code>&lt;input name=\"id[0]\" type=\"hidden\" value=\"23\" /&gt;\n</code></pre>\n\n<p>To redirect to a different location upon a successful save, include the redirect location in the form. This is best as a hidden field like so, where the value is the URL to redirect to:</p>\n\n<pre><code>&lt;input name=\"redirect\" type=\"hidden\" value=\"http://www.designprojectx.com/success/\" /&gt;\n</code></pre>\n\n<h4>Allow Multiple Entries</h4>\n\n<p>By clicking on the &#8220;Allow Multiple&#8221; option under Filter Rules when creating an event, it is possible to save several entries at once.</p>\n\n<h5>Essentials</h5>\n\n<ul>\n<li>Name: <strong>Save Entries</strong></li>\n<li>Source: <strong>Entries</strong></li>\n<li>Filter Rules: <strong>Admin Only, Allow Multiple</strong></li>\n</ul>\n\n<h5>Description</h5>\n\n<p>The front-end form markup will change to allow the mapping of data to a POST array:</p>\n\n<h6>Example Front-end Form Markup</h6>\n\n<p>This is an example of the form markup you can use on your frontend:</p>\n\n<pre><code>&lt;form method=\"post\" action=\"\" enctype=\"multipart/form-data\"&gt;\n  &lt;input name=\"MAX_FILE_SIZE\" type=\"hidden\" value=\"5242880\" /&gt;\n  &lt;label&gt;Title\n    &lt;input name=\"fields[0][title]\" type=\"text\" /&gt;\n  &lt;/label&gt;\n  &lt;label&gt;Description\n    &lt;textarea name=\"fields[0][description]\" rows=\"6\" cols=\"50\"&gt;&lt;/textarea&gt;\n  &lt;/label&gt;\n  &lt;label&gt;Body\n    &lt;textarea name=\"fields[0][body]\" rows=\"15\" cols=\"50\"&gt;&lt;/textarea&gt;\n  &lt;/label&gt;\n  &lt;input name=\"fields[0][section]\" type=\"hidden\" value=\"...\" /&gt;\n  &lt;input name=\"fields[0][category]\" type=\"hidden\" value=\"...\" /&gt;\n  &lt;label&gt;Tags\n    &lt;input name=\"fields[0][tags]\" type=\"text\" /&gt;\n  &lt;/label&gt;\n  &lt;label&gt;Date\n    &lt;input name=\"fields[0][date]\" type=\"text\" /&gt;\n  &lt;/label&gt;\n  &lt;label&gt;Publish\n    &lt;input name=\"fields[0][publish]\" type=\"checkbox\" /&gt;\n  &lt;/label&gt;\n  &lt;input name=\"action[save-entries]\" type=\"submit\" value=\"Submit\" /&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>Using the Save Entry event, we can now go ahead and create a front-end form that populates the field values from the XML file produced by a WordPress Export File to <a href=\"http://designprojectx.com/tutorials/importing-entries-from-wordpress/\">Import Entries from WordPress</a> into Symphony.</p>\n');
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (265, 45, 'I took a guess that the Symphony CMS site and Nick Dunn\'s site were both using some JavaScript to dynamically add the hooks necessary to style the code with CSS. Taking a look at the source of Nick\'s site made things a little clearer, since his site design is about as sparse as it gets, as it makes good use of a clean, minimalist one-column layout. The `syntax-xml.js` file caught my eye, so I took a look at the source. It looks like it was written by our talented JavaScript and Symphony CMS developer, Scott Hughes, and released relatively recently: 30 April 2009. I\'ve not been able to find a github account or other code repository to link to as a source for this file. I\'ll make a formal request on the forum. Seeing as Scott has kindly released his code under the terms of the MIT licence and explicitly stated, \"Feel free to reuse/repurpose it,\" I\'m going to do just that. Here\'s the JavaScript file, `syntax-xml.js`:\r\n\r\n	jQuery(function() {\r\n	  /*\r\n	\r\n	  This function loops through all <pre> elements in the document, applying syntax\r\n	  highlighting for XML-like languages. Feel free to reuse/repurpose it!\r\n	\r\n	  -> created by Scott Hughes on 2009/04/30\r\n	  -> last updated 2009/05/26\r\n	  -> released under the terms of the MIT Licence: http://www.opensource.org/licenses/mit-license.php\r\n	\r\n	  */\r\n	\r\n	  var COMMENT = \'<span class=\"comment\">&lt;\',\r\n	      CDATA   = \'<span class=\"cdata\">&lt;\',\r\n	      DOCTYPE = \'<span class=\"doctype\">&lt;\',\r\n	      ELEMENT = \'&lt;\',\r\n	      ATTR_A  = \'<span class=\"attribute\">\',\r\n	      ATTR_B  = \'</span><span class=\"attribute-data\">\',\r\n	      TEXT    = \'<span class=\"text\">\',\r\n	      END     = \'</span>\',\r\n	      PARSER  = /<([?!](?:--(?:[^-]*-)+?(-)|\\[CDATA\\[(?:[^\\]]*])+?(])|[^>]*)>)(\\s*)|(?:<([^\\s<>&]*)|(\\s+)([^\\s/<>&=]+=?)(\"[^\"]*\"|\'[^\']*\'|[^\\s/<>]*))(\\s*\\/?>\\s*|)|[^<]+/g;\r\n	\r\n	  var m = document.getElementsByTagName(\'pre\'),\r\n	      i = 0;\r\n	\r\n	  (function next() {\r\n	    if (m.length === i) {\r\n	      return;\r\n	    }\r\n	\r\n	    var o = m[i++],\r\n	        d = trim(o.textContent || o.innerText);\r\n	\r\n	    if (d.charAt(0) !== \'<\' || d.charAt(d.length - 1) !== \'>\') { // I guess it\'s not XML.\r\n	      next();\r\n	      return;\r\n	    }\r\n	\r\n	    var a = [],\r\n	        p = o.cloneNode(false);\r\n	\r\n	    (function replace() {\r\n	      var $,\r\n	          t = +new Date + 100; // If the following takes more than .1s, sleep for a moment to let the main thread catch up, then resume.\r\n	\r\n	      do {\r\n	        if ($ = PARSER.exec(d)) {\r\n	          if ($[5]) {\r\n	            a.push(ELEMENT, $[5], $[9]);\r\n	          } else if ($[6]) {\r\n	            a.push($[6], ATTR_A, $[7], ATTR_B, encode($[8]), END, $[9]);\r\n	          } else if ($[2]) {\r\n	            a.push(COMMENT, encode($[1]), END, $[4]);\r\n	          } else if ($[3]) {\r\n	            a.push(CDATA, encode($[1]), END, $[4]);\r\n	          } else if ($[1]) {\r\n	            a.push(DOCTYPE, encode($[1]), END, $[4]);\r\n	          } else {\r\n	            a.push(TEXT, encode($[0]), END);\r\n	          }\r\n	        } else {\r\n	          p.innerHTML = a.join(\'\');\r\n	          p.className = \'element\';\r\n	\r\n	          o.parentNode.replaceChild(p, o);\r\n	          setTimeout(next, 20);\r\n	\r\n	          return;\r\n	        }\r\n	      } while (+new Date < t);\r\n	\r\n	      setTimeout(replace, 20);\r\n	    })();\r\n	  })();\r\n	\r\n	  function trim(s) {\r\n	    for (var i = s.length; /\\s/.test(s.charAt(--i)););\r\n	\r\n	    return s.slice(s.search(/\\S/), i + 1);\r\n	  }\r\n	\r\n	  function encode(data) {\r\n	    return data.replace(/&/g, \'&amp;\').replace(/</g, \'&lt;\');\r\n	  }\r\n	});\r\n\r\nI decided that the Journal entries, which are currently in a bit of disarray, would be left untouched, in regard to syntax highlighting, while the Tutorials entries would have the JavaScript applied to code snippets. If you haven\'t noticed yet, the Journal entries include everything in reverse chronological order, so that the most recent are at the top of the lists. All other pages filter out the appropriate entries for the designated section. The Home page displays entries that have the Section field set as \"Home\". The About page displays entries that have a Section field value of \"About\". And the Tutorials page ... well, you get the idea. It made more sense to list the Tutorials in ascending chronological order, that is, in the order that I wrote them and in the order in which it makes the most sense to follow along in a step-by-step fashion. It demonstrates the flexibility of Symphony by using a single Entries section to maintain the content for all sections. The serving of content to the appropriate pages is handled by data source filtering.\r\n\r\nSo, then, to serve the JavaScript to only the tutorials page, I added some logic to the `master.xsl` template:\r\n\r\n	<xsl:template name=\"js\">\r\n		<script type=\"text/javascript\" src=\"{$js-path}jquery-1.3.2.min.js\"></script>\r\n		<script type=\"text/javascript\" src=\"{$js-path}jquery-ui-1.7.1.custom.min.js\"></script>\r\n		<script type=\"text/javascript\" src=\"{$js-path}jquery-fluid.js\"></script>\r\n		<xsl:if test=\"$current-page = \'tutorials\'\">\r\n			<script type=\"text/javascript\" src=\"{$js-path}syntax-xml.js\"></script>\r\n		</xsl:if>\r\n	</xsl:template>\r\n\r\nThen, to style the XML syntax highlighting, I added a CSS file, `xml.css`, and added the logic to serve it only to the Tutorials page.\r\n\r\n	<xsl:template name=\"css\">\r\n		<link rel=\"stylesheet\" type=\"text/css\" href=\"{$css-path}reset.css\" media=\"all\" />\r\n		<link rel=\"stylesheet\" type=\"text/css\" href=\"{$css-path}text.css\" media=\"all\" />\r\n		<link rel=\"stylesheet\" type=\"text/css\" href=\"{$css-path}grids.css\" media=\"all\" />\r\n		<link rel=\"stylesheet\" type=\"text/css\" href=\"{$css-path}layout.css\" media=\"all\" />\r\n		<link rel=\"stylesheet\" type=\"text/css\" href=\"{$css-path}nav.css\" media=\"all\" />\r\n		<xsl:if test=\"$current-page = \'tutorials\'\">\r\n			<link rel=\"stylesheet\" type=\"text/css\" href=\"{$css-path}xml.css\" media=\"all\" />\r\n		</xsl:if>\r\n	</xsl:template>\r\n\r\n\r\n#### Handling White Space\r\n\r\nOne thing that I did find a bit perplexing was handling white space. I had a CSS rule that was solving a problem caused by the indenting of code by the XSLT template attribute of the `xsl:output` instruction:\r\n\r\n	<xsl:output method=\"xml\" indent=\"yes\" />\r\n\r\nBecause the XSLT was adding white space to the code elements, it was necessary to add a couple CSS rules as a workaround to remove the added space, [a clever solution](http://archive.overture21.com/forum/comments.php?DiscussionID=1452) suggested by Scott on the Symphony CMS forum:\r\n\r\n	pre {\r\n	    white-space: normal;\r\n	}\r\n	pre code {\r\n	    display: block;\r\n	    white-space: pre;\r\n	}\r\n\r\nI saw that Nick\'s site omitted the `code` element nested within the `pre` element. So, I figured that this would require the [XSLT Ninja technique](http://chaoticpattern.com/article/manipulating-html-in-xml/), using the [HTML Manipulation utility](http://symphony-cms.com/downloads/xslt/file/20035/) written by Allen Chang. The trick was to use an `xsl:apply-templates` instruction instead of the `xsl:copy-of` instruction for the `body` element of the entry:\r\n\r\n	<xsl:apply-templates select=\"body/*\" mode=\"entry-html\"/>\r\n\r\nThe mode limits the execution of the following templates to the `xsl:apply-templates` instructions that explicitly use this mode:\r\n\r\n	<xsl:template match=\"*\" mode=\"entry-html\">\r\n		<xsl:element name=\"{name()}\">\r\n			<xsl:apply-templates select=\"* | @* | text()\" mode=\"entry-html\"/>\r\n		</xsl:element>\r\n	</xsl:template>\r\n\r\n	<xsl:template match=\"@*\" mode=\"entry-html\">\r\n		<xsl:attribute name=\"{name()}\">\r\n			<xsl:value-of select=\".\"/>\r\n		</xsl:attribute>\r\n	</xsl:template>\r\n	\r\n	<xsl:template match=\"pre\" priority=\"1\" mode=\"entry-html\">\r\n		<pre><xsl:value-of select=\"./code\"/></pre>\r\n	</xsl:template>\r\n\r\nThe priority attribute for the `pre` match template overrides the default match templates for the other match templates using the \"entry-html\" mode, and removes the `code` element from all `pre` elements. As it turns out, though, this wasn\'t really necessary for the proper formatting of the white space for XML code. It was still necessary, though, for non-XML code snippets, so I kept this solution for the Tutorials section.\r\n\r\nThe problem came from the CSS I had added to control the white space on `pre` elements. By overriding this rule within the CSS for formatting the syntax highlighting, I was able to solve the problem of the white space characters being truncated to a single space and collapsing the code snippets and making them very difficult to read. In the end, my CSS ended up with the following rules:\r\n\r\n	/* Syntax Highlighting\r\n	----------------------------------------------- */\r\n	\r\n	.box pre {\r\n		background-color: #eee;\r\n		white-space: pre;\r\n	}\r\n	\r\n	.box pre.element {\r\n		color: #881280;\r\n	}\r\n	pre .text {\r\n		color: #000;\r\n	}\r\n	pre .attribute {\r\n		color: #994500;\r\n	}\r\n	pre .attribute-data {\r\n		color: #1A1AA6;\r\n	}\r\n	pre .comment {\r\n		color: #236E25;\r\n		border: none !important;\r\n	}\r\n	pre .doctype {\r\n		color: #999;\r\n	} \r\n	\r\nNow, you can see the difference between the syntax highlighting added to the [entries in the Tutorials section](/tutorials/xml-syntax-highlighting/) and the [identical entries in the Journal section](/journal/xml-syntax-highlighting/) without syntax highlighting.\r\n\r\n\r\n#### May 26, 2009: Updated the JavaScript to Patch a Vulnerability\r\n\r\nScott Hughes created an updated version of the script:\r\n\r\n> I’ve just updated it to be more tolerant of random input, valid XML or not, and fixed that pesky error where it incorrectly highlights opening tags with attributes. If you’re using this on a site where public visitors can post code that gets highlighted, I strongly urge you to update to the newest version, since it fixes a security vulnerability. (You could previously craft malicious code that ends up writing a `<script>` element. Now, there’s no way it will output HTML containing any elements besides `<span>`s.)\r\n\r\nFind out more about [how to implement the syntax highlighting script](http://symphony-cms.com/forum/discussions/21896/1/#position-7) on the forum.', '<p>I took a guess that the Symphony CMS site and Nick Dunn&#8217;s site were both using some JavaScript to dynamically add the hooks necessary to style the code with CSS. Taking a look at the source of Nick&#8217;s site made things a little clearer, since his site design is about as sparse as it gets, as it makes good use of a clean, minimalist one-column layout. The <code>syntax-xml.js</code> file caught my eye, so I took a look at the source. It looks like it was written by our talented JavaScript and Symphony CMS developer, Scott Hughes, and released relatively recently: 30 April 2009. I&#8217;ve not been able to find a github account or other code repository to link to as a source for this file. I&#8217;ll make a formal request on the forum. Seeing as Scott has kindly released his code under the terms of the MIT licence and explicitly stated, &#8220;Feel free to reuse/repurpose it,&#8221; I&#8217;m going to do just that. Here&#8217;s the JavaScript file, <code>syntax-xml.js</code>:</p>\n\n<pre><code>jQuery(function() {\n  /*\n\n  This function loops through all &lt;pre&gt; elements in the document, applying syntax\n  highlighting for XML-like languages. Feel free to reuse/repurpose it!\n\n  -&gt; created by Scott Hughes on 2009/04/30\n  -&gt; last updated 2009/05/26\n  -&gt; released under the terms of the MIT Licence: http://www.opensource.org/licenses/mit-license.php\n\n  */\n\n  var COMMENT = \'&lt;span class=\"comment\"&gt;&amp;lt;\',\n      CDATA   = \'&lt;span class=\"cdata\"&gt;&amp;lt;\',\n      DOCTYPE = \'&lt;span class=\"doctype\"&gt;&amp;lt;\',\n      ELEMENT = \'&amp;lt;\',\n      ATTR_A  = \'&lt;span class=\"attribute\"&gt;\',\n      ATTR_B  = \'&lt;/span&gt;&lt;span class=\"attribute-data\"&gt;\',\n      TEXT    = \'&lt;span class=\"text\"&gt;\',\n      END     = \'&lt;/span&gt;\',\n      PARSER  = /&lt;([?!](?:--(?:[^-]*-)+?(-)|[CDATA[(?:[^]]*])+?(])|[^&gt;]*)&gt;)(s*)|(?:&lt;([^s&lt;&gt;&amp;]*)|(s+)([^s/&lt;&gt;&amp;=]+=?)(\"[^\"]*\"|\'[^\']*\'|[^s/&lt;&gt;]*))(s*/?&gt;s*|)|[^&lt;]+/g;\n\n  var m = document.getElementsByTagName(\'pre\'),\n      i = 0;\n\n  (function next() {\n    if (m.length === i) {\n      return;\n    }\n\n    var o = m[i++],\n        d = trim(o.textContent || o.innerText);\n\n    if (d.charAt(0) !== \'&lt;\' || d.charAt(d.length - 1) !== \'&gt;\') { // I guess it\'s not XML.\n      next();\n      return;\n    }\n\n    var a = [],\n        p = o.cloneNode(false);\n\n    (function replace() {\n      var $,\n          t = +new Date + 100; // If the following takes more than .1s, sleep for a moment to let the main thread catch up, then resume.\n\n      do {\n        if ($ = PARSER.exec(d)) {\n          if ($[5]) {\n            a.push(ELEMENT, $[5], $[9]);\n          } else if ($[6]) {\n            a.push($[6], ATTR_A, $[7], ATTR_B, encode($[8]), END, $[9]);\n          } else if ($[2]) {\n            a.push(COMMENT, encode($[1]), END, $[4]);\n          } else if ($[3]) {\n            a.push(CDATA, encode($[1]), END, $[4]);\n          } else if ($[1]) {\n            a.push(DOCTYPE, encode($[1]), END, $[4]);\n          } else {\n            a.push(TEXT, encode($[0]), END);\n          }\n        } else {\n          p.innerHTML = a.join(\'\');\n          p.className = \'element\';\n\n          o.parentNode.replaceChild(p, o);\n          setTimeout(next, 20);\n\n          return;\n        }\n      } while (+new Date &lt; t);\n\n      setTimeout(replace, 20);\n    })();\n  })();\n\n  function trim(s) {\n    for (var i = s.length; /s/.test(s.charAt(--i)););\n\n    return s.slice(s.search(/S/), i + 1);\n  }\n\n  function encode(data) {\n    return data.replace(/&amp;/g, \'&amp;amp;\').replace(/&lt;/g, \'&amp;lt;\');\n  }\n});\n</code></pre>\n\n<p>I decided that the Journal entries, which are currently in a bit of disarray, would be left untouched, in regard to syntax highlighting, while the Tutorials entries would have the JavaScript applied to code snippets. If you haven&#8217;t noticed yet, the Journal entries include everything in reverse chronological order, so that the most recent are at the top of the lists. All other pages filter out the appropriate entries for the designated section. The Home page displays entries that have the Section field set as &#8220;Home&#8221;. The About page displays entries that have a Section field value of &#8220;About&#8221;. And the Tutorials page &#8230; well, you get the idea. It made more sense to list the Tutorials in ascending chronological order, that is, in the order that I wrote them and in the order in which it makes the most sense to follow along in a step-by-step fashion. It demonstrates the flexibility of Symphony by using a single Entries section to maintain the content for all sections. The serving of content to the appropriate pages is handled by data source filtering.</p>\n\n<p>So, then, to serve the JavaScript to only the tutorials page, I added some logic to the <code>master.xsl</code> template:</p>\n\n<pre><code>&lt;xsl:template name=\"js\"&gt;\n    &lt;script type=\"text/javascript\" src=\"{$js-path}jquery-1.3.2.min.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"{$js-path}jquery-ui-1.7.1.custom.min.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"{$js-path}jquery-fluid.js\"&gt;&lt;/script&gt;\n    &lt;xsl:if test=\"$current-page = \'tutorials\'\"&gt;\n        &lt;script type=\"text/javascript\" src=\"{$js-path}syntax-xml.js\"&gt;&lt;/script&gt;\n    &lt;/xsl:if&gt;\n&lt;/xsl:template&gt;\n</code></pre>\n\n<p>Then, to style the XML syntax highlighting, I added a CSS file, <code>xml.css</code>, and added the logic to serve it only to the Tutorials page.</p>\n\n<pre><code>&lt;xsl:template name=\"css\"&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"{$css-path}reset.css\" media=\"all\" /&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"{$css-path}text.css\" media=\"all\" /&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"{$css-path}grids.css\" media=\"all\" /&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"{$css-path}layout.css\" media=\"all\" /&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"{$css-path}nav.css\" media=\"all\" /&gt;\n    &lt;xsl:if test=\"$current-page = \'tutorials\'\"&gt;\n        &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"{$css-path}xml.css\" media=\"all\" /&gt;\n    &lt;/xsl:if&gt;\n&lt;/xsl:template&gt;\n</code></pre>\n\n<h4>Handling White Space</h4>\n\n<p>One thing that I did find a bit perplexing was handling white space. I had a CSS rule that was solving a problem caused by the indenting of code by the XSLT template attribute of the <code>xsl:output</code> instruction:</p>\n\n<pre><code>&lt;xsl:output method=\"xml\" indent=\"yes\" /&gt;\n</code></pre>\n\n<p>Because the XSLT was adding white space to the code elements, it was necessary to add a couple CSS rules as a workaround to remove the added space, <a href=\"http://archive.overture21.com/forum/comments.php?DiscussionID=1452\">a clever solution</a> suggested by Scott on the Symphony CMS forum:</p>\n\n<pre><code>pre {\n    white-space: normal;\n}\npre code {\n    display: block;\n    white-space: pre;\n}\n</code></pre>\n\n<p>I saw that Nick&#8217;s site omitted the <code>code</code> element nested within the <code>pre</code> element. So, I figured that this would require the <a href=\"http://chaoticpattern.com/article/manipulating-html-in-xml/\">XSLT Ninja technique</a>, using the <a href=\"http://symphony-cms.com/downloads/xslt/file/20035/\">HTML Manipulation utility</a> written by Allen Chang. The trick was to use an <code>xsl:apply-templates</code> instruction instead of the <code>xsl:copy-of</code> instruction for the <code>body</code> element of the entry:</p>\n\n<pre><code>&lt;xsl:apply-templates select=\"body/*\" mode=\"entry-html\"/&gt;\n</code></pre>\n\n<p>The mode limits the execution of the following templates to the <code>xsl:apply-templates</code> instructions that explicitly use this mode:</p>\n\n<pre><code>&lt;xsl:template match=\"*\" mode=\"entry-html\"&gt;\n    &lt;xsl:element name=\"{name()}\"&gt;\n        &lt;xsl:apply-templates select=\"* | @* | text()\" mode=\"entry-html\"/&gt;\n    &lt;/xsl:element&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:template match=\"@*\" mode=\"entry-html\"&gt;\n    &lt;xsl:attribute name=\"{name()}\"&gt;\n        &lt;xsl:value-of select=\".\"/&gt;\n    &lt;/xsl:attribute&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:template match=\"pre\" priority=\"1\" mode=\"entry-html\"&gt;\n    &lt;pre&gt;&lt;xsl:value-of select=\"./code\"/&gt;&lt;/pre&gt;\n&lt;/xsl:template&gt;\n</code></pre>\n\n<p>The priority attribute for the <code>pre</code> match template overrides the default match templates for the other match templates using the &#8220;entry-html&#8221; mode, and removes the <code>code</code> element from all <code>pre</code> elements. As it turns out, though, this wasn&#8217;t really necessary for the proper formatting of the white space for XML code. It was still necessary, though, for non-XML code snippets, so I kept this solution for the Tutorials section.</p>\n\n<p>The problem came from the CSS I had added to control the white space on <code>pre</code> elements. By overriding this rule within the CSS for formatting the syntax highlighting, I was able to solve the problem of the white space characters being truncated to a single space and collapsing the code snippets and making them very difficult to read. In the end, my CSS ended up with the following rules:</p>\n\n<pre><code>/* Syntax Highlighting\n----------------------------------------------- */\n\n.box pre {\n    background-color: #eee;\n    white-space: pre;\n}\n\n.box pre.element {\n    color: #881280;\n}\npre .text {\n    color: #000;\n}\npre .attribute {\n    color: #994500;\n}\npre .attribute-data {\n    color: #1A1AA6;\n}\npre .comment {\n    color: #236E25;\n    border: none !important;\n}\npre .doctype {\n    color: #999;\n}\n</code></pre>\n\n<p>Now, you can see the difference between the syntax highlighting added to the <a href=\"/tutorials/xml-syntax-highlighting/\">entries in the Tutorials section</a> and the <a href=\"/journal/xml-syntax-highlighting/\">identical entries in the Journal section</a> without syntax highlighting.</p>\n\n<h4>May 26, 2009: Updated the JavaScript to Patch a Vulnerability</h4>\n\n<p>Scott Hughes created an updated version of the script:</p>\n\n<blockquote>\n  <p>I’ve just updated it to be more tolerant of random input, valid XML or not, and fixed that pesky error where it incorrectly highlights opening tags with attributes. If you’re using this on a site where public visitors can post code that gets highlighted, I strongly urge you to update to the newest version, since it fixes a security vulnerability. (You could previously craft malicious code that ends up writing a <code>&lt;script&gt;</code> element. Now, there’s no way it will output HTML containing any elements besides <code>&lt;span&gt;</code>s.)</p>\n</blockquote>\n\n<p>Find out more about <a href=\"http://symphony-cms.com/forum/discussions/21896/1/#position-7\">how to implement the syntax highlighting script</a> on the forum.</p>\n');
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (273, 23, '#### The Default Extensions\r\n\r\nThe default Symphony install (the Spectrum theme) uses a set of extensions that could be considered a minimum for any Symphony site. Of course, this really depends on the developer and user preferences. A minimum set of extensions might include the following 4 extensions:\r\n\r\n* [Maintenance Mode](http://github.com/pointybeard/maintenance_mode)\r\n* [Select Box Link Field](http://github.com/pointybeard/selectbox_link_field)\r\n* [Export Ensemble](http://github.com/pointybeard/export_ensemble)\r\n* [Markdown](http://github.com/pointybeard/markdown)\r\n\r\n#### Installing Symphony Extensions\r\n\r\n1. Upload the extension folder to your Symphony \'extensions\' folder.\r\n\r\n2. Navigate to System : Extensions, select the extension, choose Enable from the with-selected menu, then click Apply.\r\n\r\n3. The extension should now be enabled. If the extension is a field, the new field type can now be added to your sections.\r\n\r\n#### Symphony CMS Extensions Library\r\n\r\n**Update:** As of 14 June 2009, there are 76 extensions available from the list of [Downloads](http://symphony-cms.com/downloads/) at the [Symphony CMS](http://symphony-cms.com/) site.\r\n\r\nIn alphabetical order:\r\n\r\n* Activity Log | [github](http://github.com/rowan-lewis/activitylog/) | [clone URL](git://github.com/rowan-lewis/activitylog.git)\r\n* Admin CSS Override | [github](http://github.com/michael-e/admin_css_override/) | [clone URL](git://github.com/michael-e/admin_css_override.git)\r\n* Akismet | [github](http://github.com/pointybeard/akismet/) | [clone URL](git://github.com/pointybeard/akismet.git)\r\n* Advanced Symphony Database Connector (ASDC) | [github](http://github.com/pointybeard/asdc/) | [clone URL](git://github.com/pointybeard/asdc.git)\r\n* Bi-Link Field | [github](http://github.com/rowan-lewis/bilinkfield/) | [clone URL](git://github.com/rowan-lewis/bilinkfield.git)\r\n* Breadcrumb | [github](http://github.com/pointybeard/breadcrumb/) | [clone URL](git://github.com/pointybeard/breadcrumb.git)\r\n* CacheLite | [github](http://github.com/makenosound/cachelite/) | [clone URL](git://github.com/makenosound/cachelite.git)\r\n* Calendar Overlay | [github](http://github.com/rowan-lewis/calendaroverlay/) | [clone URL](git://github.com/rowan-lewis/calendaroverlay.git)\r\n* Can of Spam Filter | [github](http://github.com/rowan-lewis/canofspam/) | [clone URL](git://github.com/rowan-lewis/canofspam.git)\r\n* Clean URL Parameters | [github](http://github.com/rowan-lewis/cleanurlparams/) | [clone URL](git://github.com/rowan-lewis/cleanurlparams.git)\r\n* Color Chooser Field | [github](http://github.com/MrBlank/symphony_color_chooser/) | [clone URL](git://github.com/MrBlank/symphony_color_chooser.git)\r\n* Content Type Mappings | [github](http://github.com/pointybeard/content_type_mappings/) | [clone URL](git://github.com/pointybeard/content_type_mappings.git)\r\n* Cookie Monster | [github](http://github.com/pointybeard/cookiemonster/) | [clone URL](git://github.com/pointybeard/cookiemonster.git)\r\n* Dynamic Event Redirect | [github](http://github.com/makenosound/dynamic_event_redirect/) | [clone URL](git://github.com/makenosound/dynamic_event_redirect.git)\r\n* Email Template Filter | [github](http://github.com/rowan-lewis/emailtemplatefilter/) | [clone URL](git://github.com/rowan-lewis/emailtemplatefilter.git)\r\n* Enable Tabkey | [github](http://github.com/phoque/Symphony-Enable-Tabkey/) | [clone URL](git://github.com/phoque/Symphony-Enable-Tabkey.git)\r\n* Enhanced Tag List | [github](http://github.com/czheng/enhancedtaglist/) | [clone URL](git://github.com/czheng/enhancedtaglist.git)\r\n* Entity Diagram | [github](http://github.com/nickdunn/entity_diagram/) | [clone URL](git://github.com/nickdunn/entity_diagram.git)\r\n* Export Ensemble | [github](http://github.com/pointybeard/export_ensemble/) | [clone URL](git://github.com/pointybeard/export_ensemble.git)\r\n* EventEx | [github](http://github.com/yourheropaul/eventex/) | [clone URL](git://github.com/yourheropaul/eventex.git)\r\n* File Manager | [github](http://github.com/pointybeard/filemanager/) | [clone URL](git://github.com/pointybeard/filemanager.git)\r\n* Filter Field | [github](http://github.com/ahwayakchih/filterfield/) | [clone URL](git://github.com/ahwayakchih/filterfield.git)\r\n* Firebug Profiler | [github](http://github.com/nickdunn/firebug_profiler/) | [clone URL](git://github.com/nickdunn/firebug_profiler.git)\r\n* Flex Date Field | [github](http://github.com/rowan-lewis/flexdatefield/) | [clone URL](git://github.com/rowan-lewis/flexdatefield.git)\r\n* Front End Authentication | [github](http://github.com/pointybeard/frontend_authentication/) | [clone URL](git://github.com/pointybeard/frontend_authentication.git)\r\n* Frontend Member Manager | [github](http://github.com/rowan-lewis/frontendmembermanager/) | [clone URL](git://github.com/rowan-lewis/frontendmembermanager.git)\r\n* Google Custom Search Engine | [github](http://github.com/ahwayakchih/gcse/) | [clone URL](git://github.com/ahwayakchih/gcse.git)\r\n* German | [github](http://github.com/nilshoerrmann/german/) | [clone URL](git://github.com/nilshoerrmann/german.git)\r\n* Global Parameter Loader | [github](http://github.com/carsten/globalparamloader/) | [clone URL](git://github.com/carsten/globalparamloader.git)\r\n* Global Resource Loader | [github](http://github.com/rowan-lewis/globalresourceloader/) | [clone URL](git://github.com/rowan-lewis/globalresourceloader.git)\r\n* Gravatar | [github](http://github.com/nickdunn/gravatar/) | [clone URL](git://github.com/nickdunn/gravatar.git)\r\n* Hash Field | [github](http://github.com/pointybeard/hashfield/) | [clone URL](git://github.com/pointybeard/hashfield.git)\r\n* IP Location Lookup | [github](http://github.com/pointybeard/iplocation_lookup/) | [clone URL](git://github.com/pointybeard/iplocation_lookup.git)\r\n* jQuery Supplier | [github](http://github.com/phoque/Symphony--jQuery-supplier/) | [clone URL](git://github.com/phoque/Symphony--jQuery-supplier.git)\r\n* Just In Time (JIT) Image Manipulation | [github](http://github.com/pointybeard/jit_image_manipulation/) | [clone URL](git://github.com/pointybeard/jit_image_manipulation.git)\r\n* Language Field | [github](http://git://github.com/ahwayakchih/languagefield/) | [clone URL](git://github.com/ahwayakchih/languagefield.git)\r\n* MailChimp | [github](http://github.com/lewiswharf/mailchimp/) | [clone URL](git://github.com/lewiswharf/mailchimp.git)\r\n* Maintenance Mode | [github](http://github.com/pointybeard/maintenance_mode/) | [clone URL](git://github.com/pointybeard/maintenance_mode.git)\r\n* Map Location Field | [github](http://github.com/pointybeard/maplocationfield/) | [clone URL](git://github.com/pointybeard/maplocationfield.git)\r\n* Markdown | [github](http://github.com/pointybeard/markdown/) | [clone URL](git://github.com/pointybeard/markdown.git)\r\n* Markdown Labels | [github](http://github.com/michael-e/markdown_labels/) | [clone URL](git://github.com/michael-e/markdown_labels.git)\r\n* MarkItUp! | [github](http://github.com/ahwayakchih/markitup/) | [clone URL](git://github.com/ahwayakchih/markitup.git)\r\n* Mass Upload Utility | [github](http://github.com/scottkf/mass-upload-utility/) | [clone URL](git://github.com/scottkf/mass-upload-utility.git)\r\n* Mediathek | [github](http://github.com/nilshoerrmann/mediathek/) | [clone URL](git://github.com/nilshoerrmann/mediathek.git)\r\n* Multiselect to Checkboxes | [github](http://github.com/Demwunz/multiselect_to_checkboxes/) | [clone URL](git://github.com/Demwunz/multiselect_to_checkboxes.git)\r\n* New Visiter | [github](http://github.com/lewiswharf/new_visiter/) | [clone URL](git://github.com/lewiswharf/new_visiter.git)\r\n* No Editing of Entries Filter | [github](http://github.com/phoque/NoEditing/) | [clone URL](git://github.com/phoque/NoEditing.git)\r\n* Number Field | [github](http://github.com/pointybeard/numberfield/) | [clone URL](git://github.com/pointybeard/numberfield.git)\r\n* Numeric Grouping Field | [github](http://github.com/rowan-lewis/numericgroupingfield/) | [clone URL](git://github.com/rowan-lewis/numericgroupingfield.git)\r\n* Order Entries | [github](http://github.com/nickdunn/order_entries/) | [clone URL](git://github.com/nickdunn/order_entries.git)\r\n* Page Templates | [github](http://github.com/czheng/pagetemplates/) | [clone URL](git://github.com/czheng/pagetemplates.git)\r\n* Pages Editor Minimal | [github](http://github.com/pointybeard/pages_editor_minimal/) | [clone URL](git://github.com/pointybeard/pages_editor_minimal.git)\r\n* Pages Field | [github](http://github.com/pointybeard/pagesfield/) | [clone URL](git://github.com/pointybeard/pagesfield.git)\r\n* Ping-o-matic | [github](http://github.com/nickdunn/pingomatic/) | [clone URL](git://github.com/nickdunn/pingomatic.git)\r\n* Publish Filtering | [github](http://github.com/nickdunn/publishfiltering/) | [clone URL](git://github.com/nickdunn/publishfiltering.git)\r\n* ReCAPTCHA | [github](http://github.com/pointybeard/recaptcha/) | [clone URL](git://github.com/pointybeard/recaptcha.git)\r\n* Reference Link | [github](http://github.com/czheng/referencelink/) | [clone URL](git://github.com/czheng/referencelink.git)\r\n* Reflection Field | [github](http://github.com/rowan-lewis/reflectionfield/) | [clone URL](git://github.com/rowan-lewis/reflectionfield.git)\r\n* Repeating Date Field | [github](http://github.com/rowan-lewis/repeatingdatefield/) | [clone URL](git://github.com/rowan-lewis/repeatingdatefield.git)\r\n* Rich Text (TinyMCE) Text Formatter | [github](http://github.com/pointybeard/richtext_tinymce/) | [clone URL](git://github.com/pointybeard/richtext_tinymce.git)\r\n* Section Schemas | [github](http://github.com/nickdunn/section_schemas/) | [clone URL](git://github.com/nickdunn/section_schemas.git)\r\n* Selectbox Link Field | [github](http://github.com/pointybeard/selectbox_link_field/) | [clone URL](git://github.com/pointybeard/selectbox_link_field.git)\r\n* Server Headers | [github](http://github.com/pointybeard/serverheaders/) | [clone URL](git://github.com/pointybeard/serverheaders.git)\r\n* Session Monster | [github](http://github.com/pointybeard/sessionmonster/) | [clone URL](git://github.com/pointybeard/sessionmonster.git)\r\n* Signed File Upload Field | [github](http://github.com/tonyarnold/signedfileuploadfield/) | [clone URL](git://github.com/tonyarnold/signedfileuploadfield.git)\r\n* Templated Text Formatters | [github](http://github.com/ahwayakchih/templatedtextformatters/) | [clone URL](git://github.com/ahwayakchih/templatedtextformatters.git)\r\n* Text Box Field | [github](http://github.com/rowan-lewis/textboxfield/) | [clone URL](git://github.com/rowan-lewis/textboxfield.git)\r\n* Textformatter Labels | [github](http://github.com/michael-e/textformatter_labels/) | [clone URL](git://github.com/michael-e/textformatter_labels.git)\r\n* Textile Plus Formatter | [github](http://github.com/rowan-lewis/textileplusformatter/) | [clone URL](git://github.com/rowan-lewis/textileplusformatter.git)\r\n* Time Field | [github](http://github.com/pointybeard/extension--time-field/) | [clone URL](git://github.com/pointybeard/extension--time-field.git)\r\n* Unique Input Field | [github](http://github.com/pointybeard/uniqueinputfield/) | [clone URL](git://github.com/pointybeard/uniqueinputfield.git)\r\n* Unique Upload Field | [github](http://github.com/michael-e/uniqueuploadfield/) | [clone URL](git://github.com/michael-e/uniqueuploadfield.git)\r\n* Uploadify | [github](http://github.com/nickdunn/uploadify/) | [clone URL](git://github.com/nickdunn/uploadify.git)\r\n* Vimeo Videos | [github](http://github.com/nickdunn/vimeo_videos/) | [clone URL](git://github.com/nickdunn/vimeo_videos.git)\r\n* XML Field | [github](http://github.com/pointybeard/xmlfield/) | [clone URL](git://github.com/pointybeard/xmlfield.git)\r\n* Yahoo! Search BOSS | [github](http://github.com/ahwayakchih/ysboss/) | [clone URL](git://github.com/ahwayakchih/ysboss.git)\r\n\r\n#### Symphony Extensions on Github\r\n\r\nTo get the latest version of all the extensions, install Git and run the following commands:\r\n\r\n    git clone git://github.com/ahwayakchih/filterfield.git\r\n    git clone git://github.com/ahwayakchih/gcse.git\r\n    git clone git://github.com/ahwayakchih/languagefield.git\r\n    git clone git://github.com/ahwayakchih/markitup.git\r\n    git clone git://github.com/ahwayakchih/templatedtextformatters.git\r\n    git clone git://github.com/ahwayakchih/ysboss.git\r\n    git clone git://github.com/carsten/globalparamloader.git\r\n    git clone git://github.com/czheng/enhancedtaglist.git\r\n    git clone git://github.com/czheng/pagetemplates.git\r\n    git clone git://github.com/czheng/referencelink.git\r\n    git clone git://github.com/Demwunz/multiselect_to_checkboxes.git\r\n    git clone git://github.com/lewiswharf/mailchimp.git\r\n    git clone git://github.com/lewiswharf/new_visiter.git\r\n    git clone git://github.com/makenosound/cachelite.git\r\n    git clone git://github.com/makenosound/dynamic_event_redirect.git\r\n    git clone git://github.com/michael-e/admin_css_override.git\r\n    git clone git://github.com/michael-e/markdown_labels.git\r\n    git clone git://github.com/michael-e/textformatter_labels.git\r\n    git clone git://github.com/michael-e/uniqueuploadfield.git\r\n    git clone git://github.com/MrBlank/symphony_color_chooser.git\r\n    git clone git://github.com/nickdunn/entity_diagram.git\r\n    git clone git://github.com/nickdunn/firebug_profiler.git\r\n    git clone git://github.com/nickdunn/gravatar.git\r\n    git clone git://github.com/nickdunn/order_entries.git\r\n    git clone git://github.com/nickdunn/pingomatic.git\r\n    git clone git://github.com/nickdunn/publishfiltering.git\r\n    git clone git://github.com/nickdunn/section_schemas.git\r\n    git clone git://github.com/nickdunn/uploadify.git\r\n    git clone git://github.com/nickdunn/vimeo_videos.git\r\n    git clone git://github.com/nilshoerrmann/german.git\r\n    git clone git://github.com/nilshoerrmann/mediathek.git\r\n    git clone git://github.com/phoque/NoEditing.git\r\n    git clone git://github.com/phoque/Symphony-Enable-Tabkey.git\r\n    git clone git://github.com/phoque/Symphony--jQuery-supplier.git\r\n    git clone git://github.com/pointybeard/akismet.git\r\n    git clone git://github.com/pointybeard/asdc.git\r\n    git clone git://github.com/pointybeard/breadcrumb.git\r\n    git clone git://github.com/pointybeard/content_type_mappings.git\r\n    git clone git://github.com/pointybeard/cookiemonster.git\r\n    git clone git://github.com/pointybeard/export_ensemble.git\r\n    git clone git://github.com/pointybeard/extension--time-field.git\r\n    git clone git://github.com/pointybeard/filemanager.git\r\n    git clone git://github.com/pointybeard/frontend_authentication.git\r\n    git clone git://github.com/pointybeard/hashfield.git\r\n    git clone git://github.com/pointybeard/iplocation_lookup.git\r\n    git clone git://github.com/pointybeard/jit_image_manipulation.git\r\n    git clone git://github.com/pointybeard/maintenance_mode.git\r\n    git clone git://github.com/pointybeard/maplocationfield.git\r\n    git clone git://github.com/pointybeard/markdown.git\r\n    git clone git://github.com/pointybeard/numberfield.git\r\n    git clone git://github.com/pointybeard/pages_editor_minimal.git\r\n    git clone git://github.com/pointybeard/pagesfield.git\r\n    git clone git://github.com/pointybeard/recaptcha.git\r\n    git clone git://github.com/pointybeard/richtext_tinymce.git\r\n    git clone git://github.com/pointybeard/selectbox_link_field.git\r\n    git clone git://github.com/pointybeard/serverheaders.git\r\n    git clone git://github.com/pointybeard/sessionmonster.git\r\n    git clone git://github.com/pointybeard/uniqueinputfield.git\r\n    git clone git://github.com/pointybeard/xmlfield.git\r\n    git clone git://github.com/rowan-lewis/activitylog.git\r\n    git clone git://github.com/rowan-lewis/bilinkfield.git\r\n    git clone git://github.com/rowan-lewis/calendaroverlay.git\r\n    git clone git://github.com/rowan-lewis/canofspam.git\r\n    git clone git://github.com/rowan-lewis/cleanurlparams.git\r\n    git clone git://github.com/rowan-lewis/emailtemplatefilter.git\r\n    git clone git://github.com/rowan-lewis/flexdatefield.git\r\n    git clone git://github.com/rowan-lewis/frontendmembermanager.git\r\n    git clone git://github.com/rowan-lewis/globalresourceloader.git\r\n    git clone git://github.com/rowan-lewis/numericgroupingfield.git\r\n    git clone git://github.com/rowan-lewis/reflectionfield.git\r\n    git clone git://github.com/rowan-lewis/repeatingdatefield.git\r\n    git clone git://github.com/rowan-lewis/textboxfield.git\r\n    git clone git://github.com/rowan-lewis/textileplusformatter.git\r\n    git clone git://github.com/scottkf/mass-upload-utility.git\r\n    git clone git://github.com/tonyarnold/signedfileuploadfield.git\r\n    git clone git://github.com/yourheropaul/eventex.git\r\n', '<h4>The Default Extensions</h4>\n\n<p>The default Symphony install (the Spectrum theme) uses a set of extensions that could be considered a minimum for any Symphony site. Of course, this really depends on the developer and user preferences. A minimum set of extensions might include the following 4 extensions:</p>\n\n<ul>\n<li><a href=\"http://github.com/pointybeard/maintenance_mode\">Maintenance Mode</a></li>\n<li><a href=\"http://github.com/pointybeard/selectbox_link_field\">Select Box Link Field</a></li>\n<li><a href=\"http://github.com/pointybeard/export_ensemble\">Export Ensemble</a></li>\n<li><a href=\"http://github.com/pointybeard/markdown\">Markdown</a></li>\n</ul>\n\n<h4>Installing Symphony Extensions</h4>\n\n<ol>\n<li><p>Upload the extension folder to your Symphony &#8216;extensions&#8217; folder.</p></li>\n<li><p>Navigate to System : Extensions, select the extension, choose Enable from the with-selected menu, then click Apply.</p></li>\n<li><p>The extension should now be enabled. If the extension is a field, the new field type can now be added to your sections.</p></li>\n</ol>\n\n<h4>Symphony CMS Extensions Library</h4>\n\n<p><strong>Update:</strong> As of 14 June 2009, there are 76 extensions available from the list of <a href=\"http://symphony-cms.com/downloads/\">Downloads</a> at the <a href=\"http://symphony-cms.com/\">Symphony CMS</a> site.</p>\n\n<p>In alphabetical order:</p>\n\n<ul>\n<li>Activity Log | <a href=\"http://github.com/rowan-lewis/activitylog/\">github</a> | <a href=\"git://github.com/rowan-lewis/activitylog.git\">clone URL</a></li>\n<li>Admin CSS Override | <a href=\"http://github.com/michael-e/admin_css_override/\">github</a> | <a href=\"git://github.com/michael-e/admin_css_override.git\">clone URL</a></li>\n<li>Akismet | <a href=\"http://github.com/pointybeard/akismet/\">github</a> | <a href=\"git://github.com/pointybeard/akismet.git\">clone URL</a></li>\n<li>Advanced Symphony Database Connector (ASDC) | <a href=\"http://github.com/pointybeard/asdc/\">github</a> | <a href=\"git://github.com/pointybeard/asdc.git\">clone URL</a></li>\n<li>Bi-Link Field | <a href=\"http://github.com/rowan-lewis/bilinkfield/\">github</a> | <a href=\"git://github.com/rowan-lewis/bilinkfield.git\">clone URL</a></li>\n<li>Breadcrumb | <a href=\"http://github.com/pointybeard/breadcrumb/\">github</a> | <a href=\"git://github.com/pointybeard/breadcrumb.git\">clone URL</a></li>\n<li>CacheLite | <a href=\"http://github.com/makenosound/cachelite/\">github</a> | <a href=\"git://github.com/makenosound/cachelite.git\">clone URL</a></li>\n<li>Calendar Overlay | <a href=\"http://github.com/rowan-lewis/calendaroverlay/\">github</a> | <a href=\"git://github.com/rowan-lewis/calendaroverlay.git\">clone URL</a></li>\n<li>Can of Spam Filter | <a href=\"http://github.com/rowan-lewis/canofspam/\">github</a> | <a href=\"git://github.com/rowan-lewis/canofspam.git\">clone URL</a></li>\n<li>Clean URL Parameters | <a href=\"http://github.com/rowan-lewis/cleanurlparams/\">github</a> | <a href=\"git://github.com/rowan-lewis/cleanurlparams.git\">clone URL</a></li>\n<li>Color Chooser Field | <a href=\"http://github.com/MrBlank/symphony_color_chooser/\">github</a> | <a href=\"git://github.com/MrBlank/symphony_color_chooser.git\">clone URL</a></li>\n<li>Content Type Mappings | <a href=\"http://github.com/pointybeard/content_type_mappings/\">github</a> | <a href=\"git://github.com/pointybeard/content_type_mappings.git\">clone URL</a></li>\n<li>Cookie Monster | <a href=\"http://github.com/pointybeard/cookiemonster/\">github</a> | <a href=\"git://github.com/pointybeard/cookiemonster.git\">clone URL</a></li>\n<li>Dynamic Event Redirect | <a href=\"http://github.com/makenosound/dynamic_event_redirect/\">github</a> | <a href=\"git://github.com/makenosound/dynamic_event_redirect.git\">clone URL</a></li>\n<li>Email Template Filter | <a href=\"http://github.com/rowan-lewis/emailtemplatefilter/\">github</a> | <a href=\"git://github.com/rowan-lewis/emailtemplatefilter.git\">clone URL</a></li>\n<li>Enable Tabkey | <a href=\"http://github.com/phoque/Symphony-Enable-Tabkey/\">github</a> | <a href=\"git://github.com/phoque/Symphony-Enable-Tabkey.git\">clone URL</a></li>\n<li>Enhanced Tag List | <a href=\"http://github.com/czheng/enhancedtaglist/\">github</a> | <a href=\"git://github.com/czheng/enhancedtaglist.git\">clone URL</a></li>\n<li>Entity Diagram | <a href=\"http://github.com/nickdunn/entity_diagram/\">github</a> | <a href=\"git://github.com/nickdunn/entity_diagram.git\">clone URL</a></li>\n<li>Export Ensemble | <a href=\"http://github.com/pointybeard/export_ensemble/\">github</a> | <a href=\"git://github.com/pointybeard/export_ensemble.git\">clone URL</a></li>\n<li>EventEx | <a href=\"http://github.com/yourheropaul/eventex/\">github</a> | <a href=\"git://github.com/yourheropaul/eventex.git\">clone URL</a></li>\n<li>File Manager | <a href=\"http://github.com/pointybeard/filemanager/\">github</a> | <a href=\"git://github.com/pointybeard/filemanager.git\">clone URL</a></li>\n<li>Filter Field | <a href=\"http://github.com/ahwayakchih/filterfield/\">github</a> | <a href=\"git://github.com/ahwayakchih/filterfield.git\">clone URL</a></li>\n<li>Firebug Profiler | <a href=\"http://github.com/nickdunn/firebug_profiler/\">github</a> | <a href=\"git://github.com/nickdunn/firebug_profiler.git\">clone URL</a></li>\n<li>Flex Date Field | <a href=\"http://github.com/rowan-lewis/flexdatefield/\">github</a> | <a href=\"git://github.com/rowan-lewis/flexdatefield.git\">clone URL</a></li>\n<li>Front End Authentication | <a href=\"http://github.com/pointybeard/frontend_authentication/\">github</a> | <a href=\"git://github.com/pointybeard/frontend_authentication.git\">clone URL</a></li>\n<li>Frontend Member Manager | <a href=\"http://github.com/rowan-lewis/frontendmembermanager/\">github</a> | <a href=\"git://github.com/rowan-lewis/frontendmembermanager.git\">clone URL</a></li>\n<li>Google Custom Search Engine | <a href=\"http://github.com/ahwayakchih/gcse/\">github</a> | <a href=\"git://github.com/ahwayakchih/gcse.git\">clone URL</a></li>\n<li>German | <a href=\"http://github.com/nilshoerrmann/german/\">github</a> | <a href=\"git://github.com/nilshoerrmann/german.git\">clone URL</a></li>\n<li>Global Parameter Loader | <a href=\"http://github.com/carsten/globalparamloader/\">github</a> | <a href=\"git://github.com/carsten/globalparamloader.git\">clone URL</a></li>\n<li>Global Resource Loader | <a href=\"http://github.com/rowan-lewis/globalresourceloader/\">github</a> | <a href=\"git://github.com/rowan-lewis/globalresourceloader.git\">clone URL</a></li>\n<li>Gravatar | <a href=\"http://github.com/nickdunn/gravatar/\">github</a> | <a href=\"git://github.com/nickdunn/gravatar.git\">clone URL</a></li>\n<li>Hash Field | <a href=\"http://github.com/pointybeard/hashfield/\">github</a> | <a href=\"git://github.com/pointybeard/hashfield.git\">clone URL</a></li>\n<li>IP Location Lookup | <a href=\"http://github.com/pointybeard/iplocation_lookup/\">github</a> | <a href=\"git://github.com/pointybeard/iplocation_lookup.git\">clone URL</a></li>\n<li>jQuery Supplier | <a href=\"http://github.com/phoque/Symphony--jQuery-supplier/\">github</a> | <a href=\"git://github.com/phoque/Symphony--jQuery-supplier.git\">clone URL</a></li>\n<li>Just In Time (JIT) Image Manipulation | <a href=\"http://github.com/pointybeard/jit_image_manipulation/\">github</a> | <a href=\"git://github.com/pointybeard/jit_image_manipulation.git\">clone URL</a></li>\n<li>Language Field | <a href=\"http://git://github.com/ahwayakchih/languagefield/\">github</a> | <a href=\"git://github.com/ahwayakchih/languagefield.git\">clone URL</a></li>\n<li>MailChimp | <a href=\"http://github.com/lewiswharf/mailchimp/\">github</a> | <a href=\"git://github.com/lewiswharf/mailchimp.git\">clone URL</a></li>\n<li>Maintenance Mode | <a href=\"http://github.com/pointybeard/maintenance_mode/\">github</a> | <a href=\"git://github.com/pointybeard/maintenance_mode.git\">clone URL</a></li>\n<li>Map Location Field | <a href=\"http://github.com/pointybeard/maplocationfield/\">github</a> | <a href=\"git://github.com/pointybeard/maplocationfield.git\">clone URL</a></li>\n<li>Markdown | <a href=\"http://github.com/pointybeard/markdown/\">github</a> | <a href=\"git://github.com/pointybeard/markdown.git\">clone URL</a></li>\n<li>Markdown Labels | <a href=\"http://github.com/michael-e/markdown_labels/\">github</a> | <a href=\"git://github.com/michael-e/markdown_labels.git\">clone URL</a></li>\n<li>MarkItUp! | <a href=\"http://github.com/ahwayakchih/markitup/\">github</a> | <a href=\"git://github.com/ahwayakchih/markitup.git\">clone URL</a></li>\n<li>Mass Upload Utility | <a href=\"http://github.com/scottkf/mass-upload-utility/\">github</a> | <a href=\"git://github.com/scottkf/mass-upload-utility.git\">clone URL</a></li>\n<li>Mediathek | <a href=\"http://github.com/nilshoerrmann/mediathek/\">github</a> | <a href=\"git://github.com/nilshoerrmann/mediathek.git\">clone URL</a></li>\n<li>Multiselect to Checkboxes | <a href=\"http://github.com/Demwunz/multiselect_to_checkboxes/\">github</a> | <a href=\"git://github.com/Demwunz/multiselect_to_checkboxes.git\">clone URL</a></li>\n<li>New Visiter | <a href=\"http://github.com/lewiswharf/new_visiter/\">github</a> | <a href=\"git://github.com/lewiswharf/new_visiter.git\">clone URL</a></li>\n<li>No Editing of Entries Filter | <a href=\"http://github.com/phoque/NoEditing/\">github</a> | <a href=\"git://github.com/phoque/NoEditing.git\">clone URL</a></li>\n<li>Number Field | <a href=\"http://github.com/pointybeard/numberfield/\">github</a> | <a href=\"git://github.com/pointybeard/numberfield.git\">clone URL</a></li>\n<li>Numeric Grouping Field | <a href=\"http://github.com/rowan-lewis/numericgroupingfield/\">github</a> | <a href=\"git://github.com/rowan-lewis/numericgroupingfield.git\">clone URL</a></li>\n<li>Order Entries | <a href=\"http://github.com/nickdunn/order_entries/\">github</a> | <a href=\"git://github.com/nickdunn/order_entries.git\">clone URL</a></li>\n<li>Page Templates | <a href=\"http://github.com/czheng/pagetemplates/\">github</a> | <a href=\"git://github.com/czheng/pagetemplates.git\">clone URL</a></li>\n<li>Pages Editor Minimal | <a href=\"http://github.com/pointybeard/pages_editor_minimal/\">github</a> | <a href=\"git://github.com/pointybeard/pages_editor_minimal.git\">clone URL</a></li>\n<li>Pages Field | <a href=\"http://github.com/pointybeard/pagesfield/\">github</a> | <a href=\"git://github.com/pointybeard/pagesfield.git\">clone URL</a></li>\n<li>Ping-o-matic | <a href=\"http://github.com/nickdunn/pingomatic/\">github</a> | <a href=\"git://github.com/nickdunn/pingomatic.git\">clone URL</a></li>\n<li>Publish Filtering | <a href=\"http://github.com/nickdunn/publishfiltering/\">github</a> | <a href=\"git://github.com/nickdunn/publishfiltering.git\">clone URL</a></li>\n<li>ReCAPTCHA | <a href=\"http://github.com/pointybeard/recaptcha/\">github</a> | <a href=\"git://github.com/pointybeard/recaptcha.git\">clone URL</a></li>\n<li>Reference Link | <a href=\"http://github.com/czheng/referencelink/\">github</a> | <a href=\"git://github.com/czheng/referencelink.git\">clone URL</a></li>\n<li>Reflection Field | <a href=\"http://github.com/rowan-lewis/reflectionfield/\">github</a> | <a href=\"git://github.com/rowan-lewis/reflectionfield.git\">clone URL</a></li>\n<li>Repeating Date Field | <a href=\"http://github.com/rowan-lewis/repeatingdatefield/\">github</a> | <a href=\"git://github.com/rowan-lewis/repeatingdatefield.git\">clone URL</a></li>\n<li>Rich Text (TinyMCE) Text Formatter | <a href=\"http://github.com/pointybeard/richtext_tinymce/\">github</a> | <a href=\"git://github.com/pointybeard/richtext_tinymce.git\">clone URL</a></li>\n<li>Section Schemas | <a href=\"http://github.com/nickdunn/section_schemas/\">github</a> | <a href=\"git://github.com/nickdunn/section_schemas.git\">clone URL</a></li>\n<li>Selectbox Link Field | <a href=\"http://github.com/pointybeard/selectbox_link_field/\">github</a> | <a href=\"git://github.com/pointybeard/selectbox_link_field.git\">clone URL</a></li>\n<li>Server Headers | <a href=\"http://github.com/pointybeard/serverheaders/\">github</a> | <a href=\"git://github.com/pointybeard/serverheaders.git\">clone URL</a></li>\n<li>Session Monster | <a href=\"http://github.com/pointybeard/sessionmonster/\">github</a> | <a href=\"git://github.com/pointybeard/sessionmonster.git\">clone URL</a></li>\n<li>Signed File Upload Field | <a href=\"http://github.com/tonyarnold/signedfileuploadfield/\">github</a> | <a href=\"git://github.com/tonyarnold/signedfileuploadfield.git\">clone URL</a></li>\n<li>Templated Text Formatters | <a href=\"http://github.com/ahwayakchih/templatedtextformatters/\">github</a> | <a href=\"git://github.com/ahwayakchih/templatedtextformatters.git\">clone URL</a></li>\n<li>Text Box Field | <a href=\"http://github.com/rowan-lewis/textboxfield/\">github</a> | <a href=\"git://github.com/rowan-lewis/textboxfield.git\">clone URL</a></li>\n<li>Textformatter Labels | <a href=\"http://github.com/michael-e/textformatter_labels/\">github</a> | <a href=\"git://github.com/michael-e/textformatter_labels.git\">clone URL</a></li>\n<li>Textile Plus Formatter | <a href=\"http://github.com/rowan-lewis/textileplusformatter/\">github</a> | <a href=\"git://github.com/rowan-lewis/textileplusformatter.git\">clone URL</a></li>\n<li>Time Field | <a href=\"http://github.com/pointybeard/extension--time-field/\">github</a> | <a href=\"git://github.com/pointybeard/extension--time-field.git\">clone URL</a></li>\n<li>Unique Input Field | <a href=\"http://github.com/pointybeard/uniqueinputfield/\">github</a> | <a href=\"git://github.com/pointybeard/uniqueinputfield.git\">clone URL</a></li>\n<li>Unique Upload Field | <a href=\"http://github.com/michael-e/uniqueuploadfield/\">github</a> | <a href=\"git://github.com/michael-e/uniqueuploadfield.git\">clone URL</a></li>\n<li>Uploadify | <a href=\"http://github.com/nickdunn/uploadify/\">github</a> | <a href=\"git://github.com/nickdunn/uploadify.git\">clone URL</a></li>\n<li>Vimeo Videos | <a href=\"http://github.com/nickdunn/vimeo_videos/\">github</a> | <a href=\"git://github.com/nickdunn/vimeo_videos.git\">clone URL</a></li>\n<li>XML Field | <a href=\"http://github.com/pointybeard/xmlfield/\">github</a> | <a href=\"git://github.com/pointybeard/xmlfield.git\">clone URL</a></li>\n<li>Yahoo! Search BOSS | <a href=\"http://github.com/ahwayakchih/ysboss/\">github</a> | <a href=\"git://github.com/ahwayakchih/ysboss.git\">clone URL</a></li>\n</ul>\n\n<h4>Symphony Extensions on Github</h4>\n\n<p>To get the latest version of all the extensions, install Git and run the following commands:</p>\n\n<pre><code>git clone git://github.com/ahwayakchih/filterfield.git\ngit clone git://github.com/ahwayakchih/gcse.git\ngit clone git://github.com/ahwayakchih/languagefield.git\ngit clone git://github.com/ahwayakchih/markitup.git\ngit clone git://github.com/ahwayakchih/templatedtextformatters.git\ngit clone git://github.com/ahwayakchih/ysboss.git\ngit clone git://github.com/carsten/globalparamloader.git\ngit clone git://github.com/czheng/enhancedtaglist.git\ngit clone git://github.com/czheng/pagetemplates.git\ngit clone git://github.com/czheng/referencelink.git\ngit clone git://github.com/Demwunz/multiselect_to_checkboxes.git\ngit clone git://github.com/lewiswharf/mailchimp.git\ngit clone git://github.com/lewiswharf/new_visiter.git\ngit clone git://github.com/makenosound/cachelite.git\ngit clone git://github.com/makenosound/dynamic_event_redirect.git\ngit clone git://github.com/michael-e/admin_css_override.git\ngit clone git://github.com/michael-e/markdown_labels.git\ngit clone git://github.com/michael-e/textformatter_labels.git\ngit clone git://github.com/michael-e/uniqueuploadfield.git\ngit clone git://github.com/MrBlank/symphony_color_chooser.git\ngit clone git://github.com/nickdunn/entity_diagram.git\ngit clone git://github.com/nickdunn/firebug_profiler.git\ngit clone git://github.com/nickdunn/gravatar.git\ngit clone git://github.com/nickdunn/order_entries.git\ngit clone git://github.com/nickdunn/pingomatic.git\ngit clone git://github.com/nickdunn/publishfiltering.git\ngit clone git://github.com/nickdunn/section_schemas.git\ngit clone git://github.com/nickdunn/uploadify.git\ngit clone git://github.com/nickdunn/vimeo_videos.git\ngit clone git://github.com/nilshoerrmann/german.git\ngit clone git://github.com/nilshoerrmann/mediathek.git\ngit clone git://github.com/phoque/NoEditing.git\ngit clone git://github.com/phoque/Symphony-Enable-Tabkey.git\ngit clone git://github.com/phoque/Symphony--jQuery-supplier.git\ngit clone git://github.com/pointybeard/akismet.git\ngit clone git://github.com/pointybeard/asdc.git\ngit clone git://github.com/pointybeard/breadcrumb.git\ngit clone git://github.com/pointybeard/content_type_mappings.git\ngit clone git://github.com/pointybeard/cookiemonster.git\ngit clone git://github.com/pointybeard/export_ensemble.git\ngit clone git://github.com/pointybeard/extension--time-field.git\ngit clone git://github.com/pointybeard/filemanager.git\ngit clone git://github.com/pointybeard/frontend_authentication.git\ngit clone git://github.com/pointybeard/hashfield.git\ngit clone git://github.com/pointybeard/iplocation_lookup.git\ngit clone git://github.com/pointybeard/jit_image_manipulation.git\ngit clone git://github.com/pointybeard/maintenance_mode.git\ngit clone git://github.com/pointybeard/maplocationfield.git\ngit clone git://github.com/pointybeard/markdown.git\ngit clone git://github.com/pointybeard/numberfield.git\ngit clone git://github.com/pointybeard/pages_editor_minimal.git\ngit clone git://github.com/pointybeard/pagesfield.git\ngit clone git://github.com/pointybeard/recaptcha.git\ngit clone git://github.com/pointybeard/richtext_tinymce.git\ngit clone git://github.com/pointybeard/selectbox_link_field.git\ngit clone git://github.com/pointybeard/serverheaders.git\ngit clone git://github.com/pointybeard/sessionmonster.git\ngit clone git://github.com/pointybeard/uniqueinputfield.git\ngit clone git://github.com/pointybeard/xmlfield.git\ngit clone git://github.com/rowan-lewis/activitylog.git\ngit clone git://github.com/rowan-lewis/bilinkfield.git\ngit clone git://github.com/rowan-lewis/calendaroverlay.git\ngit clone git://github.com/rowan-lewis/canofspam.git\ngit clone git://github.com/rowan-lewis/cleanurlparams.git\ngit clone git://github.com/rowan-lewis/emailtemplatefilter.git\ngit clone git://github.com/rowan-lewis/flexdatefield.git\ngit clone git://github.com/rowan-lewis/frontendmembermanager.git\ngit clone git://github.com/rowan-lewis/globalresourceloader.git\ngit clone git://github.com/rowan-lewis/numericgroupingfield.git\ngit clone git://github.com/rowan-lewis/reflectionfield.git\ngit clone git://github.com/rowan-lewis/repeatingdatefield.git\ngit clone git://github.com/rowan-lewis/textboxfield.git\ngit clone git://github.com/rowan-lewis/textileplusformatter.git\ngit clone git://github.com/scottkf/mass-upload-utility.git\ngit clone git://github.com/tonyarnold/signedfileuploadfield.git\ngit clone git://github.com/yourheropaul/eventex.git\n</code></pre>\n');
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (276, 50, 'Prerequisites:\r\n\r\n- Symphony XSLT Content Management System\r\n- Apache webserver meeting Symphony\'s requirements\r\n- 2 domain names\r\n\r\nOn websites running Symphony, sharing content between sites may be achieved rather easily using XML output on one site and dynamic datasources on other (\"client\") websites. This will be the best way to go if only a few content streams will be shared. Moreover, it will be the only way if separate admin areas are needed.\r\n\r\nNow think of a different situation: Imagine a client who wants to manage several websites from a single backend. Additionally, these websites should share lots of content and \"functions\". Is there an elegant solution to this?\r\n\r\nFrom version 2.0, Symphony does no more execute \"strong redirects\" to a preset domain. Nor does it save a server path anywhere in the configuration. Instead, the domain name and the server path are determined on-the-fly where needed. This behaviour, while unfamiliar for long-time users of Symphony, provides much greater flexibility (and may therefore be regarded as \"typically symphonese\"). So Symphony indeed allows for the following scenario:\r\n\r\n* A single backend (e.g. admin area) may be used for two (or more) websites\r\n* Those websites will share the same database, meaning that there is direct access to any content for any website.\r\n* Maintenance will be simplified because of a single shared codebase (Symphony core, Symphony extensions, XSLT templates, CSS files etc.).\r\n* There is fine-grained control over independent and shared resources.\r\n\r\nThe downsides will be:\r\n\r\n* Symphony configuration is the same for all domains. There is, for example, no known way to switch one site in maintenance mode while keeping the others \"alive\". (Of course you could add a \'simulated maintenance mode\' using XSLT.)\r\n* Any content will be visible to every author or admin user (as long as there is no advanced author management). This might lead to an over-populated admin area. The problem will be much smaller with Symphony\'s ability to build navigation groups.\r\n\r\n\r\n## Basic Setup\r\n\r\nDomain1 and Domain2 should point to the same directory on the server, like so:\r\n\r\n	http://www.domain1.com  =>  /var/www/www.domainx.com\r\n	http://www.domain2.com  =>  /var/www/www.domainx.com\r\n\r\nInstall a Symphony ensemble in `/var/www/domainx.com`.\r\n\r\nAfter installation you should be able to access your website via `http://www.domain1.com` or `http://www.domain2.com`.\r\n\r\nYou should as well be able to login from either `http://www.domain1.com/symphony` or `http://www.domain2.com/symphony`. You will note that, because Symphony switched to login-management using PHP sessions lately, these logins (giving access to the admin area) will be domain-specific. This is by nature of PHP sessions. It is, of course, important only if you need a valid login cookie for a specific domain (because you are checking for logged-in users in XSLT, or you are trying to access Symphony\'s debug mode). Publish actions and other work in the admin area may be executed using any of the domains. Remember: This is a single installation of Symphony.\r\n\r\nNow take a first step: Open your main `.htaccess` file and paste the following code at the very top:\r\n\r\n	<IfModule mod_rewrite.c>\r\n\r\n		RewriteEngine On\r\n		RewriteBase /\r\n\r\n		### GLOBAL REWRITE\r\n\r\n		RewriteCond %{HTTP_HOST} ^www.domain1.com$ [NC]\r\n		RewriteRule ^(.*)$ http://domain1.com/$1 [R,L]\r\n\r\n		RewriteCond %{HTTP_HOST} ^domain2.com$ [NC]\r\n		RewriteRule ^(.*)$ http://www.domain2.com/$1 [R,L]\r\n\r\n	</IfModule>\r\n\r\nNow you can access Domain1 exclusively without the \"www\" prefix, while Domain2 will always include the \"www\" prefix. Symphony doesn\'t care about that at all.\r\n\r\n\r\n## Delivering Domain-specific Content\r\n\r\nHere is the big idea: Domain1\'s website will have one special page which will be the homepage of Domain2. Any sub-pages of this special page will be pages of the Domain2 website. Thinking in page hierarchy, accessing Domain2 will be like accessing a sub-folder (of the Domain1 folder) on your computer\'s hard drive.\r\n\r\nPrepare for your \"satellite website\" by adding a new page in Symphony. Let\'s call this page \"domain2\". Page type: hidden. (It should not appear in your navigation.) Append the Login Info Event and the Navigation Datasource. Fill in some content. Use your existing master stylesheet for the moment -- we\'ll improve this in a minute.\r\n\r\nThe new page is at `http://domain1.com/domain2/`.\r\n\r\nHere comes the `mod_rewrite` magic. Add the following rules in your main `.htaccess` file (after the \"Global Rewrite\" block you created, immediately before the closing `</IfModule>` tag):\r\n\r\n	### DOMAIN2\r\n\r\n	RewriteCond %{HTTP_HOST} domain1.com$ [NC]\r\n	RewriteRule ^domain2/(.*)$ http://www.domain2.com/$1 [R,L]\r\n\r\n	RewriteCond %{HTTP_HOST} domain2.com$ [NC]\r\n	RewriteRule ^$ /index.php?page=domain2&%{QUERY_STRING} [L]\r\n\r\n	RewriteCond %{HTTP_HOST} domain2.com$ [NC]\r\n	RewriteRule ^(.*)/$ /index.php?page=domain2/$1&%{QUERY_STRING} [L]\r\n\r\nThese rules (tested on Apache 2) do the following:\r\n\r\n* The \"original URL\" of your satellite website will be redirected to Domain2. (Rule 1)\r\n* If the request is for domain2, then fool symphony by using `page=domain2` for its URL rewriting. (Rules 2 and 3)\r\n\r\nTry to access your page at `domain1.com/domain2`. You should be redirected to `http://www.domain2.com`. Your new page is now the homepage of Domain2!\r\n\r\nIf you have followed with a default installation of Symphony 2, you may have noticed that the navigation on the homepage of domain2 is missing the navigation elements for logged-in users. Guess why? You are probably logged in to Domain1, but not to Domain2. Try and log in to `http://www.domain2.com/symphony`. Boom - it works.\r\n\r\nWell, not quite. Actually the standard page links in the navigation dont\'t work. This is because those pages are not Domain2 pages, meaning they do not have \"domain2\" as their parent page. They should not even be here, in Domain2\'s navigation. Domain2 will need its own navigation datasource and navigation template.\r\n\r\nSo create a datasource called \"Navigation Domain2\". The source must be \"Navigation\". Filter this datasource by the Parent Page \"/domain2\". Append this datasource to your page called \"domain2\".\r\n\r\nOpen the utiliy `navigation.xsl` and replace line 4:\r\n\r\n	<xsl:template match=\"navigation\">\r\n\r\nby:\r\n\r\n	<xsl:template match=\"navigation | navigation-domain2\">\r\n\r\n(This will make the template work with either navigation datasource.)\r\n	\r\nNow open your `master.xsl`. Replace:\r\n\r\n	<xsl:apply-templates select=\"data/navigation\"/>\r\n\r\nby:\r\n\r\n	<xsl:choose>\r\n		<xsl:when test=\"contains($root, \'domain2.com\')\">\r\n			<xsl:apply-templates select=\"data/navigation-domain2\"/>\r\n		</xsl:when>\r\n		<xsl:otherwise>\r\n			<xsl:apply-templates select=\"data/navigation\"/>\r\n		</xsl:otherwise>\r\n	</xsl:choose>\r\n\r\n(This will apply navigation templates depending on the value of the `$root` parameter.\r\n\r\nNow all you need is some pages having \"domain2\" as their parent page. If they show up in your page XML of your Domain2 homepage (on the debug screen), you should as well see them in the navigation. You should be able to navigate through your website \"Domain2\".\r\n\r\nYou have started to set courses, still re-using most of Domain1\'s codebase for Domain2. Play around. Symphony allows to build \"domain-specific\" datsources or events simply by attaching them to the right pages. All of your existing XSL templates may be used, some of them needing slight modifications. You may build \"domain-specific\" utilities as well. It\'s up to your imagination.\r\n\r\n\r\n## Increasing future-proofness: Global Variables\r\n\r\nChecking for a site root in many of your XSL templates is not very future-proof. If your client decides to change the domain of the \"satellite website\", you would have to go through all your page and utility templates.\r\n\r\nTo make life easier you might for example add the following global variable to your `master.xsl` file:\r\n\r\n	<xsl:variable name=\"satellite-site\">\r\n		<xsl:choose>\r\n			<xsl:when test=\"contains($root, \'domain2.com\')\">\r\n				<xsl:text>domain2</xsl:text>\r\n			</xsl:when>\r\n			<xsl:otherwise>\r\n				<xsl:text>NULL</xsl:text>\r\n			</xsl:otherwise>\r\n		</xsl:choose>\r\n	</xsl:variable>\r\n\r\nNow you can do things like the following in your template files (here: `master.xsl`):\r\n\r\n	<xsl:if test=\"$satellite-site = \'domain2\'\">\r\n		<link rel=\"stylesheet\" type=\"text/css\" media=\"screen\" href=\"{$workspace}/css/domain2.css\" />\r\n	</xsl:if>\r\n\r\n(This would load an additional \"overriding\" CSS Stylesheet for the satellite website called domain2.)\r\n\r\nOr this:\r\n\r\n	<xsl:if test=\"$satellite-site = \'NULL\'\">\r\n		<xsl:call-template name=\"advertisement-for-domain2.xsl\"/>\r\n	</xsl:if>\r\n\r\nOr this, as a replacement for the navigation logic you already implemented:\r\n\r\n	<xsl:choose>\r\n		<xsl:when test=\"$satellite-site = \'domain2\">\r\n			<xsl:apply-templates select=\"data/navigation-domain2\"/>\r\n		</xsl:when>\r\n		<xsl:otherwise>\r\n			<xsl:apply-templates select=\"data/navigation\"/>\r\n		</xsl:otherwise>\r\n	</xsl:choose>\r\n\r\nIf you ever have to change the domain name of your satellite website, simply change the corresponding `<xsl:when>` statement in your master template.\r\n\r\n\r\n## One step further: Adding Multi-Directory-Support\r\n\r\nYou might find situations where it is useful to have different domains pointing to different directories on the server. For example if other applications (like intranet systems) are running on one of the domains. In this case you may not want to manage access restrictions by `.htaccess` exclusively (which indeed might become very complicated over time). Instead you would like to have different home directories for your domains on the server.\r\n\r\n**You will need SSH access to the webspace/webserver.**\r\n\r\nDomain1 and Domain2 point to different directories on the server, like so:\r\n\r\n	http://www.domain1.com  =>  /var/www/www.domain1.com\r\n	http://www.domain2.com  =>  /var/www/www.domain2.com\r\n\r\nWe assume that Symphony is in `/var/www/domain1`. You will find the following files and folders:\r\n\r\n	.htaccess\r\n	extensions\r\n	index.php\r\n	manifest\r\n	symphony\r\n	workspace\r\n\r\nAll you need to get Domain2 working with Symphony is to create some symbolic links from `/var/www/domain1` to `/var/www/domain2`. Connect to your server via SSH using an SSH client application (e.g. the Mac OS X Terminal) and create the following links:\r\n\r\n	ln -s  /var/www/www.domain1.com/extensions  /var/www/www.domain2.com/extensions;\r\n	ln -s  /var/www/www.domain1.com/index.php   /var/www/www.domain2.com/index.php;\r\n	ln -s  /var/www/www.domain1.com/manifest    /var/www/www.domain2.com/manifest;\r\n	ln -s  /var/www/www.domain1.com/symphony    /var/www/www.domain2.com/symphony;\r\n	ln -s  /var/www/www.domain1.com/workspace   /var/www/www.domain2.com/workspace;\r\n\r\nIf none of the .htaccess files was supposed to contain domain-specific rulesets, even this file could be linked by a symbolic link. However, in most cases domain-specific content will be added over time. So it is much more future-proof to create a physical `.htaccess` file for Domain2 and to paste the Symphony part of Domain1\'s `.htaccess` file there.\r\n\r\nYou should then be able to access your website via `http://www.domain1.com` or `http://www.domain2.com`. You should as well be able to login from either `http://www.domain1.com/symphony` or `http://www.domain2.com/symphony`.\r\n\r\nIf you intend to deliver different content for your domains, you will have to transcribe the `.htaccess` rules explained above. Now you have two independant `.htaccess` files. Actually this will make things a bit more simple, because you do not need to check for the HTTP_HOST so often.\r\n\r\nSo you may put this at the beginning of your Domain1 .htaccess file (before the Symphony rewrite part):\r\n\r\n	<IfModule mod_rewrite.c>\r\n\r\n		RewriteEngine On\r\n		RewriteBase /\r\n\r\n		### GLOBAL REWRITE\r\n\r\n		RewriteCond %{HTTP_HOST} ^www.domain1.com$ [NC]\r\n		RewriteRule ^(.*)$ http://domain1.com/$1 [R,L]\r\n	\r\n		### DOMAIN2\r\n	\r\n		RewriteRule ^domain2/(.*)$ http://www.domain2.com/$1 [R,L]\r\n	\r\n	</IfModule>\r\n\r\nAnd this at the beginning of your Domain2 .htaccess file (before the Symphony rewrite part):\r\n\r\n	<IfModule mod_rewrite.c>\r\n\r\n		RewriteEngine On\r\n		RewriteBase /\r\n\r\n		### GLOBAL REWRITE\r\n\r\n		RewriteCond %{HTTP_HOST} ^domain2.com$ [NC]\r\n		RewriteRule ^(.*)$ http://www.domain2.com/$1 [R,L]\r\n\r\n		### SYMPHONY REWRITE\r\n\r\n		RewriteRule ^$ /index.php?page=domain2&%{QUERY_STRING} [L]\r\n		RewriteRule ^(.*)/$ /index.php?page=domain2/$1&%{QUERY_STRING} [L]\r\n\r\n	</IfModule>\r\n\r\nYou are ready to go.\r\n\r\n', '<p>Prerequisites:</p>\n\n<ul>\n<li>Symphony XSLT Content Management System</li>\n<li>Apache webserver meeting Symphony&#8217;s requirements</li>\n<li>2 domain names</li>\n</ul>\n\n<p>On websites running Symphony, sharing content between sites may be achieved rather easily using XML output on one site and dynamic datasources on other (&#8220;client&#8221;) websites. This will be the best way to go if only a few content streams will be shared. Moreover, it will be the only way if separate admin areas are needed.</p>\n\n<p>Now think of a different situation: Imagine a client who wants to manage several websites from a single backend. Additionally, these websites should share lots of content and &#8220;functions&#8221;. Is there an elegant solution to this?</p>\n\n<p>From version 2.0, Symphony does no more execute &#8220;strong redirects&#8221; to a preset domain. Nor does it save a server path anywhere in the configuration. Instead, the domain name and the server path are determined on-the-fly where needed. This behaviour, while unfamiliar for long-time users of Symphony, provides much greater flexibility (and may therefore be regarded as &#8220;typically symphonese&#8221;). So Symphony indeed allows for the following scenario:</p>\n\n<ul>\n<li>A single backend (e.g. admin area) may be used for two (or more) websites</li>\n<li>Those websites will share the same database, meaning that there is direct access to any content for any website.</li>\n<li>Maintenance will be simplified because of a single shared codebase (Symphony core, Symphony extensions, XSLT templates, CSS files etc.).</li>\n<li>There is fine-grained control over independent and shared resources.</li>\n</ul>\n\n<p>The downsides will be:</p>\n\n<ul>\n<li>Symphony configuration is the same for all domains. There is, for example, no known way to switch one site in maintenance mode while keeping the others &#8220;alive&#8221;. (Of course you could add a &#8216;simulated maintenance mode&#8217; using XSLT.)</li>\n<li>Any content will be visible to every author or admin user (as long as there is no advanced author management). This might lead to an over-populated admin area. The problem will be much smaller with Symphony&#8217;s ability to build navigation groups.</li>\n</ul>\n\n<h2>Basic Setup</h2>\n\n<p>Domain1 and Domain2 should point to the same directory on the server, like so:</p>\n\n<pre><code>http://www.domain1.com  =&gt;  /var/www/www.domainx.com\nhttp://www.domain2.com  =&gt;  /var/www/www.domainx.com\n</code></pre>\n\n<p>Install a Symphony ensemble in <code>/var/www/domainx.com</code>.</p>\n\n<p>After installation you should be able to access your website via <code>http://www.domain1.com</code> or <code>http://www.domain2.com</code>.</p>\n\n<p>You should as well be able to login from either <code>http://www.domain1.com/symphony</code> or <code>http://www.domain2.com/symphony</code>. You will note that, because Symphony switched to login-management using PHP sessions lately, these logins (giving access to the admin area) will be domain-specific. This is by nature of PHP sessions. It is, of course, important only if you need a valid login cookie for a specific domain (because you are checking for logged-in users in XSLT, or you are trying to access Symphony&#8217;s debug mode). Publish actions and other work in the admin area may be executed using any of the domains. Remember: This is a single installation of Symphony.</p>\n\n<p>Now take a first step: Open your main <code>.htaccess</code> file and paste the following code at the very top:</p>\n\n<pre><code>&lt;IfModule mod_rewrite.c&gt;\n\n    RewriteEngine On\n    RewriteBase /\n\n    ### GLOBAL REWRITE\n\n    RewriteCond %{HTTP_HOST} ^www.domain1.com$ [NC]\n    RewriteRule ^(.*)$ http://domain1.com/$1 [R,L]\n\n    RewriteCond %{HTTP_HOST} ^domain2.com$ [NC]\n    RewriteRule ^(.*)$ http://www.domain2.com/$1 [R,L]\n\n&lt;/IfModule&gt;\n</code></pre>\n\n<p>Now you can access Domain1 exclusively without the &#8220;www&#8221; prefix, while Domain2 will always include the &#8220;www&#8221; prefix. Symphony doesn&#8217;t care about that at all.</p>\n\n<h2>Delivering Domain-specific Content</h2>\n\n<p>Here is the big idea: Domain1&#8217;s website will have one special page which will be the homepage of Domain2. Any sub-pages of this special page will be pages of the Domain2 website. Thinking in page hierarchy, accessing Domain2 will be like accessing a sub-folder (of the Domain1 folder) on your computer&#8217;s hard drive.</p>\n\n<p>Prepare for your &#8220;satellite website&#8221; by adding a new page in Symphony. Let&#8217;s call this page &#8220;domain2&#8221;. Page type: hidden. (It should not appear in your navigation.) Append the Login Info Event and the Navigation Datasource. Fill in some content. Use your existing master stylesheet for the moment &#8211; we&#8217;ll improve this in a minute.</p>\n\n<p>The new page is at <code>http://domain1.com/domain2/</code>.</p>\n\n<p>Here comes the <code>mod_rewrite</code> magic. Add the following rules in your main <code>.htaccess</code> file (after the &#8220;Global Rewrite&#8221; block you created, immediately before the closing <code>&lt;/IfModule&gt;</code> tag):</p>\n\n<pre><code>### DOMAIN2\n\nRewriteCond %{HTTP_HOST} domain1.com$ [NC]\nRewriteRule ^domain2/(.*)$ http://www.domain2.com/$1 [R,L]\n\nRewriteCond %{HTTP_HOST} domain2.com$ [NC]\nRewriteRule ^$ /index.php?page=domain2&amp;%{QUERY_STRING} [L]\n\nRewriteCond %{HTTP_HOST} domain2.com$ [NC]\nRewriteRule ^(.*)/$ /index.php?page=domain2/$1&amp;%{QUERY_STRING} [L]\n</code></pre>\n\n<p>These rules (tested on Apache 2) do the following:</p>\n\n<ul>\n<li>The &#8220;original URL&#8221; of your satellite website will be redirected to Domain2. (Rule 1)</li>\n<li>If the request is for domain2, then fool symphony by using <code>page=domain2</code> for its URL rewriting. (Rules 2 and 3)</li>\n</ul>\n\n<p>Try to access your page at <code>domain1.com/domain2</code>. You should be redirected to <code>http://www.domain2.com</code>. Your new page is now the homepage of Domain2!</p>\n\n<p>If you have followed with a default installation of Symphony 2, you may have noticed that the navigation on the homepage of domain2 is missing the navigation elements for logged-in users. Guess why? You are probably logged in to Domain1, but not to Domain2. Try and log in to <code>http://www.domain2.com/symphony</code>. Boom - it works.</p>\n\n<p>Well, not quite. Actually the standard page links in the navigation dont&#8217;t work. This is because those pages are not Domain2 pages, meaning they do not have &#8220;domain2&#8221; as their parent page. They should not even be here, in Domain2&#8217;s navigation. Domain2 will need its own navigation datasource and navigation template.</p>\n\n<p>So create a datasource called &#8220;Navigation Domain2&#8221;. The source must be &#8220;Navigation&#8221;. Filter this datasource by the Parent Page &#8220;/domain2&#8221;. Append this datasource to your page called &#8220;domain2&#8221;.</p>\n\n<p>Open the utiliy <code>navigation.xsl</code> and replace line 4:</p>\n\n<pre><code>&lt;xsl:template match=\"navigation\"&gt;\n</code></pre>\n\n<p>by:</p>\n\n<pre><code>&lt;xsl:template match=\"navigation | navigation-domain2\"&gt;\n</code></pre>\n\n<p>(This will make the template work with either navigation datasource.)</p>\n\n<p>Now open your <code>master.xsl</code>. Replace:</p>\n\n<pre><code>&lt;xsl:apply-templates select=\"data/navigation\"/&gt;\n</code></pre>\n\n<p>by:</p>\n\n<pre><code>&lt;xsl:choose&gt;\n    &lt;xsl:when test=\"contains($root, \'domain2.com\')\"&gt;\n        &lt;xsl:apply-templates select=\"data/navigation-domain2\"/&gt;\n    &lt;/xsl:when&gt;\n    &lt;xsl:otherwise&gt;\n        &lt;xsl:apply-templates select=\"data/navigation\"/&gt;\n    &lt;/xsl:otherwise&gt;\n&lt;/xsl:choose&gt;\n</code></pre>\n\n<p>(This will apply navigation templates depending on the value of the <code>$root</code> parameter.</p>\n\n<p>Now all you need is some pages having &#8220;domain2&#8221; as their parent page. If they show up in your page XML of your Domain2 homepage (on the debug screen), you should as well see them in the navigation. You should be able to navigate through your website &#8220;Domain2&#8221;.</p>\n\n<p>You have started to set courses, still re-using most of Domain1&#8217;s codebase for Domain2. Play around. Symphony allows to build &#8220;domain-specific&#8221; datsources or events simply by attaching them to the right pages. All of your existing XSL templates may be used, some of them needing slight modifications. You may build &#8220;domain-specific&#8221; utilities as well. It&#8217;s up to your imagination.</p>\n\n<h2>Increasing future-proofness: Global Variables</h2>\n\n<p>Checking for a site root in many of your XSL templates is not very future-proof. If your client decides to change the domain of the &#8220;satellite website&#8221;, you would have to go through all your page and utility templates.</p>\n\n<p>To make life easier you might for example add the following global variable to your <code>master.xsl</code> file:</p>\n\n<pre><code>&lt;xsl:variable name=\"satellite-site\"&gt;\n    &lt;xsl:choose&gt;\n        &lt;xsl:when test=\"contains($root, \'domain2.com\')\"&gt;\n            &lt;xsl:text&gt;domain2&lt;/xsl:text&gt;\n        &lt;/xsl:when&gt;\n        &lt;xsl:otherwise&gt;\n            &lt;xsl:text&gt;NULL&lt;/xsl:text&gt;\n        &lt;/xsl:otherwise&gt;\n    &lt;/xsl:choose&gt;\n&lt;/xsl:variable&gt;\n</code></pre>\n\n<p>Now you can do things like the following in your template files (here: <code>master.xsl</code>):</p>\n\n<pre><code>&lt;xsl:if test=\"$satellite-site = \'domain2\'\"&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" media=\"screen\" href=\"{$workspace}/css/domain2.css\" /&gt;\n&lt;/xsl:if&gt;\n</code></pre>\n\n<p>(This would load an additional &#8220;overriding&#8221; CSS Stylesheet for the satellite website called domain2.)</p>\n\n<p>Or this:</p>\n\n<pre><code>&lt;xsl:if test=\"$satellite-site = \'NULL\'\"&gt;\n    &lt;xsl:call-template name=\"advertisement-for-domain2.xsl\"/&gt;\n&lt;/xsl:if&gt;\n</code></pre>\n\n<p>Or this, as a replacement for the navigation logic you already implemented:</p>\n\n<pre><code>&lt;xsl:choose&gt;\n    &lt;xsl:when test=\"$satellite-site = \'domain2\"&gt;\n        &lt;xsl:apply-templates select=\"data/navigation-domain2\"/&gt;\n    &lt;/xsl:when&gt;\n    &lt;xsl:otherwise&gt;\n        &lt;xsl:apply-templates select=\"data/navigation\"/&gt;\n    &lt;/xsl:otherwise&gt;\n&lt;/xsl:choose&gt;\n</code></pre>\n\n<p>If you ever have to change the domain name of your satellite website, simply change the corresponding <code>&lt;xsl:when&gt;</code> statement in your master template.</p>\n\n<h2>One step further: Adding Multi-Directory-Support</h2>\n\n<p>You might find situations where it is useful to have different domains pointing to different directories on the server. For example if other applications (like intranet systems) are running on one of the domains. In this case you may not want to manage access restrictions by <code>.htaccess</code> exclusively (which indeed might become very complicated over time). Instead you would like to have different home directories for your domains on the server.</p>\n\n<p><strong>You will need SSH access to the webspace/webserver.</strong></p>\n\n<p>Domain1 and Domain2 point to different directories on the server, like so:</p>\n\n<pre><code>http://www.domain1.com  =&gt;  /var/www/www.domain1.com\nhttp://www.domain2.com  =&gt;  /var/www/www.domain2.com\n</code></pre>\n\n<p>We assume that Symphony is in <code>/var/www/domain1</code>. You will find the following files and folders:</p>\n\n<pre><code>.htaccess\nextensions\nindex.php\nmanifest\nsymphony\nworkspace\n</code></pre>\n\n<p>All you need to get Domain2 working with Symphony is to create some symbolic links from <code>/var/www/domain1</code> to <code>/var/www/domain2</code>. Connect to your server via SSH using an SSH client application (e.g. the Mac OS X Terminal) and create the following links:</p>\n\n<pre><code>ln -s  /var/www/www.domain1.com/extensions  /var/www/www.domain2.com/extensions;\nln -s  /var/www/www.domain1.com/index.php   /var/www/www.domain2.com/index.php;\nln -s  /var/www/www.domain1.com/manifest    /var/www/www.domain2.com/manifest;\nln -s  /var/www/www.domain1.com/symphony    /var/www/www.domain2.com/symphony;\nln -s  /var/www/www.domain1.com/workspace   /var/www/www.domain2.com/workspace;\n</code></pre>\n\n<p>If none of the .htaccess files was supposed to contain domain-specific rulesets, even this file could be linked by a symbolic link. However, in most cases domain-specific content will be added over time. So it is much more future-proof to create a physical <code>.htaccess</code> file for Domain2 and to paste the Symphony part of Domain1&#8217;s <code>.htaccess</code> file there.</p>\n\n<p>You should then be able to access your website via <code>http://www.domain1.com</code> or <code>http://www.domain2.com</code>. You should as well be able to login from either <code>http://www.domain1.com/symphony</code> or <code>http://www.domain2.com/symphony</code>.</p>\n\n<p>If you intend to deliver different content for your domains, you will have to transcribe the <code>.htaccess</code> rules explained above. Now you have two independant <code>.htaccess</code> files. Actually this will make things a bit more simple, because you do not need to check for the HTTP_HOST so often.</p>\n\n<p>So you may put this at the beginning of your Domain1 .htaccess file (before the Symphony rewrite part):</p>\n\n<pre><code>&lt;IfModule mod_rewrite.c&gt;\n\n    RewriteEngine On\n    RewriteBase /\n\n    ### GLOBAL REWRITE\n\n    RewriteCond %{HTTP_HOST} ^www.domain1.com$ [NC]\n    RewriteRule ^(.*)$ http://domain1.com/$1 [R,L]\n\n    ### DOMAIN2\n\n    RewriteRule ^domain2/(.*)$ http://www.domain2.com/$1 [R,L]\n\n&lt;/IfModule&gt;\n</code></pre>\n\n<p>And this at the beginning of your Domain2 .htaccess file (before the Symphony rewrite part):</p>\n\n<pre><code>&lt;IfModule mod_rewrite.c&gt;\n\n    RewriteEngine On\n    RewriteBase /\n\n    ### GLOBAL REWRITE\n\n    RewriteCond %{HTTP_HOST} ^domain2.com$ [NC]\n    RewriteRule ^(.*)$ http://www.domain2.com/$1 [R,L]\n\n    ### SYMPHONY REWRITE\n\n    RewriteRule ^$ /index.php?page=domain2&amp;%{QUERY_STRING} [L]\n    RewriteRule ^(.*)/$ /index.php?page=domain2/$1&amp;%{QUERY_STRING} [L]\n\n&lt;/IfModule&gt;\n</code></pre>\n\n<p>You are ready to go.</p>\n');
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (278, 51, 'The first solution I came up with was based on the question asked about how to store a variable that represents the currently selected entry. Using the `position()` function in XSLT, it is possible to return a value that represents the position of the selected XML node in a list of nodes, where the first node has a position of 1.\r\n\r\n', '<p>The first solution I came up with was based on the question asked about how to store a variable that represents the currently selected entry. Using the <code>position()</code> function in XSLT, it is possible to return a value that represents the position of the selected XML node in a list of nodes, where the first node has a position of 1.</p>\n');
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (300, 52, '#### Install Symphony\r\n\r\nCreate a clean install of Symphony by omitting the workspace directory during the installation process and login to the Symphony admin area. For more information about installing Symphony, consult the [documentation](http://symphony-cms.com/documentation/installation/).\r\n\r\n#### Create the Entries Section\r\n\r\nCreate a section called \"Entries\" with the following configuration by navigating to Blueprints : Sections and clicking on the \"Create New\" button:\r\n\r\n###### Essentials\r\n\r\n* Name: **Entries**\r\n\r\n###### Fields\r\n\r\n* Text Input\r\n	* Label: **Title**\r\n	* Placement: **Main content**\r\n	* Validation Rule: (none)\r\n	* Make this a required field: **yes**\r\n	* Show column: **yes**\r\n* Textarea\r\n	* Label: **Body**\r\n	* Placement: **Main content**\r\n	* Make textarea **15** rows tall\r\n	* Make this a required field: **no**\r\n	* Text Formatter: **Markdown Extra plus SmartyPants**\r\n	* Show column: **no**\r\n\r\n#### Create the Data Sources\r\n\r\nCreate two data sources, one for the master view and one for the detail view. Navigate to Blueprints : Components and click on the \"Create New\" button.\r\n\r\n##### Entries Data Source\r\n\r\nThe Entries data source provides an overview of the 20 most recent entries. To start with, the data source will include the \"body\" field. By the end of the tutorial, this data source will exclude the \"body\" field to keep the XML output from being unnecessarily large, since we only need enough information to display a list of titles.\r\n\r\n###### Essentials\r\n\r\n* Name: Entries\r\n* Source: Entries\r\n\r\n###### Filter Results\r\n\r\n* Publish (checkbox): Value: Yes\r\n\r\n###### Sorting and Limiting\r\n\r\n* Sort By: Date\r\n* Sort Order: descending\r\n* Show a Maximum of 20 results\r\n* Show Page 1 of results\r\n* Required URL Parameter: (none)\r\n* Redirect to 404 page when no results are found: no\r\n\r\n###### Output Options\r\n\r\n* Parameter Output: Use Field: (None)\r\n* XML Output: Group By: (None)\r\n* Included Elements: title, body\r\n\r\n##### Entry Data Source\r\n\r\nThe Entry data source provides the complete XML data for a single entry: all available fields have been included. A URL parameter of \"entry\" has been specified for the Entries page. The Entry data source is configured to filter the XML output to include only those entries where the Title field matches the $entry parameter. Also, the data source will output XML only if the $entry parameter has a value. \r\n\r\n###### Essentials\r\n\r\n* Name: Entry\r\n* Source: Entries\r\n\r\n###### Filter Results\r\n\r\n* Title (text input): Value: {$entry}\r\n\r\n###### Sorting and Limiting\r\n\r\n* Sort By: System ID\r\n* Sort Order: descending\r\n* Show a Maximum of 20 results\r\n* Show Page 1 of results\r\n* Required URL Parameter: $entry\r\n* Redirect to 404 page when no results are found: no\r\n\r\n###### Output Options\r\n\r\n* Parameter Output: Use Field: (None)\r\n* XML Output: Group By: (None)\r\n* Included Elements: title, body\r\n\r\n\r\n#### Page URL Handles\r\n\r\nIn Symphony, a URL represents the currently selected page and, if the page has been configured to use URL parameters, the values assigned to any URL parameters. For example, the home page of this site uses a page template called \"Home\". To create a page template, navigate to Blueprints : Pages in the Symphony admin. When creating a page template, the URL Handle field can be left blank, but the title of the page must be defined, in this case of the home page, as \"Home\". When saved, the URL handle is automatically created by taking the page title and changing any uppercase characters to lowercase, removing punctuation and replacing spaces with hyphens. The URL handle can then be used to indicate the currently selected page. The Home page has also been given the page type, \"index\", so that when navigating to the root of the site, the page template that has the \"index\" page type will be displayed. For that reason, there can only be one page with a page type of \"index\". The home page for this site can be viewed by either navigating to the root URL or by navigating to the page by its page handle, \"home\": [http://designprojectx.com/home/](http://designprojectx.com/home/). If I defined the title of the page as \"My Home Page\", the URL handle would be automatically created as `my-home-page`, and my home page could be viewed by going to either of the following URLs: `http://designprojectx.com/` or `http://designprojectx.com/my-home-page/`. Alternatively, I could change the value of URL handle to `index` and the page would keep the title, \"My Home Page\", but it would be accessible by navigating to `http://designprojectx.com/index/`.\r\n\r\nAll pages other than the \"index\" page can be viewed only by navigating to the URL handle. If no parent page has been specified, the page URLs will have the following signature:\r\n\r\n	http://www.example.com/page-url-handle/\r\n\r\nIn Symphony, it is best when building URLs to include the trailing slash for all page URL handles and URL parameters to avoid a page redirect. If the trailing slash is not provided, Symphony will automatically redirect to a URL that includes a trailing slash.\r\n\r\nIf a page is defined with a parent page, the page can be viewed only by navigating to the URL that includes the parent page handle and handle of the page itself:\r\n\r\n	http://www.example.com/parent-page-url-handle/page-url-handle/\r\n\r\nFirst, let\'s find out how we can make our page templates dynamic by using some of the default parameters.\r\n\r\n### Default Parameters\r\n\r\nIn Symphony, there is a [list of default parameters](http://symphony-cms.com/documentation/templating/) that can be used by page templates to use dynamically generated values. View these parameters by adding `?debug` to the URL of any Symphony generated page. The Debug pages can only be viewed by admin authors that are logged into Symphony.\r\n\r\n| Parameter        | Description                           |\r\n| ---------------- | ------------------------------------- |\r\n| $today           | 2009-01-29 date format                |\r\n| $current-time    | 11:28 time format                     |\r\n| $this-year       | 2009 format                           |\r\n| $this-month      | 01 format                             |\r\n| $this-day        | 29 format                             |\r\n| $timezone        | -05:00 format represents the difference between GMT and your preference setting in config.php. |\r\n| $website-name    | As defined in the config.php          |\r\n| $page-title      | Page title given to the current page  |\r\n| $root            | Root URL                              |\r\n| $workspace       | URL to the workspace folder           |\r\n| $root-page       | Handle of root page                   |\r\n| $current-page    | Handle of current page                |\r\n| $current-page-id | ID of the current page                |\r\n| $current-path    | Path of the URL is excluding root     |\r\n| $parent-path     | Path of parent pages if they exist    |\r\n| $symphony-bundle | Current version of Symphony           |\r\n| $current-url     | Current URL in its entirety           |\r\n\r\nView the Symphony `?debug` page to view the parameters available to a page, and to view how some of these parameters are context sensitive, changing as you navigate to different pages and URLs.\r\n\r\n#### A Basic Page Template\r\n\r\nOf the default parameters, some of the most often used are `$website-name` and `$page-title`. The following template uses these parameters to dynamically generate values for the `title` element of the HTML `head` element and for a couple headings in the `body` element of the page. Create a Home page with the following configuration:\r\n\r\n###### URL Settings\r\n\r\n* Parent Page: /\r\n* URL Handle: home\r\n* URL Parameters: (none)\r\n\r\n###### Page Metadata\r\n\r\n* Events: (none)\r\n* Data Sources: Entries, Entry\r\n* Page Type: index\r\n\r\n###### Page Data\r\n\r\n* Title: Home\r\n* Body: (see the page template below)\r\n* Utilities: (none)\r\n\r\n##### The Page Template\r\n\r\nUsing a couple of the default page parameters, `$website-name` and `$page-title`, add a page title to the template using some `xsl:value-of` instructions. Attribute value templates and the `$root` parameter are used to specify the root URL of the site in the `href` attribute of anchor elements to create a basic navigation menu.\r\n\r\n	<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n	<xsl:stylesheet version=\"1.0\"\r\n		xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n	\r\n	<xsl:output method=\"xml\"\r\n		doctype-public=\"-//W3C//DTD XHTML 1.0 Strict//EN\"\r\n		doctype-system=\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\r\n		omit-xml-declaration=\"yes\"\r\n		encoding=\"UTF-8\"\r\n		indent=\"yes\" />\r\n	\r\n	<xsl:template match=\"/\">\r\n		<html>\r\n			<head>\r\n				<title>\r\n					<xsl:value-of select=\"$page-title\"/> | \r\n					<xsl:value-of select=\"$website-name\"/>\r\n				</title>\r\n			</head>\r\n			<body>\r\n				<h1><xsl:value-of select=\"$website-name\"/></h1>\r\n				<ul>\r\n					<li><a href=\"{$root}/\">Home</a></li>\r\n					<li><a href=\"{$root}/entries/\">Entries</a></li>\r\n				</ul>\r\n				<h2><xsl:value-of select=\"$page-title\"/></h2>\r\n			</body>\r\n		</html>\r\n	</xsl:template>\r\n	\r\n	</xsl:stylesheet>\r\n\r\n\r\nIt is possible to create a detail view by creating one child page for every detail view. While possible, this would not be ideal. Managing several page templates would be cumbersome when the same thing could be accomplished much more elegantly using URL parameters.\r\n\r\n### URL Parameters\r\n\r\nURL parameters are defined by page templates and are added at the bottom of the list of parameters in the `?debug` information for each page. In Symphony, these parameters and those defined by data sources and, in some cases, extensions, are called the \"parameter pool\". The information provided by the `?debug` page indicates the values supplied in the URL and how each value in the URL is mapped to a parameter that can be used in page templates. As an example, a page template could have a URL parameter `$entry` defined by adding a value of `entry` in the URL Parameters field. To configure more than one URL parameter, separate the name of each parameter by a forward slash, just as if creating a URL to navigate a folder structure on a file server. For example, the URL Parameters field can be defined as `a/b/c/d/e` and the page template would add the following parameters to the parameter pool:\r\n\r\n* $a\r\n* $b\r\n* $c\r\n* $d\r\n* $e\r\n\r\nAs far as I can recall, there has never been a stated limit to the number of URL parameters that can be used, but reason dictates that you should use the least number of parameters possible to build the pages views required by your site development objectives. As with any XSL parameter, be sure not to start the name of any URL parameter with a number, as this would result in an XSL processing error.\r\n\r\n#### XSL Conditionals\r\n\r\nXSLT provides a number of methods to control output to the result document by testing for certain conditions. The `xsl:if` and `xsl:choose` instructions will control output based on the evaluation of a `test` attribute. Another method is to use predicates in an XPath expression, for example, when using an `xsl:for-each` instruction to select an XML node set that meets specific conditions.\r\n\r\nThe following example uses `xsl:if` instructions.\r\n\r\n	<xsl:if test=\"$entry and $entry = \'my-first-entry\'\">\r\n		<!-- display My First Entry -->\r\n	</xsl:if>\r\n	<xsl:if test=\"$entry = \'\'\">\r\n		<!-- display a list of entries -->\r\n	</xsl:otherwise>\r\n	\r\nThis example uses `xsl:choose`, `xsl:when` and `xsl:otherwise` instructions.\r\n\r\n	<xsl:choose>\r\n		<xsl:when test=\"$entry = \'my-first-entry\'\">\r\n			<!-- display My First Entry -->\r\n		</xsl:when>\r\n		<xsl:otherwise>\r\n			<!-- display a list of entries -->\r\n		</xsl:otherwise>\r\n	</xsl:choose>\r\n\r\nThis last example uses an XPath predicate (the condition expressed inside the square brackets] to control the output. In this case, a predicate cannot be used to prevent the output of the list of entries, so a conditional instruction must be added so that the list will display only when an individual entry has not been selected.\r\n\r\n	<xsl:for-each select=\"/data/entries/entry[title/@handle = $entry]\">\r\n		<!-- display My First Entry -->\r\n	</xsl:for-each>\r\n	<xsl:if test=\"$entry = \'\'\">\r\n		<xsl:for-each select=\"/data/entries/entry\">\r\n			<!-- display a list of entries -->\r\n		</xsl:for-each>\r\n	</xsl:if>\r\n	\r\n#### A Page Template to Display List and Detail Views\r\n\r\nBy using XSL conditional instructions, we can control the information that is displayed, depending on the currently selected URL. So, rather than creating a new page to display each individual entry, we need only a single page template to display multiple views of the same data in Symphony. For greater flexibility, it is best to use the `xsl:choose` instruction. Create the Entries page with the following configuration (notice that a URL parameter of `entry` has been included):\r\n\r\n###### URL Settings\r\n\r\n* Parent Page: /\r\n* URL Handle: entries\r\n* URL Parameters: entry\r\n\r\n###### Page Metadata\r\n\r\n* Events: (none)\r\n* Data Sources: Entries, Entry\r\n* Page Type: (none)\r\n\r\n###### Page Data\r\n\r\n* Title: Entries\r\n* Body: (see the page template below)\r\n* Utilities: (none)\r\n\r\n##### The Page Template\r\n\r\n	<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n	<xsl:stylesheet version=\"1.0\"\r\n		 xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n	\r\n	<xsl:output method=\"xml\"\r\n		 doctype-public=\"-//W3C//DTD XHTML 1.0 Strict//EN\"\r\n		 doctype-system=\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\r\n		 omit-xml-declaration=\"yes\"\r\n		 encoding=\"UTF-8\"\r\n		 indent=\"yes\" />\r\n	\r\n	<xsl:template match=\"/\">\r\n		<html>\r\n			<head>\r\n				<title>\r\n					<xsl:value-of select=\"$page-title\"/> | \r\n					<xsl:value-of select=\"$website-name\"/>\r\n				</title>\r\n			</head>\r\n			<body>\r\n				<h1><xsl:value-of select=\"$website-name\"/></h1>\r\n				<ul>\r\n					<li><a href=\"{$root}/\">Home</a></li>\r\n					<li><a href=\"{$root}/entries/\">Entries</a></li>\r\n				</ul>\r\n				<h2><xsl:value-of select=\"$page-title\"/></h2>\r\n				<xsl:choose>\r\n					<xsl:when test=\"title/@handle = $entry\">\r\n						 <xsl:for-each select=\"data/entries/entry[title/@handle = $entry]\">\r\n							<h3><xsl:value-of select=\"title\"/></h3>\r\n							<xsl:copy-of select=\"body/*\"/>\r\n						</xsl:for-each>\r\n					</xsl:when>\r\n					<xsl:otherwise>\r\n						<ul>\r\n							<xsl:for-each select=\"data/entries/entry\">\r\n								<li>\r\n									<a href=\"{$root}/{$current-page}/{title/@handle}/\">\r\n										<xsl:value-of select=\"title\"/>\r\n									</a>\r\n								</li>\r\n							</xsl:for-each>\r\n						</ul>\r\n					</xsl:otherwise>\r\n				</xsl:choose>\r\n			</body>\r\n		</html>\r\n	</xsl:template>\r\n	\r\n	</xsl:stylesheet>\r\n\r\nThere are many ways to accomplish the same thing in Symphony, but this method provides a basic structure to build on as you learn the basics about XSLT and about how to build sites with Symphony. As you learn more about data sources, you\'ll discover that it is best to keep the XML optimized and use data sources that are filtered based on page and URL parameters to display lists of entries and individual entries.\r\n\r\n#### Master Utility\r\n\r\nTo easily maintain a series of pages that use the same design template, using common HTML structures, such as the HTML head elements, header, navigation and footer, several page templates can import the same master template. In Symphony, a master template can be created as a utility by navigating to Blueprints : Components and clicking on the \"Create New\" button next to \"Utilities\". Give the utility the name \"master\" and Symphony will automatically add the extension, \".xsl\" when the utility is saved. In the body, paste the following template, which uses the `xsl:apply-templates` instruction to replace the content area of the page:\r\n\r\n	<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n	<xsl:stylesheet version=\"1.0\"\r\n		 xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n	\r\n	<xsl:output method=\"xml\"\r\n		 doctype-public=\"-//W3C//DTD XHTML 1.0 Strict//EN\"\r\n		 doctype-system=\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\r\n		 omit-xml-declaration=\"yes\"\r\n		 encoding=\"UTF-8\"\r\n		 indent=\"yes\" />\r\n	\r\n	<xsl:template match=\"/\">\r\n		<html>\r\n			<head>\r\n				<title>\r\n					<xsl:value-of select=\"$page-title\"/> | \r\n					<xsl:value-of select=\"$website-name\"/>\r\n				</title>\r\n			</head>\r\n			<body>\r\n				<h1><xsl:value-of select=\"$website-name\"/></h1>\r\n				<ul>\r\n					<li><a href=\"{$root}/\">Home</a></li>\r\n					<li><a href=\"{$root}/entries/\">Entries</a></li>\r\n				</ul>\r\n				<h2><xsl:value-of select=\"$page-title\"/></h2>\r\n				<xsl:apply-templates />\r\n			</body>\r\n		</html>\r\n	</xsl:template>\r\n	\r\n	</xsl:stylesheet>\r\n\r\n\r\n#### Import the Master\r\n\r\nA page template imports the `master.xsl` file using an `xsl:import` instruction. The `href` attribute is relative to the XSL file that imports the XSL stylesheet, which, in Symphony, is always stored in `/workspace/pages/`. Notice that, while the match template for the utility matches the root of the XML data, the match template for the page matches the data node set. With the `master.xsl` utility created, paste the following XSL stylesheet into the body of the Entries page.\r\n\r\n	<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n	<xsl:stylesheet version=\"1.0\"\r\n		 xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n	\r\n	<xsl:import href=\"../utilities/master.xsl\"/>\r\n	\r\n	<xsl:output method=\"xml\"\r\n		 doctype-public=\"-//W3C//DTD XHTML 1.0 Strict//EN\"\r\n		 doctype-system=\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\r\n		 omit-xml-declaration=\"yes\"\r\n		 encoding=\"UTF-8\"\r\n		 indent=\"yes\" />\r\n	\r\n	<xsl:template match=\"data\">\r\n		<xsl:choose>\r\n			<xsl:when test=\"$entry\">\r\n				 <xsl:for-each select=\"data/entry/entry\">\r\n					<h3><xsl:value-of select=\"title\"/></h3>\r\n					<xsl:copy-of select=\"body/*\"/>\r\n				</xsl:for-each>\r\n			</xsl:when>\r\n			<xsl:otherwise>\r\n				<ul>\r\n					<xsl:for-each select=\"data/entries/entry\">\r\n						<li>\r\n							<a href=\"{$root}/{$current-page}/{title/@handle}/\">\r\n								<xsl:value-of select=\"title\"/>\r\n							</a>\r\n						</li>\r\n					</xsl:for-each>\r\n				</ul>\r\n			</xsl:otherwise>\r\n		</xsl:choose>\r\n	</xsl:template>\r\n	\r\n	</xsl:stylesheet>\r\n\r\nSince the Entry data source performs the filtering of entries based on the value of the `$entry` URL parameter, the data source should output a single entry: the entry where the handle of the Title field matches the value of the `$entry` URL parameter. The `xsl:when` instruction tests whether the `$entry` parameter has a value. If the `$entry` parameter has a value, that is, when the URL looks something like `http://www.example.com/entries/my-entry-title/`, the template will display the detail view. If the $entry value has no value, that is, when the URL looks something like `http://www.example.com/entries/`, the template will display an overview. \r\n\r\nThis structure allows for a page template to use different data sources than other pages as a way to keep XML output optimized by including only the data necessary to build each page.\r\n\r\n#### Optimize the XML Output\r\n\r\nOptimize the XML output of the Entries data source by omitting the `body` element from the Included Elements select box under Output Options. See the effect of this change by navigating to the Entries page and adding `?debug` to the end of the URL to view the Debug page. The XML data for the Entries section will include only the Title field values.\r\n\r\n#### Learn More\r\n\r\nOnce you understand these basics about getting around in Symphony, a good place to start might be to first learn more about how to create [sections](http://www.designprojectx.com/tutorials/symphony-sections/) and [data sources](http://www.designprojectx.com/tutorials/symphony-data-sources/). Then find out more about [utilities](http://www.designprojectx.com/tutorials/symphony-utilities/) that can help to build navigation menus and other commonly used elements. If you have any questions, there are many helpful people contributing to the community on the Symphony CMS Forum, and I would be happy to respond as I am able to [questions about these tutorials](http://www.symphony-cms.com/forum/discussions/21781/) and suggestions about how they might be improved. Your feedback will help as the community works to build a library of [documentation](http://www.symphony-cms.com/documentation/) to help people learn more about Symphony.\r\n', '<h4>Install Symphony</h4>\n\n<p>Create a clean install of Symphony by omitting the workspace directory during the installation process and login to the Symphony admin area. For more information about installing Symphony, consult the <a href=\"http://symphony-cms.com/documentation/installation/\">documentation</a>.</p>\n\n<h4>Create the Entries Section</h4>\n\n<p>Create a section called &#8220;Entries&#8221; with the following configuration by navigating to Blueprints : Sections and clicking on the &#8220;Create New&#8221; button:</p>\n\n<h6>Essentials</h6>\n\n<ul>\n<li>Name: <strong>Entries</strong></li>\n</ul>\n\n<h6>Fields</h6>\n\n<ul>\n<li>Text Input\n\n<ul>\n<li>Label: <strong>Title</strong></li>\n<li>Placement: <strong>Main content</strong></li>\n<li>Validation Rule: (none)</li>\n<li>Make this a required field: <strong>yes</strong></li>\n<li>Show column: <strong>yes</strong></li>\n</ul></li>\n<li>Textarea\n\n<ul>\n<li>Label: <strong>Body</strong></li>\n<li>Placement: <strong>Main content</strong></li>\n<li>Make textarea <strong>15</strong> rows tall</li>\n<li>Make this a required field: <strong>no</strong></li>\n<li>Text Formatter: <strong>Markdown Extra plus SmartyPants</strong></li>\n<li>Show column: <strong>no</strong></li>\n</ul></li>\n</ul>\n\n<h4>Create the Data Sources</h4>\n\n<p>Create two data sources, one for the master view and one for the detail view. Navigate to Blueprints : Components and click on the &#8220;Create New&#8221; button.</p>\n\n<h5>Entries Data Source</h5>\n\n<p>The Entries data source provides an overview of the 20 most recent entries. To start with, the data source will include the &#8220;body&#8221; field. By the end of the tutorial, this data source will exclude the &#8220;body&#8221; field to keep the XML output from being unnecessarily large, since we only need enough information to display a list of titles.</p>\n\n<h6>Essentials</h6>\n\n<ul>\n<li>Name: Entries</li>\n<li>Source: Entries</li>\n</ul>\n\n<h6>Filter Results</h6>\n\n<ul>\n<li>Publish (checkbox): Value: Yes</li>\n</ul>\n\n<h6>Sorting and Limiting</h6>\n\n<ul>\n<li>Sort By: Date</li>\n<li>Sort Order: descending</li>\n<li>Show a Maximum of 20 results</li>\n<li>Show Page 1 of results</li>\n<li>Required URL Parameter: (none)</li>\n<li>Redirect to 404 page when no results are found: no</li>\n</ul>\n\n<h6>Output Options</h6>\n\n<ul>\n<li>Parameter Output: Use Field: (None)</li>\n<li>XML Output: Group By: (None)</li>\n<li>Included Elements: title, body</li>\n</ul>\n\n<h5>Entry Data Source</h5>\n\n<p>The Entry data source provides the complete XML data for a single entry: all available fields have been included. A URL parameter of &#8220;entry&#8221; has been specified for the Entries page. The Entry data source is configured to filter the XML output to include only those entries where the Title field matches the $entry parameter. Also, the data source will output XML only if the $entry parameter has a value.</p>\n\n<h6>Essentials</h6>\n\n<ul>\n<li>Name: Entry</li>\n<li>Source: Entries</li>\n</ul>\n\n<h6>Filter Results</h6>\n\n<ul>\n<li>Title (text input): Value: {$entry}</li>\n</ul>\n\n<h6>Sorting and Limiting</h6>\n\n<ul>\n<li>Sort By: System ID</li>\n<li>Sort Order: descending</li>\n<li>Show a Maximum of 20 results</li>\n<li>Show Page 1 of results</li>\n<li>Required URL Parameter: $entry</li>\n<li>Redirect to 404 page when no results are found: no</li>\n</ul>\n\n<h6>Output Options</h6>\n\n<ul>\n<li>Parameter Output: Use Field: (None)</li>\n<li>XML Output: Group By: (None)</li>\n<li>Included Elements: title, body</li>\n</ul>\n\n<h4>Page URL Handles</h4>\n\n<p>In Symphony, a URL represents the currently selected page and, if the page has been configured to use URL parameters, the values assigned to any URL parameters. For example, the home page of this site uses a page template called &#8220;Home&#8221;. To create a page template, navigate to Blueprints : Pages in the Symphony admin. When creating a page template, the URL Handle field can be left blank, but the title of the page must be defined, in this case of the home page, as &#8220;Home&#8221;. When saved, the URL handle is automatically created by taking the page title and changing any uppercase characters to lowercase, removing punctuation and replacing spaces with hyphens. The URL handle can then be used to indicate the currently selected page. The Home page has also been given the page type, &#8220;index&#8221;, so that when navigating to the root of the site, the page template that has the &#8220;index&#8221; page type will be displayed. For that reason, there can only be one page with a page type of &#8220;index&#8221;. The home page for this site can be viewed by either navigating to the root URL or by navigating to the page by its page handle, &#8220;home&#8221;: <a href=\"http://designprojectx.com/home/\">http://designprojectx.com/home/</a>. If I defined the title of the page as &#8220;My Home Page&#8221;, the URL handle would be automatically created as <code>my-home-page</code>, and my home page could be viewed by going to either of the following URLs: <code>http://designprojectx.com/</code> or <code>http://designprojectx.com/my-home-page/</code>. Alternatively, I could change the value of URL handle to <code>index</code> and the page would keep the title, &#8220;My Home Page&#8221;, but it would be accessible by navigating to <code>http://designprojectx.com/index/</code>.</p>\n\n<p>All pages other than the &#8220;index&#8221; page can be viewed only by navigating to the URL handle. If no parent page has been specified, the page URLs will have the following signature:</p>\n\n<pre><code>http://www.example.com/page-url-handle/\n</code></pre>\n\n<p>In Symphony, it is best when building URLs to include the trailing slash for all page URL handles and URL parameters to avoid a page redirect. If the trailing slash is not provided, Symphony will automatically redirect to a URL that includes a trailing slash.</p>\n\n<p>If a page is defined with a parent page, the page can be viewed only by navigating to the URL that includes the parent page handle and handle of the page itself:</p>\n\n<pre><code>http://www.example.com/parent-page-url-handle/page-url-handle/\n</code></pre>\n\n<p>First, let&#8217;s find out how we can make our page templates dynamic by using some of the default parameters.</p>\n\n<h3>Default Parameters</h3>\n\n<p>In Symphony, there is a <a href=\"http://symphony-cms.com/documentation/templating/\">list of default parameters</a> that can be used by page templates to use dynamically generated values. View these parameters by adding <code>?debug</code> to the URL of any Symphony generated page. The Debug pages can only be viewed by admin authors that are logged into Symphony.</p>\n\n<table>\n<thead>\n<tr>\n  <th>Parameter</th>\n  <th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>$today</td>\n  <td>2009-01-29 date format</td>\n</tr>\n<tr>\n  <td>$current-time</td>\n  <td>11:28 time format</td>\n</tr>\n<tr>\n  <td>$this-year</td>\n  <td>2009 format</td>\n</tr>\n<tr>\n  <td>$this-month</td>\n  <td>01 format</td>\n</tr>\n<tr>\n  <td>$this-day</td>\n  <td>29 format</td>\n</tr>\n<tr>\n  <td>$timezone</td>\n  <td>-05:00 format represents the difference between GMT and your preference setting in config.php.</td>\n</tr>\n<tr>\n  <td>$website-name</td>\n  <td>As defined in the config.php</td>\n</tr>\n<tr>\n  <td>$page-title</td>\n  <td>Page title given to the current page</td>\n</tr>\n<tr>\n  <td>$root</td>\n  <td>Root URL</td>\n</tr>\n<tr>\n  <td>$workspace</td>\n  <td>URL to the workspace folder</td>\n</tr>\n<tr>\n  <td>$root-page</td>\n  <td>Handle of root page</td>\n</tr>\n<tr>\n  <td>$current-page</td>\n  <td>Handle of current page</td>\n</tr>\n<tr>\n  <td>$current-page-id</td>\n  <td>ID of the current page</td>\n</tr>\n<tr>\n  <td>$current-path</td>\n  <td>Path of the URL is excluding root</td>\n</tr>\n<tr>\n  <td>$parent-path</td>\n  <td>Path of parent pages if they exist</td>\n</tr>\n<tr>\n  <td>$symphony-bundle</td>\n  <td>Current version of Symphony</td>\n</tr>\n<tr>\n  <td>$current-url</td>\n  <td>Current URL in its entirety</td>\n</tr>\n</tbody>\n</table>\n\n<p>View the Symphony <code>?debug</code> page to view the parameters available to a page, and to view how some of these parameters are context sensitive, changing as you navigate to different pages and URLs.</p>\n\n<h4>A Basic Page Template</h4>\n\n<p>Of the default parameters, some of the most often used are <code>$website-name</code> and <code>$page-title</code>. The following template uses these parameters to dynamically generate values for the <code>title</code> element of the HTML <code>head</code> element and for a couple headings in the <code>body</code> element of the page. Create a Home page with the following configuration:</p>\n\n<h6>URL Settings</h6>\n\n<ul>\n<li>Parent Page: /</li>\n<li>URL Handle: home</li>\n<li>URL Parameters: (none)</li>\n</ul>\n\n<h6>Page Metadata</h6>\n\n<ul>\n<li>Events: (none)</li>\n<li>Data Sources: Entries, Entry</li>\n<li>Page Type: index</li>\n</ul>\n\n<h6>Page Data</h6>\n\n<ul>\n<li>Title: Home</li>\n<li>Body: (see the page template below)</li>\n<li>Utilities: (none)</li>\n</ul>\n\n<h5>The Page Template</h5>\n\n<p>Using a couple of the default page parameters, <code>$website-name</code> and <code>$page-title</code>, add a page title to the template using some <code>xsl:value-of</code> instructions. Attribute value templates and the <code>$root</code> parameter are used to specify the root URL of the site in the <code>href</code> attribute of anchor elements to create a basic navigation menu.</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;xsl:stylesheet version=\"1.0\"\n    xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;\n\n&lt;xsl:output method=\"xml\"\n    doctype-public=\"-//W3C//DTD XHTML 1.0 Strict//EN\"\n    doctype-system=\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\n    omit-xml-declaration=\"yes\"\n    encoding=\"UTF-8\"\n    indent=\"yes\" /&gt;\n\n&lt;xsl:template match=\"/\"&gt;\n    &lt;html&gt;\n        &lt;head&gt;\n            &lt;title&gt;\n                &lt;xsl:value-of select=\"$page-title\"/&gt; | \n                &lt;xsl:value-of select=\"$website-name\"/&gt;\n            &lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n            &lt;h1&gt;&lt;xsl:value-of select=\"$website-name\"/&gt;&lt;/h1&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;a href=\"{$root}/\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=\"{$root}/entries/\"&gt;Entries&lt;/a&gt;&lt;/li&gt;\n            &lt;/ul&gt;\n            &lt;h2&gt;&lt;xsl:value-of select=\"$page-title\"/&gt;&lt;/h2&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\n&lt;/xsl:template&gt;\n\n&lt;/xsl:stylesheet&gt;\n</code></pre>\n\n<p>It is possible to create a detail view by creating one child page for every detail view. While possible, this would not be ideal. Managing several page templates would be cumbersome when the same thing could be accomplished much more elegantly using URL parameters.</p>\n\n<h3>URL Parameters</h3>\n\n<p>URL parameters are defined by page templates and are added at the bottom of the list of parameters in the <code>?debug</code> information for each page. In Symphony, these parameters and those defined by data sources and, in some cases, extensions, are called the &#8220;parameter pool&#8221;. The information provided by the <code>?debug</code> page indicates the values supplied in the URL and how each value in the URL is mapped to a parameter that can be used in page templates. As an example, a page template could have a URL parameter <code>$entry</code> defined by adding a value of <code>entry</code> in the URL Parameters field. To configure more than one URL parameter, separate the name of each parameter by a forward slash, just as if creating a URL to navigate a folder structure on a file server. For example, the URL Parameters field can be defined as <code>a/b/c/d/e</code> and the page template would add the following parameters to the parameter pool:</p>\n\n<ul>\n<li>$a</li>\n<li>$b</li>\n<li>$c</li>\n<li>$d</li>\n<li>$e</li>\n</ul>\n\n<p>As far as I can recall, there has never been a stated limit to the number of URL parameters that can be used, but reason dictates that you should use the least number of parameters possible to build the pages views required by your site development objectives. As with any XSL parameter, be sure not to start the name of any URL parameter with a number, as this would result in an XSL processing error.</p>\n\n<h4>XSL Conditionals</h4>\n\n<p>XSLT provides a number of methods to control output to the result document by testing for certain conditions. The <code>xsl:if</code> and <code>xsl:choose</code> instructions will control output based on the evaluation of a <code>test</code> attribute. Another method is to use predicates in an XPath expression, for example, when using an <code>xsl:for-each</code> instruction to select an XML node set that meets specific conditions.</p>\n\n<p>The following example uses <code>xsl:if</code> instructions.</p>\n\n<pre><code>&lt;xsl:if test=\"$entry and $entry = \'my-first-entry\'\"&gt;\n    &lt;!-- display My First Entry --&gt;\n&lt;/xsl:if&gt;\n&lt;xsl:if test=\"$entry = \'\'\"&gt;\n    &lt;!-- display a list of entries --&gt;\n&lt;/xsl:otherwise&gt;\n</code></pre>\n\n<p>This example uses <code>xsl:choose</code>, <code>xsl:when</code> and <code>xsl:otherwise</code> instructions.</p>\n\n<pre><code>&lt;xsl:choose&gt;\n    &lt;xsl:when test=\"$entry = \'my-first-entry\'\"&gt;\n        &lt;!-- display My First Entry --&gt;\n    &lt;/xsl:when&gt;\n    &lt;xsl:otherwise&gt;\n        &lt;!-- display a list of entries --&gt;\n    &lt;/xsl:otherwise&gt;\n&lt;/xsl:choose&gt;\n</code></pre>\n\n<p>This last example uses an XPath predicate (the condition expressed inside the square brackets] to control the output. In this case, a predicate cannot be used to prevent the output of the list of entries, so a conditional instruction must be added so that the list will display only when an individual entry has not been selected.</p>\n\n<pre><code>&lt;xsl:for-each select=\"/data/entries/entry[title/@handle = $entry]\"&gt;\n    &lt;!-- display My First Entry --&gt;\n&lt;/xsl:for-each&gt;\n&lt;xsl:if test=\"$entry = \'\'\"&gt;\n    &lt;xsl:for-each select=\"/data/entries/entry\"&gt;\n        &lt;!-- display a list of entries --&gt;\n    &lt;/xsl:for-each&gt;\n&lt;/xsl:if&gt;\n</code></pre>\n\n<h4>A Page Template to Display List and Detail Views</h4>\n\n<p>By using XSL conditional instructions, we can control the information that is displayed, depending on the currently selected URL. So, rather than creating a new page to display each individual entry, we need only a single page template to display multiple views of the same data in Symphony. For greater flexibility, it is best to use the <code>xsl:choose</code> instruction. Create the Entries page with the following configuration (notice that a URL parameter of <code>entry</code> has been included):</p>\n\n<h6>URL Settings</h6>\n\n<ul>\n<li>Parent Page: /</li>\n<li>URL Handle: entries</li>\n<li>URL Parameters: entry</li>\n</ul>\n\n<h6>Page Metadata</h6>\n\n<ul>\n<li>Events: (none)</li>\n<li>Data Sources: Entries, Entry</li>\n<li>Page Type: (none)</li>\n</ul>\n\n<h6>Page Data</h6>\n\n<ul>\n<li>Title: Entries</li>\n<li>Body: (see the page template below)</li>\n<li>Utilities: (none)</li>\n</ul>\n\n<h5>The Page Template</h5>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;xsl:stylesheet version=\"1.0\"\n     xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;\n\n&lt;xsl:output method=\"xml\"\n     doctype-public=\"-//W3C//DTD XHTML 1.0 Strict//EN\"\n     doctype-system=\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\n     omit-xml-declaration=\"yes\"\n     encoding=\"UTF-8\"\n     indent=\"yes\" /&gt;\n\n&lt;xsl:template match=\"/\"&gt;\n    &lt;html&gt;\n        &lt;head&gt;\n            &lt;title&gt;\n                &lt;xsl:value-of select=\"$page-title\"/&gt; | \n                &lt;xsl:value-of select=\"$website-name\"/&gt;\n            &lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n            &lt;h1&gt;&lt;xsl:value-of select=\"$website-name\"/&gt;&lt;/h1&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;a href=\"{$root}/\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=\"{$root}/entries/\"&gt;Entries&lt;/a&gt;&lt;/li&gt;\n            &lt;/ul&gt;\n            &lt;h2&gt;&lt;xsl:value-of select=\"$page-title\"/&gt;&lt;/h2&gt;\n            &lt;xsl:choose&gt;\n                &lt;xsl:when test=\"title/@handle = $entry\"&gt;\n                     &lt;xsl:for-each select=\"data/entries/entry[title/@handle = $entry]\"&gt;\n                        &lt;h3&gt;&lt;xsl:value-of select=\"title\"/&gt;&lt;/h3&gt;\n                        &lt;xsl:copy-of select=\"body/*\"/&gt;\n                    &lt;/xsl:for-each&gt;\n                &lt;/xsl:when&gt;\n                &lt;xsl:otherwise&gt;\n                    &lt;ul&gt;\n                        &lt;xsl:for-each select=\"data/entries/entry\"&gt;\n                            &lt;li&gt;\n                                &lt;a href=\"{$root}/{$current-page}/{title/@handle}/\"&gt;\n                                    &lt;xsl:value-of select=\"title\"/&gt;\n                                &lt;/a&gt;\n                            &lt;/li&gt;\n                        &lt;/xsl:for-each&gt;\n                    &lt;/ul&gt;\n                &lt;/xsl:otherwise&gt;\n            &lt;/xsl:choose&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\n&lt;/xsl:template&gt;\n\n&lt;/xsl:stylesheet&gt;\n</code></pre>\n\n<p>There are many ways to accomplish the same thing in Symphony, but this method provides a basic structure to build on as you learn the basics about XSLT and about how to build sites with Symphony. As you learn more about data sources, you&#8217;ll discover that it is best to keep the XML optimized and use data sources that are filtered based on page and URL parameters to display lists of entries and individual entries.</p>\n\n<h4>Master Utility</h4>\n\n<p>To easily maintain a series of pages that use the same design template, using common HTML structures, such as the HTML head elements, header, navigation and footer, several page templates can import the same master template. In Symphony, a master template can be created as a utility by navigating to Blueprints : Components and clicking on the &#8220;Create New&#8221; button next to &#8220;Utilities&#8221;. Give the utility the name &#8220;master&#8221; and Symphony will automatically add the extension, &#8220;.xsl&#8221; when the utility is saved. In the body, paste the following template, which uses the <code>xsl:apply-templates</code> instruction to replace the content area of the page:</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;xsl:stylesheet version=\"1.0\"\n     xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;\n\n&lt;xsl:output method=\"xml\"\n     doctype-public=\"-//W3C//DTD XHTML 1.0 Strict//EN\"\n     doctype-system=\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\n     omit-xml-declaration=\"yes\"\n     encoding=\"UTF-8\"\n     indent=\"yes\" /&gt;\n\n&lt;xsl:template match=\"/\"&gt;\n    &lt;html&gt;\n        &lt;head&gt;\n            &lt;title&gt;\n                &lt;xsl:value-of select=\"$page-title\"/&gt; | \n                &lt;xsl:value-of select=\"$website-name\"/&gt;\n            &lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n            &lt;h1&gt;&lt;xsl:value-of select=\"$website-name\"/&gt;&lt;/h1&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;a href=\"{$root}/\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=\"{$root}/entries/\"&gt;Entries&lt;/a&gt;&lt;/li&gt;\n            &lt;/ul&gt;\n            &lt;h2&gt;&lt;xsl:value-of select=\"$page-title\"/&gt;&lt;/h2&gt;\n            &lt;xsl:apply-templates /&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\n&lt;/xsl:template&gt;\n\n&lt;/xsl:stylesheet&gt;\n</code></pre>\n\n<h4>Import the Master</h4>\n\n<p>A page template imports the <code>master.xsl</code> file using an <code>xsl:import</code> instruction. The <code>href</code> attribute is relative to the XSL file that imports the XSL stylesheet, which, in Symphony, is always stored in <code>/workspace/pages/</code>. Notice that, while the match template for the utility matches the root of the XML data, the match template for the page matches the data node set. With the <code>master.xsl</code> utility created, paste the following XSL stylesheet into the body of the Entries page.</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;xsl:stylesheet version=\"1.0\"\n     xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;\n\n&lt;xsl:import href=\"../utilities/master.xsl\"/&gt;\n\n&lt;xsl:output method=\"xml\"\n     doctype-public=\"-//W3C//DTD XHTML 1.0 Strict//EN\"\n     doctype-system=\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\n     omit-xml-declaration=\"yes\"\n     encoding=\"UTF-8\"\n     indent=\"yes\" /&gt;\n\n&lt;xsl:template match=\"data\"&gt;\n    &lt;xsl:choose&gt;\n        &lt;xsl:when test=\"$entry\"&gt;\n             &lt;xsl:for-each select=\"data/entry/entry\"&gt;\n                &lt;h3&gt;&lt;xsl:value-of select=\"title\"/&gt;&lt;/h3&gt;\n                &lt;xsl:copy-of select=\"body/*\"/&gt;\n            &lt;/xsl:for-each&gt;\n        &lt;/xsl:when&gt;\n        &lt;xsl:otherwise&gt;\n            &lt;ul&gt;\n                &lt;xsl:for-each select=\"data/entries/entry\"&gt;\n                    &lt;li&gt;\n                        &lt;a href=\"{$root}/{$current-page}/{title/@handle}/\"&gt;\n                            &lt;xsl:value-of select=\"title\"/&gt;\n                        &lt;/a&gt;\n                    &lt;/li&gt;\n                &lt;/xsl:for-each&gt;\n            &lt;/ul&gt;\n        &lt;/xsl:otherwise&gt;\n    &lt;/xsl:choose&gt;\n&lt;/xsl:template&gt;\n\n&lt;/xsl:stylesheet&gt;\n</code></pre>\n\n<p>Since the Entry data source performs the filtering of entries based on the value of the <code>$entry</code> URL parameter, the data source should output a single entry: the entry where the handle of the Title field matches the value of the <code>$entry</code> URL parameter. The <code>xsl:when</code> instruction tests whether the <code>$entry</code> parameter has a value. If the <code>$entry</code> parameter has a value, that is, when the URL looks something like <code>http://www.example.com/entries/my-entry-title/</code>, the template will display the detail view. If the $entry value has no value, that is, when the URL looks something like <code>http://www.example.com/entries/</code>, the template will display an overview.</p>\n\n<p>This structure allows for a page template to use different data sources than other pages as a way to keep XML output optimized by including only the data necessary to build each page.</p>\n\n<h4>Optimize the XML Output</h4>\n\n<p>Optimize the XML output of the Entries data source by omitting the <code>body</code> element from the Included Elements select box under Output Options. See the effect of this change by navigating to the Entries page and adding <code>?debug</code> to the end of the URL to view the Debug page. The XML data for the Entries section will include only the Title field values.</p>\n\n<h4>Learn More</h4>\n\n<p>Once you understand these basics about getting around in Symphony, a good place to start might be to first learn more about how to create <a href=\"http://www.designprojectx.com/tutorials/symphony-sections/\">sections</a> and <a href=\"http://www.designprojectx.com/tutorials/symphony-data-sources/\">data sources</a>. Then find out more about <a href=\"http://www.designprojectx.com/tutorials/symphony-utilities/\">utilities</a> that can help to build navigation menus and other commonly used elements. If you have any questions, there are many helpful people contributing to the community on the Symphony CMS Forum, and I would be happy to respond as I am able to <a href=\"http://www.symphony-cms.com/forum/discussions/21781/\">questions about these tutorials</a> and suggestions about how they might be improved. Your feedback will help as the community works to build a library of <a href=\"http://www.symphony-cms.com/documentation/\">documentation</a> to help people learn more about Symphony.</p>\n');
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (314, 53, '#### Domain Registration and DNS\r\n\r\nFirst, I registered the domain name, [fluidgrids.com](http://fluidgrids.com/), and configured the domain name to point to the following DNS servers:\r\n\r\n* dns1.joyentdns.com\r\n* dns2.joyentdns.com\r\n* dns3.joyentdns.com\r\n* dns4.joyentdns.com\r\n\r\n#### Server Configuration\r\n\r\nThen, I set up a virtual server on a Joyent Shared Accelerator account. I logged into Virtualmin and enabled the following features for the virtual server:\r\n\r\n* Web virtual server\r\n* MySQL login\r\n* PowerDNS domain\r\n\r\n##### PHP Configuration\r\n\r\nTo fulfill the minimum requirements to install Symphony on a Joyent Shared Accelerator, I needed to create a MySQL database and modify the php.ini file for PHP5. I was able to accomplish both through the Virtualmin interface. For PHP configuration, I needed to enable the following extensions:\r\n\r\n* extension=dom.so\r\n* extension=xsl.so\r\n* extension=zip.so\r\n\r\n#### Create a GitHub Repository\r\n\r\nI created a repository called [sym-fluidgrids](http://github.com/bauhouse/sym-fluidgrids/) on GitHub to manage version control for the project.\r\n\r\nTo create the local repository, I opened up Coda (or I could have just logged into Terminal on my Mac) and entered the following commands. First, I changed the working directory to the directory that contains all my GitHub repositories: \r\n\r\n	cd ~/Work/github/bauhouse\r\n\r\nThen, I created a directory with the same name as my GitHub repository:\r\n\r\n	mkdir sym-fluidgrids\r\n\r\nI changed directories, moving into the directory I just created:\r\n	\r\n	cd sym-fluidgrids\r\n\r\nI initialized the local Git repository:\r\n\r\n	git init\r\n\r\nI created the first file, a README file:\r\n\r\n	touch README\r\n\r\nI added the README file to the staging area for files that are ready to be committed to the repository:\r\n\r\n	git add README\r\n\r\nThen, I committed the new file to the local repository:\r\n\r\n	git commit -m \'first commit\'\r\n\r\nTo sync the GitHub repository with my local Git repository, I need to first add the location of the remote repository:\r\n\r\n	git remote add origin git@github.com:bauhouse/sym-fluidgrids.git\r\n\r\nFinally, I push my local changes to the master branch of the remote repository, specifying the location I just added, called \"origin\":\r\n\r\n	git push origin master\r\n\r\nThat\'s it. I\'ve just created a GitHub repository with a blank README file. The commit is identified with a hash, [090b993c3825da1df3d4121ee8902882b24495ff](http://github.com/bauhouse/sym-fluidgrids/commit/090b993c3825da1df3d4121ee8902882b24495ff), a unique 32-character string that will represent a snapshot of the state of the code at the time the file was committed to the repository.\r\n\r\n\r\n##### Add Files to Staging\r\n\r\nNow, I just need to add, edit and/or remove files and directories, commit the changes to the local repository, and push the changes up to GitHub. I\'ll start by adding some content to the README file, then I can check the status of the local repository:\r\n\r\n	git status\r\n\r\nGit will indicate that the README file has been modified. I can add this to the list of files in the staging area, ready to be committed:\r\n\r\n	git add .\r\n\r\nUsing the dot in the add command will add all the files in the current directory and will also recursively select all files in child and descendant directories. In this case, a single file will be selected: README.\r\n\r\nI\'m not quite ready to commit yet, as I would like to start by adding a `.gitignore` file and include the offical download of [Symphony CMS 2.0.2](http://symphony-cms.com/). The `.gitignore` file tells Git which files to ignore when staging files to be committed. There\'s no point in saving the hidden files that store preferences for the Mac Finder, so I can create a file called `.gitignore` with the following contents:\r\n\r\n	*.DS_Store\r\n\r\nThe star (`*`) is a wildcard character, so this tells Git to ignore any files called `.DS_Store` in all directories and subdirectories. Now, these files will never be committed to the repositories.\r\n\r\nNext, I copy all the files from the official download of Symphony, except for the README file. Rather than overwrite the file I just modified, I\'ll update it with the installation instructions from the Symphony download. Then, I\'m ready to add some more files to staging.\r\n\r\n	git add .\r\n\r\nI can check the status of my repo to see the list of files that have been added to staging:\r\n\r\n	git status\r\n\r\n##### Committing and Pushing Changes to GitHub \r\n\r\nEverything is ready to commit the install files for Symphony. Using the `-m` flag allows me to use a single command to [commit and add a message to accompany to describe the changes](http://github.com/bauhouse/sym-fluidgrids/commits/).\r\n\r\n	git commit -m \"Add .gitignore, update README, and include Symphony CMS 2.0.2 official \r\ndownload files\"\r\n\r\nAlternatively, if I want to include a longer description with the commit, I can omit the `-m` flag, and Git will launch the default text editor to compose the description. Once committed, I can push these changes to GitHub:\r\n\r\n	git push origin master\r\n\r\n##### Removing Files \r\n\r\nI\'m thinking that I will start with a clean install of Symphony, so I should remove the workspace directory. I can do this with a Git command with the `-r` flag to tell Git to remove files recursively:\r\n\r\n	git rm -r workspace\r\n\r\nI can then check the status of the repository:\r\n\r\n	git status\r\n\r\nAnd Git returns a list of the files that are staged for deleting from the repository. Since they were included in the repository in the last commit, I can recall those files back into the repository at a later time, if I so choose. I am ready to commit again and [push the changes to GitHub](http://github.com/bauhouse/sym-fluidgrids/commit/4ea7c96579b7699d8225d97eb0ee8e62f5e7e79d):\r\n\r\n	git commit -m \"Remove workspace to create a clean install of Symphony\"\r\n	git push origin master\r\n	\r\n#### Symphony on GitHub\r\n\r\nThat\'s a very basic introduction to working with Git. Next, I\'ll be discovering how best to manage changes to the Symphony workspace and database. For more information on [using or contributing to Symphony 2.0 on GitHub](http://symphony-cms.com/forum/discussions/495/), refer to the thread on the Symphony CMS forum regarding GitHub or consult the documentation on [installing from the GitHub repository](http://symphony-cms.com/documentation/installation/).\r\n', '<h4>Domain Registration and DNS</h4>\n\n<p>First, I registered the domain name, <a href=\"http://fluidgrids.com/\">fluidgrids.com</a>, and configured the domain name to point to the following DNS servers:</p>\n\n<ul>\n<li>dns1.joyentdns.com</li>\n<li>dns2.joyentdns.com</li>\n<li>dns3.joyentdns.com</li>\n<li>dns4.joyentdns.com</li>\n</ul>\n\n<h4>Server Configuration</h4>\n\n<p>Then, I set up a virtual server on a Joyent Shared Accelerator account. I logged into Virtualmin and enabled the following features for the virtual server:</p>\n\n<ul>\n<li>Web virtual server</li>\n<li>MySQL login</li>\n<li>PowerDNS domain</li>\n</ul>\n\n<h5>PHP Configuration</h5>\n\n<p>To fulfill the minimum requirements to install Symphony on a Joyent Shared Accelerator, I needed to create a MySQL database and modify the php.ini file for PHP5. I was able to accomplish both through the Virtualmin interface. For PHP configuration, I needed to enable the following extensions:</p>\n\n<ul>\n<li>extension=dom.so</li>\n<li>extension=xsl.so</li>\n<li>extension=zip.so</li>\n</ul>\n\n<h4>Create a GitHub Repository</h4>\n\n<p>I created a repository called <a href=\"http://github.com/bauhouse/sym-fluidgrids/\">sym-fluidgrids</a> on GitHub to manage version control for the project.</p>\n\n<p>To create the local repository, I opened up Coda (or I could have just logged into Terminal on my Mac) and entered the following commands. First, I changed the working directory to the directory that contains all my GitHub repositories:</p>\n\n<pre><code>cd ~/Work/github/bauhouse\n</code></pre>\n\n<p>Then, I created a directory with the same name as my GitHub repository:</p>\n\n<pre><code>mkdir sym-fluidgrids\n</code></pre>\n\n<p>I changed directories, moving into the directory I just created:</p>\n\n<pre><code>cd sym-fluidgrids\n</code></pre>\n\n<p>I initialized the local Git repository:</p>\n\n<pre><code>git init\n</code></pre>\n\n<p>I created the first file, a README file:</p>\n\n<pre><code>touch README\n</code></pre>\n\n<p>I added the README file to the staging area for files that are ready to be committed to the repository:</p>\n\n<pre><code>git add README\n</code></pre>\n\n<p>Then, I committed the new file to the local repository:</p>\n\n<pre><code>git commit -m \'first commit\'\n</code></pre>\n\n<p>To sync the GitHub repository with my local Git repository, I need to first add the location of the remote repository:</p>\n\n<pre><code>git remote add origin git@github.com:bauhouse/sym-fluidgrids.git\n</code></pre>\n\n<p>Finally, I push my local changes to the master branch of the remote repository, specifying the location I just added, called &#8220;origin&#8221;:</p>\n\n<pre><code>git push origin master\n</code></pre>\n\n<p>That&#8217;s it. I&#8217;ve just created a GitHub repository with a blank README file. The commit is identified with a hash, <a href=\"http://github.com/bauhouse/sym-fluidgrids/commit/090b993c3825da1df3d4121ee8902882b24495ff\">090b993c3825da1df3d4121ee8902882b24495ff</a>, a unique 32-character string that will represent a snapshot of the state of the code at the time the file was committed to the repository.</p>\n\n<h5>Add Files to Staging</h5>\n\n<p>Now, I just need to add, edit and/or remove files and directories, commit the changes to the local repository, and push the changes up to GitHub. I&#8217;ll start by adding some content to the README file, then I can check the status of the local repository:</p>\n\n<pre><code>git status\n</code></pre>\n\n<p>Git will indicate that the README file has been modified. I can add this to the list of files in the staging area, ready to be committed:</p>\n\n<pre><code>git add .\n</code></pre>\n\n<p>Using the dot in the add command will add all the files in the current directory and will also recursively select all files in child and descendant directories. In this case, a single file will be selected: README.</p>\n\n<p>I&#8217;m not quite ready to commit yet, as I would like to start by adding a <code>.gitignore</code> file and include the offical download of <a href=\"http://symphony-cms.com/\">Symphony CMS 2.0.2</a>. The <code>.gitignore</code> file tells Git which files to ignore when staging files to be committed. There&#8217;s no point in saving the hidden files that store preferences for the Mac Finder, so I can create a file called <code>.gitignore</code> with the following contents:</p>\n\n<pre><code>*.DS_Store\n</code></pre>\n\n<p>The star (<code>*</code>) is a wildcard character, so this tells Git to ignore any files called <code>.DS_Store</code> in all directories and subdirectories. Now, these files will never be committed to the repositories.</p>\n\n<p>Next, I copy all the files from the official download of Symphony, except for the README file. Rather than overwrite the file I just modified, I&#8217;ll update it with the installation instructions from the Symphony download. Then, I&#8217;m ready to add some more files to staging.</p>\n\n<pre><code>git add .\n</code></pre>\n\n<p>I can check the status of my repo to see the list of files that have been added to staging:</p>\n\n<pre><code>git status\n</code></pre>\n\n<h5>Committing and Pushing Changes to GitHub</h5>\n\n<p>Everything is ready to commit the install files for Symphony. Using the <code>-m</code> flag allows me to use a single command to <a href=\"http://github.com/bauhouse/sym-fluidgrids/commits/\">commit and add a message to accompany to describe the changes</a>.</p>\n\n<pre><code>git commit -m \"Add .gitignore, update README, and include Symphony CMS 2.0.2 official\n</code></pre>\n\n<p>download files&#8221;</p>\n\n<p>Alternatively, if I want to include a longer description with the commit, I can omit the <code>-m</code> flag, and Git will launch the default text editor to compose the description. Once committed, I can push these changes to GitHub:</p>\n\n<pre><code>git push origin master\n</code></pre>\n\n<h5>Removing Files</h5>\n\n<p>I&#8217;m thinking that I will start with a clean install of Symphony, so I should remove the workspace directory. I can do this with a Git command with the <code>-r</code> flag to tell Git to remove files recursively:</p>\n\n<pre><code>git rm -r workspace\n</code></pre>\n\n<p>I can then check the status of the repository:</p>\n\n<pre><code>git status\n</code></pre>\n\n<p>And Git returns a list of the files that are staged for deleting from the repository. Since they were included in the repository in the last commit, I can recall those files back into the repository at a later time, if I so choose. I am ready to commit again and <a href=\"http://github.com/bauhouse/sym-fluidgrids/commit/4ea7c96579b7699d8225d97eb0ee8e62f5e7e79d\">push the changes to GitHub</a>:</p>\n\n<pre><code>git commit -m \"Remove workspace to create a clean install of Symphony\"\ngit push origin master\n</code></pre>\n\n<h4>Symphony on GitHub</h4>\n\n<p>That&#8217;s a very basic introduction to working with Git. Next, I&#8217;ll be discovering how best to manage changes to the Symphony workspace and database. For more information on <a href=\"http://symphony-cms.com/forum/discussions/495/\">using or contributing to Symphony 2.0 on GitHub</a>, refer to the thread on the Symphony CMS forum regarding GitHub or consult the documentation on <a href=\"http://symphony-cms.com/documentation/installation/\">installing from the GitHub repository</a>.</p>\n');
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (313, 54, 'The default Symphony .htaccess file for the root directory of the site looks like this:\r\n		\r\n	### Symphony 2.0 - Do not edit ###\r\n	\r\n	<IfModule mod_rewrite.c>\r\n		RewriteEngine on\r\n		RewriteBase /\r\n	\r\n		### DO NOT APPLY RULES WHEN REQUESTING \"favicon.ico\"\r\n		RewriteCond %{REQUEST_FILENAME} favicon.ico [NC]\r\n		RewriteRule .* - [S=14] \r\n	\r\n		### IMAGE RULES	\r\n		RewriteRule ^image\\/(.+\\.(jpg|gif|jpeg|png|bmp))$ /extensions/jit_image_manipulation/lib/image.php?param=$1 [L,NC]\r\n	\r\n		### CHECK FOR TRAILING SLASH - Will ignore files\r\n		RewriteCond %{REQUEST_FILENAME} !-f\r\n		RewriteCond %{REQUEST_URI} !/$\r\n		RewriteCond %{REQUEST_URI} !(.*)/$\r\n		RewriteRule ^(.*)$ /$1/ [L,R=301]\r\n	\r\n		### MAIN REWRITE - This will ignore directories\r\n		RewriteCond %{REQUEST_FILENAME} !-d\r\n		RewriteRule ^(.*)\\/$ /index.php?page=$1&%{QUERY_STRING}	[L]\r\n	\r\n	</IfModule>\r\n	\r\n	DirectoryIndex index.php\r\n	\r\n	<IfModule mod_autoindex.c>\r\n	    IndexIgnore *\r\n	</IfModule>\r\n	\r\n	######		\r\n	\r\nThis file helps control the page redirects for Symphony. I tend to ignore the instruction not to edit this file, primarily because I want to be able to access HTML files in subdirectories by navigating to the folder that contains an `index.html` file. The `DirectoryIndex` Apache configuration directive includes only `index.php` files, so trying to navigate to an `index.html` file by navigating to the parent directory will result in a \"404 Page Not Found\" error. To solve this issue, simply modify the .htaccess file to look for `index.html` files as well: \r\n\r\n	DirectoryIndex index.php index.html\r\n\r\nNow, if you wanted to set up a temporary page, create an `index.html` file and place it at the root of the site. Then, tell Apache to look for the HTML file first by changing the order of the list of directory index files to look for. If one of these types of files is not available, Apache will fall back to the next available file type.\r\n\r\n	DirectoryIndex index.html index.php\r\n\r\nThis is a sort of pseudo maintenance mode. All other Symphony pages will still be accessible, so it\'s not quite the same as putting the site into maintenance mode with the [Maintenance Mode extension](http://github.com/pointybeard/maintenance_mode/).\r\n\r\n#### Pseudo Maintenance Mode with the Login Event\r\n\r\nThe default install of Symphony comes with a Login event. By attaching this event to all pages, access to these pages can be prevented for everyone except authenticated admin users, whether authors or developers, by using some XSLT logic. If you have only one (or just a few) master templates, you may use an XSL choose statement there.\r\n\r\nIn a Symphony default installation you may replace\r\n\r\n	<xsl:apply-templates/>\r\n\r\nin your `master.xsl` file with\r\n\r\n	<xsl:choose>\r\n		<xsl:when test=\"$is-logged-in = \'true\'\">\r\n			<xsl:apply-templates/>\r\n		</xsl:when>\r\n		<xsl:otherwise>\r\n			<p>Sorry. we\'re closed.</p>\r\n		</xsl:otherwise>\r\n	</xsl:choose>\r\n\r\nand you will be fine. (Thanks to [michael-e](http://symphony-cms.com/members/michael-e/) for this tip.)\r\n\r\n', '<p>The default Symphony .htaccess file for the root directory of the site looks like this:</p>\n\n<pre><code>### Symphony 2.0 - Do not edit ###\n\n&lt;IfModule mod_rewrite.c&gt;\n    RewriteEngine on\n    RewriteBase /\n\n    ### DO NOT APPLY RULES WHEN REQUESTING \"favicon.ico\"\n    RewriteCond %{REQUEST_FILENAME} favicon.ico [NC]\n    RewriteRule .* - [S=14] \n\n    ### IMAGE RULES \n    RewriteRule ^image/(.+.(jpg|gif|jpeg|png|bmp))$ /extensions/jit_image_manipulation/lib/image.php?param=$1 [L,NC]\n\n    ### CHECK FOR TRAILING SLASH - Will ignore files\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteCond %{REQUEST_URI} !/$\n    RewriteCond %{REQUEST_URI} !(.*)/$\n    RewriteRule ^(.*)$ /$1/ [L,R=301]\n\n    ### MAIN REWRITE - This will ignore directories\n    RewriteCond %{REQUEST_FILENAME} !-d\n    RewriteRule ^(.*)/$ /index.php?page=$1&amp;%{QUERY_STRING} [L]\n\n&lt;/IfModule&gt;\n\nDirectoryIndex index.php\n\n&lt;IfModule mod_autoindex.c&gt;\n    IndexIgnore *\n&lt;/IfModule&gt;\n\n######\n</code></pre>\n\n<p>This file helps control the page redirects for Symphony. I tend to ignore the instruction not to edit this file, primarily because I want to be able to access HTML files in subdirectories by navigating to the folder that contains an <code>index.html</code> file. The <code>DirectoryIndex</code> Apache configuration directive includes only <code>index.php</code> files, so trying to navigate to an <code>index.html</code> file by navigating to the parent directory will result in a &#8220;404 Page Not Found&#8221; error. To solve this issue, simply modify the .htaccess file to look for <code>index.html</code> files as well:</p>\n\n<pre><code>DirectoryIndex index.php index.html\n</code></pre>\n\n<p>Now, if you wanted to set up a temporary page, create an <code>index.html</code> file and place it at the root of the site. Then, tell Apache to look for the HTML file first by changing the order of the list of directory index files to look for. If one of these types of files is not available, Apache will fall back to the next available file type.</p>\n\n<pre><code>DirectoryIndex index.html index.php\n</code></pre>\n\n<p>This is a sort of pseudo maintenance mode. All other Symphony pages will still be accessible, so it&#8217;s not quite the same as putting the site into maintenance mode with the <a href=\"http://github.com/pointybeard/maintenance_mode/\">Maintenance Mode extension</a>.</p>\n\n<h4>Pseudo Maintenance Mode with the Login Event</h4>\n\n<p>The default install of Symphony comes with a Login event. By attaching this event to all pages, access to these pages can be prevented for everyone except authenticated admin users, whether authors or developers, by using some XSLT logic. If you have only one (or just a few) master templates, you may use an XSL choose statement there.</p>\n\n<p>In a Symphony default installation you may replace</p>\n\n<pre><code>&lt;xsl:apply-templates/&gt;\n</code></pre>\n\n<p>in your <code>master.xsl</code> file with</p>\n\n<pre><code>&lt;xsl:choose&gt;\n    &lt;xsl:when test=\"$is-logged-in = \'true\'\"&gt;\n        &lt;xsl:apply-templates/&gt;\n    &lt;/xsl:when&gt;\n    &lt;xsl:otherwise&gt;\n        &lt;p&gt;Sorry. we\'re closed.&lt;/p&gt;\n    &lt;/xsl:otherwise&gt;\n&lt;/xsl:choose&gt;\n</code></pre>\n\n<p>and you will be fine. (Thanks to <a href=\"http://symphony-cms.com/members/michael-e/\">michael-e</a> for this tip.)</p>\n');
INSERT INTO `tbl_entries_data_21` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (328, 55, '### Install Symphony from GitHub\r\n\r\nOn my Mac, I open a Terminal window and issue the following commands:\r\n\r\n	cd Sites/sym\r\n	git clone git://github.com/symphony/symphony-2.git\r\n	mv symphony-2 site\r\n	cd site\r\n	git submodule init\r\n	git submodule update\r\n	chmod 777 . symphony\r\n\r\nI have a virtual host set up for my Sites directory so that instead of find the Sites directory here:\r\n\r\n	http://localhost/~stephen/\r\n\r\nI can find it here:\r\n\r\n	http://home/\r\n\r\nI create a MySQL database called `tbl_site` and install by navigating to:\r\n\r\n	http://home/sym/site/\r\n\r\nI add my server configuration and user settings and Symphony is installed.\r\n\r\n### Set Up the GitHub Repository\r\n\r\nI create a new repository on GitHub called `sym-site`. Since I have cloned my local repository from the official Symphony `symphony-2` repository on GitHub, my local repository has the following configuration in `~/Sites/sym/site/.git/config`:\r\n\r\n	[core]\r\n		repositoryformatversion = 0\r\n		filemode = true\r\n		bare = false\r\n		logallrefupdates = true\r\n	[remote \"origin\"]\r\n		url = git://github.com/symphony/symphony-2.git\r\n		fetch = +refs/heads/*:refs/remotes/origin/*\r\n	[branch \"master\"]\r\n		remote = origin\r\n		merge = refs/heads/master\r\n	[submodule \"extensions/debugdevkit\"]\r\n		url = git://github.com/symphony/debugdevkit.git\r\n	[submodule \"extensions/export_ensemble\"]\r\n		url = git://github.com/pointybeard/export_ensemble.git\r\n	[submodule \"extensions/jit_image_manipulation\"]\r\n		url = git://github.com/pointybeard/jit_image_manipulation.git\r\n	[submodule \"extensions/maintenance_mode\"]\r\n		url = git://github.com/pointybeard/maintenance_mode.git\r\n	[submodule \"extensions/markdown\"]\r\n		url = git://github.com/pointybeard/markdown.git\r\n	[submodule \"extensions/profiledevkit\"]\r\n		url = git://github.com/symphony/profiledevkit.git\r\n	[submodule \"extensions/selectbox_link_field\"]\r\n		url = git://github.com/pointybeard/selectbox_link_field.git\r\n\r\nI manually modify the file to point to my new repository on GitHub:\r\n\r\n	[remote \"origin\"]\r\n		url = git@github.com:bauhouse/sym-site.git\r\n		fetch = +refs/heads/*:refs/remotes/origin/*\r\n\r\nThen, I push the repository to GitHub:\r\n\r\n	git push origin master\r\n\r\n### Install Symphony Extensions from GitHub\r\n\r\nThe first step is to add some extensions. I\'ll do this by adding submodules with Git:\r\n\r\n	git submodule add git://github.com/rowan-lewis/activitylog.git extensions/activitylog\r\n	git submodule add git://github.com/pointybeard/asdc.git extensions/asdc\r\n	git submodule add git://github.com/pointybeard/content_type_mappings.git extensions/content_type_mappings\r\n	git submodule add git://github.com/yourheropaul/databasemanipulator.git extensions/databasemanipulator\r\n	git submodule add git://github.com/makenosound/dynamic_event_redirect.git extensions/dynamic_event_redirect\r\n	git submodule add git://github.com/czheng/enhancedtaglist.git extensions/enhancedtaglist\r\n	git submodule add git://github.com/nickdunn/entity_diagram.git extensions/entity_diagram\r\n	git submodule add git://github.com/yourheropaul/eventex.git extensions/eventex\r\n	git submodule add git://github.com/carsten/globalparamloader.git extensions/globalparamloader\r\n	git submodule add git://github.com/rowan-lewis/globalresourceloader.git extensions/globalresourceloader\r\n	git submodule add git://github.com/ahwayakchih/markitup.git extensions/markitup\r\n	git submodule add git://github.com/Demwunz/multiselect_to_checkboxes.git extensions/multiselect_to_checkboxes\r\n	git submodule add git://github.com/pointybeard/numberfield.git extensions/numberfield\r\n	git submodule add git://github.com/nickdunn/order_entries.git extensions/order_entries\r\n	git submodule add git://github.com/pointybeard/pagesfield.git extensions/pagesfield\r\n	git submodule add git://github.com/nickdunn/publishfiltering.git extensions/publishfiltering\r\n	git submodule add git://github.com/czheng/referencelink.git extensions/referencelink\r\n	git submodule add git://github.com/rowan-lewis/reflectionfield.git extensions/reflectionfield\r\n	git submodule add git://github.com/nickdunn/section_schemas.git extensions/section_schemas\r\n\r\n### Committing the Changes to GitHub\r\n\r\nTo keep Git from including the `manifest` directory and the `install-log.txt` file in the repository, I modify the `.gitignore` file:\r\n\r\n	.Apple*\r\n	.DS_Store\r\n	*config.php\r\n	.htaccess\r\n	symphony/.htaccess\r\n	workspace/\r\n	manifest\r\n	install-log.txt\r\n\r\nAdd the update files to be staged for committing to the repository:\r\n\r\n	git add -u\r\n\r\nCheck the status before committing\r\n\r\n	git status\r\n\r\nCommit the changes to the repository\r\n\r\n	git commit -m \"Add additional extensions as submodules\"\r\n\r\nPush the changes to GitHub\r\n\r\n	git push origin master\r\n\r\n### Committing Changes to the Database\r\n\r\nI don\'t want to store sessions, server configuration or user authentication information in the GitHub repository. The Symphony Export Ensemble extension removes this information and creates an `install.php` file with the SQL statements required to reinstall a copy of the site, encoded as base64.\r\n\r\nI tried to create an ensemble with all the extensions I had added as submodules. This caused an `fopen` error, stating there were too many files open. I discovered that this had to do with limits imposed by the PHP function for the number of files that needed to be included in the ZIP archive. The problem was solved by uninstalling all extensions except the Export Ensemble extension, renaming the extensions folder to `_extensions` and creating another extensions folder with only the Export Ensemble extension. Then, I was able to export the ensemble successfully.\r\n\r\n	Fatal error: Uncaught exception \'RuntimeException\' with message \'fopen(/Users/stephen/Sites/sym/site/manifest/logs/main) [<a href=\'function.fopen\'>function.fopen</a>]: failed to open stream: Too many open files\' in /Users/stephen/Sites/sym/site/symphony/lib/core/class.log.php:93 Stack trace: #0 /Users/stephen/Sites/sym/site/symphony/lib/core/class.log.php(93): fopen(\'/Users/stephen/...\', \'a\') #1 /Users/stephen/Sites/sym/site/symphony/lib/core/class.log.php(80): Log->writeToLog(\'09:15:32 > WARN...\', true) #2 /Users/stephen/Sites/sym/site/symphony/lib/core/class.symphony.php(290): Log->pushToLog(\'2 - DirectoryIt...\', 1, true) #3 [internal function]: Symphony->__errorHandler(2, \'DirectoryIterat...\', \'/Users/stephen/...\', 37, Array) #4 /Users/stephen/Sites/sym/site/extensions/export_ensemble/extension.driver.php(37): DirectoryIterator->__construct(\'/Users/stephen/...\') #5 /Users/stephen/Sites/sym/site/extensions/export_ensemble/extension.driver.php(42): extension_export_ensemble->__addFolderToArchive(Object(ZipArchive), \'/Use in /Users/stephen/Sites/sym/site/symphony/lib/core/class.log.php on line 93\r\n\r\nHmm. Not sure how to avoid this issue. Go to plan B: include only the extensions that I need.\r\n\r\n### Creating a Production Branch\r\n\r\nI wanted to deploy the test site to a production server to see if I encountered similar issues. Joyent Shared Accelerators provide SSH access and Git is installed, so I might as well try out using Git to deploy a site to a production server. One issue with this is that the install.php and update.php files need to be removed as soon as Symphony has been installed. However, I want to keep these files in the master branch of the repository so that I can still install from a copy of the repository. So, I\'ve created a production repository that omits the `install.php` and `update.php` files.\r\n\r\n#### Set Up the Repository to Push to GitHub\r\n\r\nI needed to generate SSH keys and provide my SSH public key to GitHub to be able to push changes from my Joyent Accelerator account. First, configure the Global Git Config on Joyent:\r\n\r\n	git config --global user.name \"username\"\r\n	git config --global user.name username@example.com\r\n	git config --global github.user bauhouse\r\n	git config --global github.token {GitHub API Token}\r\n\r\nGenerate a public/private dsa key pair\r\n\r\n	ssh-keygen -t dsa\r\n\r\nCopy the public key to GitHub. Copy the Terminal output from this command:\r\n\r\n	cat id_dsa.pub\r\n\r\nAnd add this public key to the [GitHub account](https://github.com/account) as an SSH public key.\r\n\r\n#### An Issue with Git on Joyent\r\n\r\nEverything was working fine with Git on Joyent until I tried to commit. Every time I tried to commit, I received the following error:\r\n\r\n	Duplicate Signed-off-by lines.\r\n\r\nGoogle was my friend. I found [others had come up against this issue](http://willnorris.com/2009/02/git-duplicate-signed-off-by-lines?caught_as=moderation#comment-caught) as well. Thanks to [Will Norris](http://willnorris.com/author/willnorris/) for the solution. This helped me git going again on Joyent’s Shared Accelerators once I realized I needed to modify the first line of the `.git/hooks/commit-msg` file in my repository from this:\r\n\r\n	#!/bin/sh\r\n\r\nto this:\r\n\r\n	#!/usr/bin/bash\r\n\r\nNow, commits work as expected and I can push my changes to the production branch to GitHub from Joyent. First, I can change the name of the `master` branch to `production`:\r\n\r\n	git branch -m master production\r\n\r\nThen push the changes to GitHub:\r\n\r\n	git push origin production\r\n\r\nNow, any changes I make locally can be merged into the `production` branch, pushed to GitHub, then pulled into the production site. Deploying to a production server while using version control couldn\'t be any easier. A local branch can be used as a repository for a MySQL dump file to ensure that database changes are also reflected for each commit. This should probably remain private, so as to avoid any mistakes that post sensitive data to a public repository.\r\n\r\n### Git on Windows\r\n\r\nI ran into an issue where Git was changing end of line characters and files were modified in the process of cloning a repository. Issuing a `git status` command would return a list of changed files as soon as the files were cloned. This made it impossible to working on the repositories unless I committed the changed files. It didn\'t make sense to commit files where the only changes consisted of end of line characters. Line feeds (LF) and carriage returns (CR) were being changed to carriage returns plus line feeds (CRLF). It turns out there is a fix: to change the Git configuration file:\r\n\r\n	git config core.autocrlf false\r\n\r\nThis will ensure that Git ignores end of line characters, leaving them as they are.\r\n', '<h3>Install Symphony from GitHub</h3>\n\n<p>On my Mac, I open a Terminal window and issue the following commands:</p>\n\n<pre><code>cd Sites/sym\ngit clone git://github.com/symphony/symphony-2.git\nmv symphony-2 site\ncd site\ngit submodule init\ngit submodule update\nchmod 777 . symphony\n</code></pre>\n\n<p>I have a virtual host set up for my Sites directory so that instead of find the Sites directory here:</p>\n\n<pre><code>http://localhost/~stephen/\n</code></pre>\n\n<p>I can find it here:</p>\n\n<pre><code>http://home/\n</code></pre>\n\n<p>I create a MySQL database called <code>sym_site</code> and install by navigating to:</p>\n\n<pre><code>http://home/sym/site/\n</code></pre>\n\n<p>I add my server configuration and user settings and Symphony is installed.</p>\n\n<h3>Set Up the GitHub Repository</h3>\n\n<p>I create a new repository on GitHub called <code>sym-site</code>. Since I have cloned my local repository from the official Symphony <code>symphony-2</code> repository on GitHub, my local repository has the following configuration in <code>~/Sites/sym/site/.git/config</code>:</p>\n\n<pre><code>[core]\n    repositoryformatversion = 0\n    filemode = true\n    bare = false\n    logallrefupdates = true\n[remote \"origin\"]\n    url = git://github.com/symphony/symphony-2.git\n    fetch = +refs/heads/*:refs/remotes/origin/*\n[branch \"master\"]\n    remote = origin\n    merge = refs/heads/master\n[submodule \"extensions/debugdevkit\"]\n    url = git://github.com/symphony/debugdevkit.git\n[submodule \"extensions/export_ensemble\"]\n    url = git://github.com/pointybeard/export_ensemble.git\n[submodule \"extensions/jit_image_manipulation\"]\n    url = git://github.com/pointybeard/jit_image_manipulation.git\n[submodule \"extensions/maintenance_mode\"]\n    url = git://github.com/pointybeard/maintenance_mode.git\n[submodule \"extensions/markdown\"]\n    url = git://github.com/pointybeard/markdown.git\n[submodule \"extensions/profiledevkit\"]\n    url = git://github.com/symphony/profiledevkit.git\n[submodule \"extensions/selectbox_link_field\"]\n    url = git://github.com/pointybeard/selectbox_link_field.git\n</code></pre>\n\n<p>I manually modify the file to point to my new repository on GitHub:</p>\n\n<pre><code>[remote \"origin\"]\n    url = git@github.com:bauhouse/sym-site.git\n    fetch = +refs/heads/*:refs/remotes/origin/*\n</code></pre>\n\n<p>Then, I push the repository to GitHub:</p>\n\n<pre><code>git push origin master\n</code></pre>\n\n<h3>Install Symphony Extensions from GitHub</h3>\n\n<p>The first step is to add some extensions. I&#8217;ll do this by adding submodules with Git:</p>\n\n<pre><code>git submodule add git://github.com/rowan-lewis/activitylog.git extensions/activitylog\ngit submodule add git://github.com/pointybeard/asdc.git extensions/asdc\ngit submodule add git://github.com/pointybeard/content_type_mappings.git extensions/content_type_mappings\ngit submodule add git://github.com/yourheropaul/databasemanipulator.git extensions/databasemanipulator\ngit submodule add git://github.com/makenosound/dynamic_event_redirect.git extensions/dynamic_event_redirect\ngit submodule add git://github.com/czheng/enhancedtaglist.git extensions/enhancedtaglist\ngit submodule add git://github.com/nickdunn/entity_diagram.git extensions/entity_diagram\ngit submodule add git://github.com/yourheropaul/eventex.git extensions/eventex\ngit submodule add git://github.com/carsten/globalparamloader.git extensions/globalparamloader\ngit submodule add git://github.com/rowan-lewis/globalresourceloader.git extensions/globalresourceloader\ngit submodule add git://github.com/ahwayakchih/markitup.git extensions/markitup\ngit submodule add git://github.com/Demwunz/multiselect_to_checkboxes.git extensions/multiselect_to_checkboxes\ngit submodule add git://github.com/pointybeard/numberfield.git extensions/numberfield\ngit submodule add git://github.com/nickdunn/order_entries.git extensions/order_entries\ngit submodule add git://github.com/pointybeard/pagesfield.git extensions/pagesfield\ngit submodule add git://github.com/nickdunn/publishfiltering.git extensions/publishfiltering\ngit submodule add git://github.com/czheng/referencelink.git extensions/referencelink\ngit submodule add git://github.com/rowan-lewis/reflectionfield.git extensions/reflectionfield\ngit submodule add git://github.com/nickdunn/section_schemas.git extensions/section_schemas\n</code></pre>\n\n<h3>Committing the Changes to GitHub</h3>\n\n<p>To keep Git from including the <code>manifest</code> directory and the <code>install-log.txt</code> file in the repository, I modify the <code>.gitignore</code> file:</p>\n\n<pre><code>.Apple*\n.DS_Store\n*config.php\n.htaccess\nsymphony/.htaccess\nworkspace/\nmanifest\ninstall-log.txt\n</code></pre>\n\n<p>Add the update files to be staged for committing to the repository:</p>\n\n<pre><code>git add -u\n</code></pre>\n\n<p>Check the status before committing</p>\n\n<pre><code>git status\n</code></pre>\n\n<p>Commit the changes to the repository</p>\n\n<pre><code>git commit -m \"Add additional extensions as submodules\"\n</code></pre>\n\n<p>Push the changes to GitHub</p>\n\n<pre><code>git push origin master\n</code></pre>\n\n<h3>Committing Changes to the Database</h3>\n\n<p>I don&#8217;t want to store sessions, server configuration or user authentication information in the GitHub repository. The Symphony Export Ensemble extension removes this information and creates an <code>install.php</code> file with the SQL statements required to reinstall a copy of the site, encoded as base64.</p>\n\n<p>I tried to create an ensemble with all the extensions I had added as submodules. This caused an <code>fopen</code> error, stating there were too many files open. I discovered that this had to do with limits imposed by the PHP function for the number of files that needed to be included in the ZIP archive. The problem was solved by uninstalling all extensions except the Export Ensemble extension, renaming the extensions folder to <code>_extensions</code> and creating another extensions folder with only the Export Ensemble extension. Then, I was able to export the ensemble successfully.</p>\n\n<pre><code>Fatal error: Uncaught exception \'RuntimeException\' with message \'fopen(/Users/stephen/Sites/sym/site/manifest/logs/main) [&lt;a href=\'function.fopen\'&gt;function.fopen&lt;/a&gt;]: failed to open stream: Too many open files\' in /Users/stephen/Sites/sym/site/symphony/lib/core/class.log.php:93 Stack trace: #0 /Users/stephen/Sites/sym/site/symphony/lib/core/class.log.php(93): fopen(\'/Users/stephen/...\', \'a\') #1 /Users/stephen/Sites/sym/site/symphony/lib/core/class.log.php(80): Log-&gt;writeToLog(\'09:15:32 &gt; WARN...\', true) #2 /Users/stephen/Sites/sym/site/symphony/lib/core/class.symphony.php(290): Log-&gt;pushToLog(\'2 - DirectoryIt...\', 1, true) #3 [internal function]: Symphony-&gt;__errorHandler(2, \'DirectoryIterat...\', \'/Users/stephen/...\', 37, Array) #4 /Users/stephen/Sites/sym/site/extensions/export_ensemble/extension.driver.php(37): DirectoryIterator-&gt;__construct(\'/Users/stephen/...\') #5 /Users/stephen/Sites/sym/site/extensions/export_ensemble/extension.driver.php(42): extension_export_ensemble-&gt;__addFolderToArchive(Object(ZipArchive), \'/Use in /Users/stephen/Sites/sym/site/symphony/lib/core/class.log.php on line 93\n</code></pre>\n\n<p>Hmm. Not sure how to avoid this issue. Go to plan B: include only the extensions that I need.</p>\n\n<h3>Creating a Production Branch</h3>\n\n<p>I wanted to deploy the test site to a production server to see if I encountered similar issues. Joyent Shared Accelerators provide SSH access and Git is installed, so I might as well try out using Git to deploy a site to a production server. One issue with this is that the install.php and update.php files need to be removed as soon as Symphony has been installed. However, I want to keep these files in the master branch of the repository so that I can still install from a copy of the repository. So, I&#8217;ve created a production repository that omits the <code>install.php</code> and <code>update.php</code> files.</p>\n\n<h4>Set Up the Repository to Push to GitHub</h4>\n\n<p>I needed to generate SSH keys and provide my SSH public key to GitHub to be able to push changes from my Joyent Accelerator account. First, configure the Global Git Config on Joyent:</p>\n\n<pre><code>git config --global user.name \"username\"\ngit config --global user.name username@example.com\ngit config --global github.user bauhouse\ngit config --global github.token {GitHub API Token}\n</code></pre>\n\n<p>Generate a public/private dsa key pair</p>\n\n<pre><code>ssh-keygen -t dsa\n</code></pre>\n\n<p>Copy the public key to GitHub. Copy the Terminal output from this command:</p>\n\n<pre><code>cat id_dsa.pub\n</code></pre>\n\n<p>And add this public key to the <a href=\"https://github.com/account\">GitHub account</a> as an SSH public key.</p>\n\n<h4>An Issue with Git on Joyent</h4>\n\n<p>Everything was working fine with Git on Joyent until I tried to commit. Every time I tried to commit, I received the following error:</p>\n\n<pre><code>Duplicate Signed-off-by lines.\n</code></pre>\n\n<p>Google was my friend. I found <a href=\"http://willnorris.com/2009/02/git-duplicate-signed-off-by-lines?caught_as=moderation#comment-caught\">others had come up against this issue</a> as well. Thanks to <a href=\"http://willnorris.com/author/willnorris/\">Will Norris</a> for the solution. This helped me git going again on Joyent’s Shared Accelerators once I realized I needed to modify the first line of the <code>.git/hooks/commit-msg</code> file in my repository from this:</p>\n\n<pre><code>#!/bin/sh\n</code></pre>\n\n<p>to this:</p>\n\n<pre><code>#!/usr/bin/bash\n</code></pre>\n\n<p>Now, commits work as expected and I can push my changes to the production branch to GitHub from Joyent. First, I can change the name of the <code>master</code> branch to <code>production</code>:</p>\n\n<pre><code>git branch -m master production\n</code></pre>\n\n<p>Then push the changes to GitHub:</p>\n\n<pre><code>git push origin production\n</code></pre>\n\n<p>Now, any changes I make locally can be merged into the <code>production</code> branch, pushed to GitHub, then pulled into the production site. Deploying to a production server while using version control couldn&#8217;t be any easier. A local branch can be used as a repository for a MySQL dump file to ensure that database changes are also reflected for each commit. This should probably remain private, so as to avoid any mistakes that post sensitive data to a public repository.</p>\n\n<h3>Git on Windows</h3>\n\n<p>I ran into an issue where Git was changing end of line characters and files were modified in the process of cloning a repository. Issuing a <code>git status</code> command would return a list of changed files as soon as the files were cloned. This made it impossible to working on the repositories unless I committed the changed files. It didn&#8217;t make sense to commit files where the only changes consisted of end of line characters. Line feeds (LF) and carriage returns (CR) were being changed to carriage returns plus line feeds (CRLF). It turns out there is a fix: to change the Git configuration file:</p>\n\n<pre><code>git config core.autocrlf false\n</code></pre>\n\n<p>This will ensure that Git ignores end of line characters, leaving them as they are.</p>\n');

-- *** STRUCTURE: `tbl_entries_data_22` ***
DROP TABLE IF EXISTS `tbl_entries_data_22`;
CREATE TABLE `tbl_entries_data_22` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `entry_id` int(11) unsigned NOT NULL,
  `relation_id` int(11) unsigned NOT NULL,
  PRIMARY KEY  (`id`),
  KEY `entry_id` (`entry_id`),
  KEY `relation_id` (`relation_id`)
) ENGINE=MyISAM AUTO_INCREMENT=329 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_entries_data_22` ***
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (42, 5, 17);
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (61, 19, 17);
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (44, 20, 17);
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (45, 21, 17);
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (100, 22, 17);
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (273, 23, 37);
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (98, 24, 16);
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (99, 25, 16);
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (115, 26, 4);
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (104, 27, 17);
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (112, 28, 17);
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (159, 29, 37);
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (78, 30, 17);
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (101, 31, 17);
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (91, 32, 16);
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (218, 33, 37);
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (113, 34, 17);
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (117, 35, 17);
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (194, 36, 37);
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (156, 38, 37);
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (155, 39, 37);
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (164, 40, 37);
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (207, 41, 37);
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (209, 42, 37);
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (216, 43, 37);
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (213, 44, 37);
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (265, 45, 37);
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (257, 46, 37);
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (266, 47, 37);
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (301, 48, 17);
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (269, 49, 37);
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (276, 50, 37);
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (278, 51, 37);
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (300, 52, 37);
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (314, 53, 37);
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (313, 54, 37);
INSERT INTO `tbl_entries_data_22` (`id`, `entry_id`, `relation_id`) VALUES (328, 55, 37);

-- *** STRUCTURE: `tbl_entries_data_23` ***
DROP TABLE IF EXISTS `tbl_entries_data_23`;
CREATE TABLE `tbl_entries_data_23` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `entry_id` int(11) unsigned NOT NULL,
  `relation_id` int(11) unsigned NOT NULL,
  PRIMARY KEY  (`id`),
  KEY `entry_id` (`entry_id`),
  KEY `relation_id` (`relation_id`)
) ENGINE=MyISAM AUTO_INCREMENT=314 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_entries_data_23` ***
INSERT INTO `tbl_entries_data_23` (`id`, `entry_id`, `relation_id`) VALUES (38, 5, 15);
INSERT INTO `tbl_entries_data_23` (`id`, `entry_id`, `relation_id`) VALUES (51, 19, 15);
INSERT INTO `tbl_entries_data_23` (`id`, `entry_id`, `relation_id`) VALUES (40, 20, 15);
INSERT INTO `tbl_entries_data_23` (`id`, `entry_id`, `relation_id`) VALUES (41, 21, 15);
INSERT INTO `tbl_entries_data_23` (`id`, `entry_id`, `relation_id`) VALUES (86, 22, 15);
INSERT INTO `tbl_entries_data_23` (`id`, `entry_id`, `relation_id`) VALUES (258, 23, 15);
INSERT INTO `tbl_entries_data_23` (`id`, `entry_id`, `relation_id`) VALUES (100, 26, 15);
INSERT INTO `tbl_entries_data_23` (`id`, `entry_id`, `relation_id`) VALUES (85, 25, 15);
INSERT INTO `tbl_entries_data_23` (`id`, `entry_id`, `relation_id`) VALUES (84, 24, 15);
INSERT INTO `tbl_entries_data_23` (`id`, `entry_id`, `relation_id`) VALUES (90, 27, 15);
INSERT INTO `tbl_entries_data_23` (`id`, `entry_id`, `relation_id`) VALUES (203, 33, 15);
INSERT INTO `tbl_entries_data_23` (`id`, `entry_id`, `relation_id`) VALUES (144, 29, 15);
INSERT INTO `tbl_entries_data_23` (`id`, `entry_id`, `relation_id`) VALUES (68, 30, 15);
INSERT INTO `tbl_entries_data_23` (`id`, `entry_id`, `relation_id`) VALUES (87, 31, 15);
INSERT INTO `tbl_entries_data_23` (`id`, `entry_id`, `relation_id`) VALUES (98, 34, 15);
INSERT INTO `tbl_entries_data_23` (`id`, `entry_id`, `relation_id`) VALUES (102, 35, 15);
INSERT INTO `tbl_entries_data_23` (`id`, `entry_id`, `relation_id`) VALUES (179, 36, 15);
INSERT INTO `tbl_entries_data_23` (`id`, `entry_id`, `relation_id`) VALUES (141, 38, 15);
INSERT INTO `tbl_entries_data_23` (`id`, `entry_id`, `relation_id`) VALUES (140, 39, 15);
INSERT INTO `tbl_entries_data_23` (`id`, `entry_id`, `relation_id`) VALUES (149, 40, 15);
INSERT INTO `tbl_entries_data_23` (`id`, `entry_id`, `relation_id`) VALUES (192, 41, 15);
INSERT INTO `tbl_entries_data_23` (`id`, `entry_id`, `relation_id`) VALUES (194, 42, 15);
INSERT INTO `tbl_entries_data_23` (`id`, `entry_id`, `relation_id`) VALUES (201, 43, 15);
INSERT INTO `tbl_entries_data_23` (`id`, `entry_id`, `relation_id`) VALUES (198, 44, 15);
INSERT INTO `tbl_entries_data_23` (`id`, `entry_id`, `relation_id`) VALUES (250, 45, 15);
INSERT INTO `tbl_entries_data_23` (`id`, `entry_id`, `relation_id`) VALUES (242, 46, 15);
INSERT INTO `tbl_entries_data_23` (`id`, `entry_id`, `relation_id`) VALUES (251, 47, 15);
INSERT INTO `tbl_entries_data_23` (`id`, `entry_id`, `relation_id`) VALUES (286, 48, 15);
INSERT INTO `tbl_entries_data_23` (`id`, `entry_id`, `relation_id`) VALUES (254, 49, 15);
INSERT INTO `tbl_entries_data_23` (`id`, `entry_id`, `relation_id`) VALUES (261, 50, 15);
INSERT INTO `tbl_entries_data_23` (`id`, `entry_id`, `relation_id`) VALUES (263, 51, 15);
INSERT INTO `tbl_entries_data_23` (`id`, `entry_id`, `relation_id`) VALUES (285, 52, 15);
INSERT INTO `tbl_entries_data_23` (`id`, `entry_id`, `relation_id`) VALUES (299, 53, 15);
INSERT INTO `tbl_entries_data_23` (`id`, `entry_id`, `relation_id`) VALUES (298, 54, 15);
INSERT INTO `tbl_entries_data_23` (`id`, `entry_id`, `relation_id`) VALUES (313, 55, 15);

-- *** STRUCTURE: `tbl_entries_data_24` ***
DROP TABLE IF EXISTS `tbl_entries_data_24`;
CREATE TABLE `tbl_entries_data_24` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `entry_id` int(11) unsigned NOT NULL,
  `value` varchar(80) collate utf8_unicode_ci default NULL,
  `local` int(11) NOT NULL,
  `gmt` int(11) NOT NULL,
  PRIMARY KEY  (`id`),
  KEY `entry_id` (`entry_id`),
  KEY `value` (`value`)
) ENGINE=MyISAM AUTO_INCREMENT=329 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_entries_data_24` ***
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (42, 5, '2009-05-06T14:33:00-07:00', 1241645580, 1241645580);
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (61, 19, '2009-05-07T08:46:00-07:00', 1241711160, 1241711160);
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (44, 20, '2009-05-16T09:40:00-07:00', 1242492000, 1242492000);
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (45, 21, '2009-05-16T11:19:03-07:00', 1242497943, 1242497943);
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (100, 22, '2009-05-05T15:00:00-07:00', 1241560800, 1241560800);
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (273, 23, '2009-05-16T13:46:30-07:00', 1242506790, 1242506790);
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (98, 24, '2009-05-04T00:00:00-07:00', 1241420400, 1241420400);
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (99, 25, '2009-05-04T08:00:00-07:00', 1241449200, 1241449200);
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (115, 26, '2009-05-01T09:00:00-07:00', 1241193600, 1241193600);
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (104, 27, '2009-05-17T08:18:37-07:00', 1242573517, 1242573517);
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (112, 28, '2009-05-05T09:00:00-07:00', 1241539200, 1241539200);
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (159, 29, '2009-05-05T18:00:00-07:00', 1241571600, 1241571600);
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (78, 30, '2009-05-17T13:00:51-07:00', 1242590451, 1242590451);
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (101, 31, '2009-05-05T16:07:21-07:00', 1241564841, 1241564841);
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (91, 32, '2009-05-04T13:00:00-07:00', 1241467200, 1241467200);
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (218, 33, '2009-05-21T20:40:41-07:00', 1242963641, 1242963641);
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (113, 34, '2009-05-18T08:59:49-07:00', 1242662389, 1242662389);
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (117, 35, '2009-05-20T07:53:48-07:00', 1242831228, 1242831228);
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (194, 36, '2009-05-21T09:10:00-07:00', 1242922200, 1242922200);
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (156, 38, '2009-05-20T09:45:05-07:00', 1242837905, 1242837905);
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (155, 39, '2009-05-20T14:47:38-07:00', 1242856058, 1242856058);
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (164, 40, '2009-05-20T20:31:09-07:00', 1242876669, 1242876669);
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (207, 41, '2009-05-21T10:37:15-07:00', 1242927435, 1242927435);
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (209, 42, '2009-05-22T09:50:16-07:00', 1243011016, 1243011016);
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (216, 43, '2009-05-24T07:44:37-07:00', 1243176277, 1243176277);
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (213, 44, '2009-05-24T08:36:07-07:00', 1243179367, 1243179367);
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (265, 45, '2009-05-25T07:54:22-07:00', 1243263262, 1243263262);
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (257, 46, '2009-05-25T10:20:29-07:00', 1243272029, 1243272029);
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (266, 47, '2009-05-25T12:26:43-07:00', 1243279603, 1243279603);
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (301, 48, '2008-06-29T06:08:34-07:00', 1214744914, 1214744914);
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (269, 49, '2009-05-25T23:36:47-07:00', 1243319807, 1243319807);
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (276, 50, '2009-06-15T06:57:17-07:00', 1245074237, 1245074237);
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (278, 51, '2009-06-17T06:29:07-07:00', 1245245347, 1245245347);
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (300, 52, '2009-06-17T06:58:27-07:00', 1245247107, 1245247107);
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (314, 53, '2009-06-20T19:09:58-07:00', 1245550198, 1245550198);
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (313, 54, '2009-06-22T08:31:20-07:00', 1245684680, 1245684680);
INSERT INTO `tbl_entries_data_24` (`id`, `entry_id`, `value`, `local`, `gmt`) VALUES (328, 55, '2009-07-05T08:04:06-07:00', 1246806246, 1246806246);

-- *** STRUCTURE: `tbl_entries_data_25` ***
DROP TABLE IF EXISTS `tbl_entries_data_25`;
CREATE TABLE `tbl_entries_data_25` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `entry_id` int(11) unsigned NOT NULL,
  `value` enum('yes','no') collate utf8_unicode_ci NOT NULL default 'no',
  PRIMARY KEY  (`id`),
  KEY `entry_id` (`entry_id`),
  KEY `value` (`value`)
) ENGINE=MyISAM AUTO_INCREMENT=329 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_entries_data_25` ***
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (42, 5, 'yes');
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (61, 19, 'yes');
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (44, 20, 'yes');
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (45, 21, 'yes');
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (100, 22, 'yes');
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (273, 23, 'yes');
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (98, 24, 'yes');
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (99, 25, 'yes');
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (115, 26, 'yes');
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (104, 27, 'yes');
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (112, 28, 'yes');
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (159, 29, 'yes');
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (78, 30, 'no');
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (101, 31, 'yes');
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (91, 32, 'yes');
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (218, 33, 'yes');
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (113, 34, 'yes');
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (117, 35, 'yes');
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (194, 36, 'yes');
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (156, 38, 'yes');
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (155, 39, 'yes');
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (164, 40, 'yes');
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (207, 41, 'yes');
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (209, 42, 'yes');
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (216, 43, 'yes');
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (213, 44, 'yes');
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (265, 45, 'yes');
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (257, 46, 'yes');
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (266, 47, 'yes');
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (301, 48, 'yes');
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (269, 49, 'yes');
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (276, 50, 'yes');
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (278, 51, 'no');
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (300, 52, 'yes');
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (314, 53, 'yes');
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (313, 54, 'yes');
INSERT INTO `tbl_entries_data_25` (`id`, `entry_id`, `value`) VALUES (328, 55, 'yes');

-- *** STRUCTURE: `tbl_entries_data_26` ***
DROP TABLE IF EXISTS `tbl_entries_data_26`;
CREATE TABLE `tbl_entries_data_26` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `entry_id` int(11) unsigned NOT NULL,
  `handle` varchar(255) collate utf8_unicode_ci default NULL,
  `value` varchar(255) collate utf8_unicode_ci default NULL,
  PRIMARY KEY  (`id`),
  KEY `entry_id` (`entry_id`),
  KEY `handle` (`handle`),
  KEY `value` (`value`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_entries_data_26` ***

-- *** STRUCTURE: `tbl_entries_data_27` ***
DROP TABLE IF EXISTS `tbl_entries_data_27`;
CREATE TABLE `tbl_entries_data_27` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `entry_id` int(11) unsigned NOT NULL,
  `relation_id` int(11) unsigned NOT NULL,
  PRIMARY KEY  (`id`),
  KEY `entry_id` (`entry_id`),
  KEY `relation_id` (`relation_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_entries_data_27` ***

-- *** STRUCTURE: `tbl_entries_data_28` ***
DROP TABLE IF EXISTS `tbl_entries_data_28`;
CREATE TABLE `tbl_entries_data_28` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `entry_id` int(11) unsigned NOT NULL,
  `relation_id` int(11) unsigned NOT NULL,
  PRIMARY KEY  (`id`),
  KEY `entry_id` (`entry_id`),
  KEY `relation_id` (`relation_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_entries_data_28` ***

-- *** STRUCTURE: `tbl_entries_data_29` ***
DROP TABLE IF EXISTS `tbl_entries_data_29`;
CREATE TABLE `tbl_entries_data_29` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `entry_id` int(11) unsigned NOT NULL,
  `value` text collate utf8_unicode_ci,
  `value_formatted` text collate utf8_unicode_ci,
  PRIMARY KEY  (`id`),
  KEY `entry_id` (`entry_id`),
  FULLTEXT KEY `value` (`value`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_entries_data_29` ***

-- *** STRUCTURE: `tbl_entries_data_30` ***
DROP TABLE IF EXISTS `tbl_entries_data_30`;
CREATE TABLE `tbl_entries_data_30` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `entry_id` int(11) unsigned NOT NULL,
  `value` text collate utf8_unicode_ci,
  `value_formatted` text collate utf8_unicode_ci,
  PRIMARY KEY  (`id`),
  KEY `entry_id` (`entry_id`),
  FULLTEXT KEY `value` (`value`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_entries_data_30` ***

-- *** STRUCTURE: `tbl_entries_data_31` ***
DROP TABLE IF EXISTS `tbl_entries_data_31`;
CREATE TABLE `tbl_entries_data_31` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `entry_id` int(11) unsigned NOT NULL,
  `handle` varchar(255) collate utf8_unicode_ci default NULL,
  `value` varchar(255) collate utf8_unicode_ci default NULL,
  PRIMARY KEY  (`id`),
  KEY `entry_id` (`entry_id`),
  KEY `handle` (`handle`),
  KEY `value` (`value`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_entries_data_31` ***

-- *** STRUCTURE: `tbl_entries_data_32` ***
DROP TABLE IF EXISTS `tbl_entries_data_32`;
CREATE TABLE `tbl_entries_data_32` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `entry_id` int(11) unsigned NOT NULL,
  `value` varchar(80) collate utf8_unicode_ci default NULL,
  `local` int(11) NOT NULL,
  `gmt` int(11) NOT NULL,
  PRIMARY KEY  (`id`),
  KEY `entry_id` (`entry_id`),
  KEY `value` (`value`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_entries_data_32` ***

-- *** STRUCTURE: `tbl_entries_data_33` ***
DROP TABLE IF EXISTS `tbl_entries_data_33`;
CREATE TABLE `tbl_entries_data_33` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `entry_id` int(11) unsigned NOT NULL,
  `relation_id` int(11) unsigned NOT NULL,
  PRIMARY KEY  (`id`),
  KEY `entry_id` (`entry_id`),
  KEY `relation_id` (`relation_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_entries_data_33` ***

-- *** STRUCTURE: `tbl_entries_data_34` ***
DROP TABLE IF EXISTS `tbl_entries_data_34`;
CREATE TABLE `tbl_entries_data_34` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `entry_id` int(11) unsigned NOT NULL,
  `value` enum('yes','no') collate utf8_unicode_ci NOT NULL default 'no',
  PRIMARY KEY  (`id`),
  KEY `entry_id` (`entry_id`),
  KEY `value` (`value`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_entries_data_34` ***

-- *** STRUCTURE: `tbl_entries_data_35` ***
DROP TABLE IF EXISTS `tbl_entries_data_35`;
CREATE TABLE `tbl_entries_data_35` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `entry_id` int(11) unsigned NOT NULL,
  `file` varchar(255) collate utf8_unicode_ci default NULL,
  `size` int(11) unsigned NOT NULL,
  `mimetype` varchar(50) collate utf8_unicode_ci NOT NULL,
  `meta` varchar(255) collate utf8_unicode_ci default NULL,
  PRIMARY KEY  (`id`),
  KEY `entry_id` (`entry_id`),
  KEY `file` (`file`),
  KEY `mimetype` (`mimetype`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_entries_data_35` ***

-- *** STRUCTURE: `tbl_entries_data_36` ***
DROP TABLE IF EXISTS `tbl_entries_data_36`;
CREATE TABLE `tbl_entries_data_36` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `entry_id` int(11) unsigned NOT NULL,
  `file` varchar(255) collate utf8_unicode_ci default NULL,
  `size` int(11) unsigned NOT NULL,
  `mimetype` varchar(50) collate utf8_unicode_ci NOT NULL,
  `meta` varchar(255) collate utf8_unicode_ci default NULL,
  PRIMARY KEY  (`id`),
  KEY `entry_id` (`entry_id`),
  KEY `file` (`file`),
  KEY `mimetype` (`mimetype`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_entries_data_36` ***

-- *** STRUCTURE: `tbl_entries_data_37` ***
DROP TABLE IF EXISTS `tbl_entries_data_37`;
CREATE TABLE `tbl_entries_data_37` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `entry_id` int(11) unsigned NOT NULL,
  `handle` varchar(255) collate utf8_unicode_ci default NULL,
  `value` varchar(255) collate utf8_unicode_ci default NULL,
  PRIMARY KEY  (`id`),
  KEY `entry_id` (`entry_id`),
  KEY `handle` (`handle`),
  KEY `value` (`value`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_entries_data_37` ***

-- *** STRUCTURE: `tbl_entries_data_38` ***
DROP TABLE IF EXISTS `tbl_entries_data_38`;
CREATE TABLE `tbl_entries_data_38` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `entry_id` int(11) unsigned NOT NULL,
  `handle` varchar(255) collate utf8_unicode_ci default NULL,
  `value` varchar(255) collate utf8_unicode_ci default NULL,
  PRIMARY KEY  (`id`),
  KEY `entry_id` (`entry_id`),
  KEY `handle` (`handle`),
  KEY `value` (`value`)
) ENGINE=MyISAM AUTO_INCREMENT=455 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_entries_data_38` ***
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (25, 24, 'an-event-apart', 'an event apart');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (26, 24, 'symphony-cms', 'symphony cms');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (27, 22, 'symphony-cms', 'symphony cms');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (104, 29, 'symphony-cms', 'symphony cms');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (10, 30, 'symphony-cms', 'symphony cms');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (30, 31, 'framework', 'framework');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (29, 31, 'css', 'css');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (28, 31, '960-grid-system', '960 grid system');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (210, 33, 'symphony-cms', 'symphony cms');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (335, 23, 'symphony-cms', 'symphony cms');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (334, 23, 'extensions', 'extensions');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (39, 34, 'xslt', 'xslt');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (41, 35, 'xslt', 'xslt');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (174, 36, 'xslt', 'xslt');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (173, 36, 'symphony-cms', 'symphony cms');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (100, 38, 'symphony-cms', 'symphony cms');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (99, 39, 'symphony-cms', 'symphony cms');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (113, 40, 'symphony-cms', 'symphony cms');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (114, 40, 'xslt', 'xslt');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (190, 41, 'xslt', 'xslt');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (189, 41, 'symphony-cms', 'symphony cms');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (193, 42, 'symphony-cms', 'symphony cms');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (194, 42, 'xslt', 'xslt');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (207, 43, 'symphony-cms', 'symphony cms');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (208, 43, 'xslt', 'xslt');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (201, 44, 'symphony-cms', 'symphony cms');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (202, 44, 'xslt', 'xslt');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (316, 45, 'xml', 'xml');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (315, 45, 'symphony-cms', 'symphony cms');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (298, 46, 'xslt', 'xslt');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (297, 46, 'xml', 'xml');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (296, 46, 'symphony-cms', 'symphony cms');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (318, 47, 'xslt', 'xslt');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (317, 47, 'symphony-cms', 'symphony cms');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (391, 48, 'flex-sdk', 'Flex SDK');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (390, 48, 'actionscript', 'ActionScript');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (326, 49, 'xml', 'xml');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (327, 49, 'xslt', 'xslt');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (325, 49, 'symphony-cms', 'symphony cms');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (340, 50, 'symphony-cms', 'symphony cms');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (341, 50, 'xslt', 'xslt');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (344, 51, 'symphony-cms', 'symphony cms');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (345, 51, 'xslt', 'xslt');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (389, 52, 'xslt', 'xslt');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (388, 52, 'symphony-cms', 'symphony cms');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (426, 53, 'xslt', 'xslt');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (425, 53, 'symphony-cms', 'symphony cms');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (424, 53, 'github', 'github');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (423, 54, 'symphony-cms', 'symphony cms');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (454, 55, 'symphony-cms', 'symphony cms');
INSERT INTO `tbl_entries_data_38` (`id`, `entry_id`, `handle`, `value`) VALUES (453, 55, 'github', 'github');

-- *** STRUCTURE: `tbl_entries_data_7` ***
DROP TABLE IF EXISTS `tbl_entries_data_7`;
CREATE TABLE `tbl_entries_data_7` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `entry_id` int(11) unsigned NOT NULL,
  `handle` varchar(255) collate utf8_unicode_ci default NULL,
  `value` varchar(255) collate utf8_unicode_ci default NULL,
  PRIMARY KEY  (`id`),
  KEY `entry_id` (`entry_id`),
  KEY `handle` (`handle`),
  KEY `value` (`value`)
) ENGINE=MyISAM AUTO_INCREMENT=7 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_entries_data_7` ***
INSERT INTO `tbl_entries_data_7` (`id`, `entry_id`, `handle`, `value`) VALUES (2, 6, 'bookmarks', 'Bookmarks');
INSERT INTO `tbl_entries_data_7` (`id`, `entry_id`, `handle`, `value`) VALUES (3, 7, 'books', 'Books');
INSERT INTO `tbl_entries_data_7` (`id`, `entry_id`, `handle`, `value`) VALUES (4, 8, 'files', 'Files');
INSERT INTO `tbl_entries_data_7` (`id`, `entry_id`, `handle`, `value`) VALUES (5, 9, 'photos', 'Photos');
INSERT INTO `tbl_entries_data_7` (`id`, `entry_id`, `handle`, `value`) VALUES (6, 10, 'sites', 'Sites');

-- *** STRUCTURE: `tbl_entries_data_8` ***
DROP TABLE IF EXISTS `tbl_entries_data_8`;
CREATE TABLE `tbl_entries_data_8` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `entry_id` int(11) unsigned NOT NULL,
  `value` text collate utf8_unicode_ci,
  `value_formatted` text collate utf8_unicode_ci,
  PRIMARY KEY  (`id`),
  KEY `entry_id` (`entry_id`),
  FULLTEXT KEY `value` (`value`)
) ENGINE=MyISAM AUTO_INCREMENT=7 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_entries_data_8` ***
INSERT INTO `tbl_entries_data_8` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (2, 6, 'Things of interest on the world wide web', '<p>Things of interest on the world wide web</p>\n');
INSERT INTO `tbl_entries_data_8` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (3, 7, 'A bibliographical reference or book review', '<p>A bibliographical reference or book review</p>\n');
INSERT INTO `tbl_entries_data_8` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (4, 8, 'Files available for download', '<p>Files available for download</p>\n');
INSERT INTO `tbl_entries_data_8` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (5, 9, 'Digital photography and imagery', '<p>Digital photography and imagery</p>\n');
INSERT INTO `tbl_entries_data_8` (`id`, `entry_id`, `value`, `value_formatted`) VALUES (6, 10, 'The sites I like to frequent', '<p>The sites I like to frequent</p>\n');

-- *** STRUCTURE: `tbl_entries_data_9` ***
DROP TABLE IF EXISTS `tbl_entries_data_9`;
CREATE TABLE `tbl_entries_data_9` (
  `id` int(11) unsigned NOT NULL auto_increment,
  `entry_id` int(11) unsigned NOT NULL,
  `handle` varchar(255) collate utf8_unicode_ci default NULL,
  `value` varchar(255) collate utf8_unicode_ci default NULL,
  PRIMARY KEY  (`id`),
  KEY `entry_id` (`entry_id`),
  KEY `handle` (`handle`),
  KEY `value` (`value`)
) ENGINE=MyISAM AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- *** DATA: `tbl_entries_data_9` ***
INSERT INTO `tbl_entries_data_9` (`id`, `entry_id`, `handle`, `value`) VALUES (1, 4, 'home', 'Home');
INSERT INTO `tbl_entries_data_9` (`id`, `entry_id`, `handle`, `value`) VALUES (2, 16, 'about', 'About');
INSERT INTO `tbl_entries_data_9` (`id`, `entry_id`, `handle`, `value`) VALUES (3, 17, 'journal', 'Journal');
INSERT INTO `tbl_entries_data_9` (`id`, `entry_id`, `handle`, `value`) VALUES (4, 18, 'contact', 'Contact');
INSERT INTO `tbl_entries_data_9` (`id`, `entry_id`, `handle`, `value`) VALUES (5, 37, 'tutorials', 'Tutorials');

-- *** DATA: `tbl_entries` ***
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (6, 1, 1, '2009-05-06 21:20:08', '2009-05-07 04:20:08');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (5, 4, 1, '2009-05-05 14:36:04', '2009-05-05 21:36:04');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (4, 2, 1, '2009-05-05 14:29:24', '2009-05-05 21:29:24');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (7, 1, 1, '2009-05-06 21:21:28', '2009-05-07 04:21:28');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (8, 1, 1, '2009-05-06 21:23:11', '2009-05-07 04:23:11');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (9, 1, 1, '2009-05-06 21:23:58', '2009-05-07 04:23:58');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (10, 1, 1, '2009-05-06 21:24:37', '2009-05-07 04:24:37');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (11, 3, 1, '2009-05-06 21:30:25', '2009-05-07 04:30:25');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (12, 3, 1, '2009-05-06 21:31:35', '2009-05-07 04:31:35');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (13, 3, 1, '2009-05-06 21:32:16', '2009-05-07 04:32:16');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (14, 3, 1, '2009-05-06 21:32:40', '2009-05-07 04:32:40');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (15, 3, 1, '2009-05-06 21:33:46', '2009-05-07 04:33:46');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (16, 2, 1, '2009-05-06 21:48:35', '2009-05-07 04:48:35');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (17, 2, 1, '2009-05-06 21:48:49', '2009-05-07 04:48:49');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (18, 2, 1, '2009-05-06 21:50:42', '2009-05-07 04:50:42');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (19, 4, 1, '2009-05-07 09:23:24', '2009-05-07 16:23:24');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (20, 4, 1, '2009-05-16 09:42:14', '2009-05-16 16:42:14');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (21, 4, 1, '2009-05-16 11:19:37', '2009-05-16 18:19:37');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (22, 4, 1, '2009-05-16 12:30:29', '2009-05-16 19:30:29');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (23, 4, 1, '2009-05-16 13:48:29', '2009-05-16 20:48:29');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (24, 4, 1, '2009-05-17 07:20:20', '2009-05-17 14:20:20');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (25, 4, 1, '2009-05-17 07:21:38', '2009-05-17 14:21:38');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (26, 4, 1, '2009-05-17 07:23:39', '2009-05-17 14:23:39');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (27, 4, 1, '2009-05-17 08:31:18', '2009-05-17 15:31:18');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (28, 4, 1, '2009-05-17 09:08:32', '2009-05-17 16:08:32');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (29, 4, 1, '2009-05-17 11:26:46', '2009-05-17 18:26:46');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (30, 4, 1, '2009-05-17 13:06:31', '2009-05-17 20:06:31');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (31, 4, 1, '2009-05-17 13:17:51', '2009-05-17 20:17:51');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (32, 4, 1, '2009-05-17 13:36:43', '2009-05-17 20:36:43');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (33, 4, 1, '2009-05-17 17:56:57', '2009-05-18 00:56:57');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (34, 4, 1, '2009-05-18 09:06:36', '2009-05-18 16:06:36');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (35, 4, 1, '2009-05-20 08:09:30', '2009-05-20 15:09:30');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (36, 4, 1, '2009-05-20 08:18:24', '2009-05-20 15:18:24');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (37, 2, 1, '2009-05-20 09:06:26', '2009-05-20 16:06:26');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (38, 4, 1, '2009-05-20 09:48:14', '2009-05-20 16:48:14');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (39, 4, 1, '2009-05-20 14:51:05', '2009-05-20 21:51:05');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (40, 4, 1, '2009-05-20 20:46:36', '2009-05-21 03:46:36');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (41, 4, 1, '2009-05-21 10:54:23', '2009-05-21 17:54:23');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (42, 4, 1, '2009-05-22 10:17:58', '2009-05-22 17:17:58');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (43, 4, 1, '2009-05-24 07:51:08', '2009-05-24 14:51:08');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (44, 4, 1, '2009-05-24 08:41:50', '2009-05-24 15:41:50');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (45, 4, 1, '2009-05-25 07:58:07', '2009-05-25 14:58:07');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (46, 4, 1, '2009-05-25 10:24:46', '2009-05-25 17:24:46');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (47, 4, 1, '2009-05-25 12:31:04', '2009-05-25 19:31:04');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (48, 4, 0, '2009-05-25 23:07:28', '2009-05-26 06:07:28');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (49, 4, 1, '2009-05-26 00:00:58', '2009-05-26 07:00:58');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (50, 4, 1, '2009-06-15 07:03:55', '2009-06-15 14:03:55');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (51, 4, 1, '2009-06-17 06:45:01', '2009-06-17 13:45:01');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (52, 4, 1, '2009-06-17 07:24:02', '2009-06-17 14:24:02');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (53, 4, 1, '2009-06-20 19:32:02', '2009-06-21 02:32:02');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (54, 4, 1, '2009-06-22 09:04:46', '2009-06-22 16:04:46');
INSERT INTO `tbl_entries` (`id`, `section_id`, `author_id`, `creation_date`, `creation_date_gmt`) VALUES (55, 4, 1, '2009-07-05 08:08:17', '2009-07-05 15:08:17');

-- *** DATA: `tbl_extensions` ***
INSERT INTO `tbl_extensions` (`id`, `name`, `status`, `version`) VALUES (2, 'markdown', 'enabled', 1.8);
INSERT INTO `tbl_extensions` (`id`, `name`, `status`, `version`) VALUES (35, 'export_install_file', 'enabled', 1.1);
INSERT INTO `tbl_extensions` (`id`, `name`, `status`, `version`) VALUES (9, 'selectbox_link_field', 'enabled', 1.9);
INSERT INTO `tbl_extensions` (`id`, `name`, `status`, `version`) VALUES (30, 'order_entries', 'enabled', 1.5);
INSERT INTO `tbl_extensions` (`id`, `name`, `status`, `version`) VALUES (25, 'markitup', 'enabled', 1);
INSERT INTO `tbl_extensions` (`id`, `name`, `status`, `version`) VALUES (22, 'entity_diagram', 'enabled', 1.2);
INSERT INTO `tbl_extensions` (`id`, `name`, `status`, `version`) VALUES (33, 'section_schemas', 'enabled', 1.2);
INSERT INTO `tbl_extensions` (`id`, `name`, `status`, `version`) VALUES (28, 'activitylog', 'enabled', 1);
INSERT INTO `tbl_extensions` (`id`, `name`, `status`, `version`) VALUES (32, 'publishfiltering', 'enabled', 1.004);

-- *** DATA: `tbl_extensions_delegates` ***
INSERT INTO `tbl_extensions_delegates` (`id`, `extension_id`, `page`, `delegate`, `callback`) VALUES (32, 25, '/administration/', 'AdminPagePostGenerate', '__settingsPanelInject');
INSERT INTO `tbl_extensions_delegates` (`id`, `extension_id`, `page`, `delegate`, `callback`) VALUES (40, 30, '/backend/', 'AppendElementBelowView', 'appendOrderFieldId');
INSERT INTO `tbl_extensions_delegates` (`id`, `extension_id`, `page`, `delegate`, `callback`) VALUES (39, 30, '/backend/', 'InitaliseAdminPageHead', 'appendScriptToHead');
INSERT INTO `tbl_extensions_delegates` (`id`, `extension_id`, `page`, `delegate`, `callback`) VALUES (44, 35, '/system/preferences/', 'AddCustomPreferenceFieldsets', 'appendPreferences');
INSERT INTO `tbl_extensions_delegates` (`id`, `extension_id`, `page`, `delegate`, `callback`) VALUES (30, 25, '/backend/', 'InitaliseAdminPageHead', '__missingDelegateWorkaround');
INSERT INTO `tbl_extensions_delegates` (`id`, `extension_id`, `page`, `delegate`, `callback`) VALUES (31, 25, '/administration/', 'AdminPagePreGenerate', '__publishPanelJS');
INSERT INTO `tbl_extensions_delegates` (`id`, `extension_id`, `page`, `delegate`, `callback`) VALUES (29, 25, '/backend/', 'ModifyTextareaFieldPublishWidget', '__publishPanelInject');
INSERT INTO `tbl_extensions_delegates` (`id`, `extension_id`, `page`, `delegate`, `callback`) VALUES (42, 32, '/backend/', 'InitaliseAdminPageHead', 'initaliseAdminPageHead');

-- *** DATA: `tbl_fields` ***
INSERT INTO `tbl_fields` (`id`, `label`, `element_name`, `type`, `parent_section`, `required`, `sortorder`, `location`, `show_column`) VALUES (9, 'Title', 'title', 'input', 2, 'yes', 0, 'main', 'yes');
INSERT INTO `tbl_fields` (`id`, `label`, `element_name`, `type`, `parent_section`, `required`, `sortorder`, `location`, `show_column`) VALUES (8, 'Description', 'description', 'textarea', 1, 'no', 1, 'main', 'yes');
INSERT INTO `tbl_fields` (`id`, `label`, `element_name`, `type`, `parent_section`, `required`, `sortorder`, `location`, `show_column`) VALUES (7, 'Title', 'title', 'input', 1, 'yes', 0, 'main', 'yes');
INSERT INTO `tbl_fields` (`id`, `label`, `element_name`, `type`, `parent_section`, `required`, `sortorder`, `location`, `show_column`) VALUES (10, 'Description', 'description', 'textarea', 2, 'no', 1, 'main', 'no');
INSERT INTO `tbl_fields` (`id`, `label`, `element_name`, `type`, `parent_section`, `required`, `sortorder`, `location`, `show_column`) VALUES (11, 'Body', 'body', 'textarea', 2, 'no', 2, 'main', 'no');
INSERT INTO `tbl_fields` (`id`, `label`, `element_name`, `type`, `parent_section`, `required`, `sortorder`, `location`, `show_column`) VALUES (12, 'Parent Section', 'parent-section', 'selectbox_link', 2, 'no', 3, 'sidebar', 'yes');
INSERT INTO `tbl_fields` (`id`, `label`, `element_name`, `type`, `parent_section`, `required`, `sortorder`, `location`, `show_column`) VALUES (13, 'Menu', 'menu', 'select', 2, 'no', 4, 'sidebar', 'yes');
INSERT INTO `tbl_fields` (`id`, `label`, `element_name`, `type`, `parent_section`, `required`, `sortorder`, `location`, `show_column`) VALUES (14, 'Sort', 'sort', 'order_entries', 2, 'no', 5, 'sidebar', 'yes');
INSERT INTO `tbl_fields` (`id`, `label`, `element_name`, `type`, `parent_section`, `required`, `sortorder`, `location`, `show_column`) VALUES (15, 'Title', 'title', 'input', 3, 'yes', 0, 'main', 'yes');
INSERT INTO `tbl_fields` (`id`, `label`, `element_name`, `type`, `parent_section`, `required`, `sortorder`, `location`, `show_column`) VALUES (16, 'Description', 'description', 'textarea', 3, 'no', 1, 'main', 'yes');
INSERT INTO `tbl_fields` (`id`, `label`, `element_name`, `type`, `parent_section`, `required`, `sortorder`, `location`, `show_column`) VALUES (17, 'Body', 'body', 'textarea', 3, 'no', 2, 'main', 'no');
INSERT INTO `tbl_fields` (`id`, `label`, `element_name`, `type`, `parent_section`, `required`, `sortorder`, `location`, `show_column`) VALUES (18, 'Sections', 'sections', 'selectbox_link', 3, 'no', 3, 'sidebar', 'no');
INSERT INTO `tbl_fields` (`id`, `label`, `element_name`, `type`, `parent_section`, `required`, `sortorder`, `location`, `show_column`) VALUES (19, 'Title', 'title', 'input', 4, 'yes', 0, 'main', 'yes');
INSERT INTO `tbl_fields` (`id`, `label`, `element_name`, `type`, `parent_section`, `required`, `sortorder`, `location`, `show_column`) VALUES (20, 'Description', 'description', 'textarea', 4, 'no', 1, 'main', 'no');
INSERT INTO `tbl_fields` (`id`, `label`, `element_name`, `type`, `parent_section`, `required`, `sortorder`, `location`, `show_column`) VALUES (21, 'Body', 'body', 'textarea', 4, 'no', 2, 'main', 'no');
INSERT INTO `tbl_fields` (`id`, `label`, `element_name`, `type`, `parent_section`, `required`, `sortorder`, `location`, `show_column`) VALUES (22, 'Section', 'section', 'selectbox_link', 4, 'no', 3, 'sidebar', 'yes');
INSERT INTO `tbl_fields` (`id`, `label`, `element_name`, `type`, `parent_section`, `required`, `sortorder`, `location`, `show_column`) VALUES (23, 'Category', 'category', 'selectbox_link', 4, 'no', 4, 'sidebar', 'yes');
INSERT INTO `tbl_fields` (`id`, `label`, `element_name`, `type`, `parent_section`, `required`, `sortorder`, `location`, `show_column`) VALUES (24, 'Date', 'date', 'date', 4, 'no', 6, 'sidebar', 'yes');
INSERT INTO `tbl_fields` (`id`, `label`, `element_name`, `type`, `parent_section`, `required`, `sortorder`, `location`, `show_column`) VALUES (25, 'Publish', 'publish', 'checkbox', 4, 'no', 7, 'sidebar', 'yes');
INSERT INTO `tbl_fields` (`id`, `label`, `element_name`, `type`, `parent_section`, `required`, `sortorder`, `location`, `show_column`) VALUES (26, 'Title', 'title', 'input', 5, 'yes', 0, 'main', 'yes');
INSERT INTO `tbl_fields` (`id`, `label`, `element_name`, `type`, `parent_section`, `required`, `sortorder`, `location`, `show_column`) VALUES (27, 'Type', 'type', 'selectbox_link', 5, 'yes', 1, 'main', 'yes');
INSERT INTO `tbl_fields` (`id`, `label`, `element_name`, `type`, `parent_section`, `required`, `sortorder`, `location`, `show_column`) VALUES (28, 'Entry', 'entry', 'selectbox_link', 5, 'no', 2, 'sidebar', 'yes');
INSERT INTO `tbl_fields` (`id`, `label`, `element_name`, `type`, `parent_section`, `required`, `sortorder`, `location`, `show_column`) VALUES (29, 'Description', 'description', 'textarea', 5, 'no', 4, 'main', 'no');
INSERT INTO `tbl_fields` (`id`, `label`, `element_name`, `type`, `parent_section`, `required`, `sortorder`, `location`, `show_column`) VALUES (30, 'Body', 'body', 'textarea', 5, 'no', 5, 'main', 'no');
INSERT INTO `tbl_fields` (`id`, `label`, `element_name`, `type`, `parent_section`, `required`, `sortorder`, `location`, `show_column`) VALUES (31, 'Tags', 'tags', 'taglist', 5, 'no', 7, 'sidebar', 'no');
INSERT INTO `tbl_fields` (`id`, `label`, `element_name`, `type`, `parent_section`, `required`, `sortorder`, `location`, `show_column`) VALUES (32, 'Date', 'date', 'date', 5, 'no', 8, 'sidebar', 'yes');
INSERT INTO `tbl_fields` (`id`, `label`, `element_name`, `type`, `parent_section`, `required`, `sortorder`, `location`, `show_column`) VALUES (33, 'Category', 'category', 'selectbox_link', 5, 'no', 6, 'sidebar', 'no');
INSERT INTO `tbl_fields` (`id`, `label`, `element_name`, `type`, `parent_section`, `required`, `sortorder`, `location`, `show_column`) VALUES (34, 'Publish', 'publish', 'checkbox', 5, 'no', 9, 'sidebar', 'yes');
INSERT INTO `tbl_fields` (`id`, `label`, `element_name`, `type`, `parent_section`, `required`, `sortorder`, `location`, `show_column`) VALUES (35, 'Image', 'image', 'upload', 5, 'no', 10, 'main', 'no');
INSERT INTO `tbl_fields` (`id`, `label`, `element_name`, `type`, `parent_section`, `required`, `sortorder`, `location`, `show_column`) VALUES (36, 'File', 'file', 'upload', 5, 'no', 11, 'main', 'no');
INSERT INTO `tbl_fields` (`id`, `label`, `element_name`, `type`, `parent_section`, `required`, `sortorder`, `location`, `show_column`) VALUES (37, 'URL', 'url', 'input', 5, 'no', 3, 'main', 'yes');
INSERT INTO `tbl_fields` (`id`, `label`, `element_name`, `type`, `parent_section`, `required`, `sortorder`, `location`, `show_column`) VALUES (38, 'Tags', 'tags', 'taglist', 4, 'no', 5, 'sidebar', 'yes');

-- *** DATA: `tbl_pages` ***
INSERT INTO `tbl_pages` (`id`, `parent`, `title`, `handle`, `path`, `params`, `data_sources`, `events`, `sortorder`) VALUES (1, NULL, 'Home', 'home', NULL, 'a/b/c/entry', 'categories,entries_by_section,entry,navigation,section,types', NULL, 0);
INSERT INTO `tbl_pages` (`id`, `parent`, `title`, `handle`, `path`, `params`, `data_sources`, `events`, `sortorder`) VALUES (2, NULL, 'About', 'about', NULL, 'entry/mode', 'entries_by_section,navigation,section', NULL, 8);
INSERT INTO `tbl_pages` (`id`, `parent`, `title`, `handle`, `path`, `params`, `data_sources`, `events`, `sortorder`) VALUES (3, NULL, 'Journal', 'journal', NULL, 'entry/mode', 'categories,entries,entries_archive,entry,navigation,section,types', NULL, 1);
INSERT INTO `tbl_pages` (`id`, `parent`, `title`, `handle`, `path`, `params`, `data_sources`, `events`, `sortorder`) VALUES (4, 3, 'XML', 'xml', 'journal', 'entry/mode', 'entry', NULL, 2);
INSERT INTO `tbl_pages` (`id`, `parent`, `title`, `handle`, `path`, `params`, `data_sources`, `events`, `sortorder`) VALUES (5, 3, 'Text', 'text', 'journal', 'entry/mode', 'entry', NULL, 3);
INSERT INTO `tbl_pages` (`id`, `parent`, `title`, `handle`, `path`, `params`, `data_sources`, `events`, `sortorder`) VALUES (6, NULL, 'Tutorials', 'tutorials', NULL, 'entry', 'entry,navigation,section,tutorials', NULL, 4);
INSERT INTO `tbl_pages` (`id`, `parent`, `title`, `handle`, `path`, `params`, `data_sources`, `events`, `sortorder`) VALUES (7, 6, 'Examples', 'examples', 'tutorials', NULL, NULL, NULL, 5);
INSERT INTO `tbl_pages` (`id`, `parent`, `title`, `handle`, `path`, `params`, `data_sources`, `events`, `sortorder`) VALUES (8, 7, 'Hello', 'hello', 'tutorials/examples', NULL, NULL, NULL, 6);
INSERT INTO `tbl_pages` (`id`, `parent`, `title`, `handle`, `path`, `params`, `data_sources`, `events`, `sortorder`) VALUES (9, NULL, 'Import', 'import', NULL, 'a', 'categories,navigation,sections', NULL, 9);
INSERT INTO `tbl_pages` (`id`, `parent`, `title`, `handle`, `path`, `params`, `data_sources`, `events`, `sortorder`) VALUES (10, NULL, 'Archive', 'archive', NULL, 'a/b/c/entry', 'entries_archive,entry,navigation,section,tag_cloud,types', NULL, 7);
INSERT INTO `tbl_pages` (`id`, `parent`, `title`, `handle`, `path`, `params`, `data_sources`, `events`, `sortorder`) VALUES (11, NULL, 'Tags', 'tags', NULL, NULL, 'navigation,tag_cloud', NULL, 10);

-- *** DATA: `tbl_pages_types` ***
INSERT INTO `tbl_pages_types` (`id`, `page_id`, `type`) VALUES (48, 1, 'main');
INSERT INTO `tbl_pages_types` (`id`, `page_id`, `type`) VALUES (14, 5, 'text');
INSERT INTO `tbl_pages_types` (`id`, `page_id`, `type`) VALUES (20, 4, 'XML');
INSERT INTO `tbl_pages_types` (`id`, `page_id`, `type`) VALUES (51, 11, 'admin');
INSERT INTO `tbl_pages_types` (`id`, `page_id`, `type`) VALUES (47, 1, 'index');
INSERT INTO `tbl_pages_types` (`id`, `page_id`, `type`) VALUES (44, 3, 'main');
INSERT INTO `tbl_pages_types` (`id`, `page_id`, `type`) VALUES (25, 2, 'main');
INSERT INTO `tbl_pages_types` (`id`, `page_id`, `type`) VALUES (53, 6, 'main');

-- *** DATA: `tbl_sections` ***
INSERT INTO `tbl_sections` (`id`, `name`, `handle`, `sortorder`, `entry_order`, `entry_order_direction`, `hidden`, `navigation_group`) VALUES (1, 'Types', 'types', 3, NULL, 'asc', 'no', 'Meta');
INSERT INTO `tbl_sections` (`id`, `name`, `handle`, `sortorder`, `entry_order`, `entry_order_direction`, `hidden`, `navigation_group`) VALUES (2, 'Sections', 'sections', 2, NULL, 'asc', 'no', 'Content');
INSERT INTO `tbl_sections` (`id`, `name`, `handle`, `sortorder`, `entry_order`, `entry_order_direction`, `hidden`, `navigation_group`) VALUES (3, 'Categories', 'categories', 4, NULL, 'asc', 'no', 'Meta');
INSERT INTO `tbl_sections` (`id`, `name`, `handle`, `sortorder`, `entry_order`, `entry_order_direction`, `hidden`, `navigation_group`) VALUES (4, 'Entries', 'entries', 0, 24, 'desc', 'no', 'Content');
INSERT INTO `tbl_sections` (`id`, `name`, `handle`, `sortorder`, `entry_order`, `entry_order_direction`, `hidden`, `navigation_group`) VALUES (5, 'Items', 'items', 1, NULL, 'asc', 'no', 'Content');

-- *** DATA: `tbl_sections_association` ***
INSERT INTO `tbl_sections_association` (`id`, `parent_section_id`, `parent_section_field_id`, `child_section_id`, `child_section_field_id`, `cascading_deletion`) VALUES (43, 2, 9, 2, 12, 'no');
INSERT INTO `tbl_sections_association` (`id`, `parent_section_id`, `parent_section_field_id`, `child_section_id`, `child_section_field_id`, `cascading_deletion`) VALUES (30, 2, 9, 3, 18, 'no');
INSERT INTO `tbl_sections_association` (`id`, `parent_section_id`, `parent_section_field_id`, `child_section_id`, `child_section_field_id`, `cascading_deletion`) VALUES (35, 2, 9, 4, 22, 'no');
INSERT INTO `tbl_sections_association` (`id`, `parent_section_id`, `parent_section_field_id`, `child_section_id`, `child_section_field_id`, `cascading_deletion`) VALUES (36, 3, 15, 4, 23, 'no');
INSERT INTO `tbl_sections_association` (`id`, `parent_section_id`, `parent_section_field_id`, `child_section_id`, `child_section_field_id`, `cascading_deletion`) VALUES (47, 1, 7, 5, 27, 'no');
INSERT INTO `tbl_sections_association` (`id`, `parent_section_id`, `parent_section_field_id`, `child_section_id`, `child_section_field_id`, `cascading_deletion`) VALUES (48, 4, 19, 5, 28, 'no');
INSERT INTO `tbl_sections_association` (`id`, `parent_section_id`, `parent_section_field_id`, `child_section_id`, `child_section_field_id`, `cascading_deletion`) VALUES (49, 3, 15, 5, 33, 'no');
